// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type NATSServerConfig struct{ capnp.Struct }

// NATSServerConfig_TypeID is the unique identifier for the type NATSServerConfig.
const NATSServerConfig_TypeID = 0xe6c2ada3d6363f58

func NewNATSServerConfig(s *capnp.Segment) (NATSServerConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return NATSServerConfig{st}, err
}

func NewRootNATSServerConfig(s *capnp.Segment) (NATSServerConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return NATSServerConfig{st}, err
}

func ReadRootNATSServerConfig(msg *capnp.Message) (NATSServerConfig, error) {
	root, err := msg.RootPtr()
	return NATSServerConfig{root.Struct()}, err
}

func (s NATSServerConfig) String() string {
	str, _ := text.Marshal(0xe6c2ada3d6363f58, s.Struct)
	return str
}

func (s NATSServerConfig) ClusterName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NATSServerConfig) HasClusterName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) ClusterNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NATSServerConfig) SetClusterName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NATSServerConfig) Server() (NATSServerConfig_HostPort, error) {
	p, err := s.Struct.Ptr(1)
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	ss, err := p.StructDefault(x_f8151d76c79d7b95[0:40])
	return NATSServerConfig_HostPort{Struct: ss}, err
}

func (s NATSServerConfig) HasServer() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) SetServer(v NATSServerConfig_HostPort) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewServer sets the server field to a newly
// allocated NATSServerConfig_HostPort struct, preferring placement in s's segment.
func (s NATSServerConfig) NewServer() (NATSServerConfig_HostPort, error) {
	ss, err := NewNATSServerConfig_HostPort(s.Struct.Segment())
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s NATSServerConfig) Monitor() (NATSServerConfig_HostPort, error) {
	p, err := s.Struct.Ptr(2)
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	ss, err := p.StructDefault(x_f8151d76c79d7b95[40:80])
	return NATSServerConfig_HostPort{Struct: ss}, err
}

func (s NATSServerConfig) HasMonitor() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) SetMonitor(v NATSServerConfig_HostPort) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewMonitor sets the monitor field to a newly
// allocated NATSServerConfig_HostPort struct, preferring placement in s's segment.
func (s NATSServerConfig) NewMonitor() (NATSServerConfig_HostPort, error) {
	ss, err := NewNATSServerConfig_HostPort(s.Struct.Segment())
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s NATSServerConfig) Cluster() (NATSServerConfig_HostPort, error) {
	p, err := s.Struct.Ptr(3)
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	ss, err := p.StructDefault(x_f8151d76c79d7b95[80:120])
	return NATSServerConfig_HostPort{Struct: ss}, err
}

func (s NATSServerConfig) HasCluster() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) SetCluster(v NATSServerConfig_HostPort) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewCluster sets the cluster field to a newly
// allocated NATSServerConfig_HostPort struct, preferring placement in s's segment.
func (s NATSServerConfig) NewCluster() (NATSServerConfig_HostPort, error) {
	ss, err := NewNATSServerConfig_HostPort(s.Struct.Segment())
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s NATSServerConfig) Routes() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.TextList{List: p.List()}, err
}

func (s NATSServerConfig) HasRoutes() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) SetRoutes(v capnp.TextList) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewRoutes sets the routes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s NATSServerConfig) NewRoutes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s NATSServerConfig) LogLevel() NATSServerConfig_NATSLogLevel {
	return NATSServerConfig_NATSLogLevel(s.Struct.Uint16(0))
}

func (s NATSServerConfig) SetLogLevel(v NATSServerConfig_NATSLogLevel) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s NATSServerConfig) MaxPayload() int32 {
	return int32(s.Struct.Uint32(4) ^ 100000)
}

func (s NATSServerConfig) SetMaxPayload(v int32) {
	s.Struct.SetUint32(4, uint32(v)^100000)
}

func (s NATSServerConfig) MaxConn() int32 {
	return int32(s.Struct.Uint32(8) ^ 1024)
}

func (s NATSServerConfig) SetMaxConn(v int32) {
	s.Struct.SetUint32(8, uint32(v)^1024)
}

func (s NATSServerConfig) MetricsExporterPort() int32 {
	return int32(s.Struct.Uint32(12) ^ 4444)
}

func (s NATSServerConfig) SetMetricsExporterPort(v int32) {
	s.Struct.SetUint32(12, uint32(v)^4444)
}

// NATSServerConfig_List is a list of NATSServerConfig.
type NATSServerConfig_List struct{ capnp.List }

// NewNATSServerConfig creates a new list of NATSServerConfig.
func NewNATSServerConfig_List(s *capnp.Segment, sz int32) (NATSServerConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return NATSServerConfig_List{l}, err
}

func (s NATSServerConfig_List) At(i int) NATSServerConfig { return NATSServerConfig{s.List.Struct(i)} }

func (s NATSServerConfig_List) Set(i int, v NATSServerConfig) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s NATSServerConfig_List) String() string {
	str, _ := text.MarshalList(0xe6c2ada3d6363f58, s.List)
	return str
}

// NATSServerConfig_Promise is a wrapper for a NATSServerConfig promised by a client call.
type NATSServerConfig_Promise struct{ *capnp.Pipeline }

func (p NATSServerConfig_Promise) Struct() (NATSServerConfig, error) {
	s, err := p.Pipeline.Struct()
	return NATSServerConfig{s}, err
}

func (p NATSServerConfig_Promise) Server() NATSServerConfig_HostPort_Promise {
	return NATSServerConfig_HostPort_Promise{Pipeline: p.Pipeline.GetPipelineDefault(1, x_f8151d76c79d7b95[120:160])}
}

func (p NATSServerConfig_Promise) Monitor() NATSServerConfig_HostPort_Promise {
	return NATSServerConfig_HostPort_Promise{Pipeline: p.Pipeline.GetPipelineDefault(2, x_f8151d76c79d7b95[160:200])}
}

func (p NATSServerConfig_Promise) Cluster() NATSServerConfig_HostPort_Promise {
	return NATSServerConfig_HostPort_Promise{Pipeline: p.Pipeline.GetPipelineDefault(3, x_f8151d76c79d7b95[200:240])}
}

type NATSServerConfig_HostPort struct{ capnp.Struct }

// NATSServerConfig_HostPort_TypeID is the unique identifier for the type NATSServerConfig_HostPort.
const NATSServerConfig_HostPort_TypeID = 0xd618c87c1da62651

func NewNATSServerConfig_HostPort(s *capnp.Segment) (NATSServerConfig_HostPort, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NATSServerConfig_HostPort{st}, err
}

func NewRootNATSServerConfig_HostPort(s *capnp.Segment) (NATSServerConfig_HostPort, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NATSServerConfig_HostPort{st}, err
}

func ReadRootNATSServerConfig_HostPort(msg *capnp.Message) (NATSServerConfig_HostPort, error) {
	root, err := msg.RootPtr()
	return NATSServerConfig_HostPort{root.Struct()}, err
}

func (s NATSServerConfig_HostPort) String() string {
	str, _ := text.Marshal(0xd618c87c1da62651, s.Struct)
	return str
}

func (s NATSServerConfig_HostPort) Host() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NATSServerConfig_HostPort) HasHost() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig_HostPort) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NATSServerConfig_HostPort) SetHost(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NATSServerConfig_HostPort) Port() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s NATSServerConfig_HostPort) SetPort(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// NATSServerConfig_HostPort_List is a list of NATSServerConfig_HostPort.
type NATSServerConfig_HostPort_List struct{ capnp.List }

// NewNATSServerConfig_HostPort creates a new list of NATSServerConfig_HostPort.
func NewNATSServerConfig_HostPort_List(s *capnp.Segment, sz int32) (NATSServerConfig_HostPort_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return NATSServerConfig_HostPort_List{l}, err
}

func (s NATSServerConfig_HostPort_List) At(i int) NATSServerConfig_HostPort {
	return NATSServerConfig_HostPort{s.List.Struct(i)}
}

func (s NATSServerConfig_HostPort_List) Set(i int, v NATSServerConfig_HostPort) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s NATSServerConfig_HostPort_List) String() string {
	str, _ := text.MarshalList(0xd618c87c1da62651, s.List)
	return str
}

// NATSServerConfig_HostPort_Promise is a wrapper for a NATSServerConfig_HostPort promised by a client call.
type NATSServerConfig_HostPort_Promise struct{ *capnp.Pipeline }

func (p NATSServerConfig_HostPort_Promise) Struct() (NATSServerConfig_HostPort, error) {
	s, err := p.Pipeline.Struct()
	return NATSServerConfig_HostPort{s}, err
}

type NATSServerConfig_NATSLogLevel uint16

// NATSServerConfig_NATSLogLevel_TypeID is the unique identifier for the type NATSServerConfig_NATSLogLevel.
const NATSServerConfig_NATSLogLevel_TypeID = 0xcd2ea85dab4af771

// Values of NATSServerConfig_NATSLogLevel.
const (
	NATSServerConfig_NATSLogLevel_nolog NATSServerConfig_NATSLogLevel = 0
	NATSServerConfig_NATSLogLevel_debug NATSServerConfig_NATSLogLevel = 1
	NATSServerConfig_NATSLogLevel_trace NATSServerConfig_NATSLogLevel = 2
)

// String returns the enum's constant name.
func (c NATSServerConfig_NATSLogLevel) String() string {
	switch c {
	case NATSServerConfig_NATSLogLevel_nolog:
		return "nolog"
	case NATSServerConfig_NATSLogLevel_debug:
		return "debug"
	case NATSServerConfig_NATSLogLevel_trace:
		return "trace"

	default:
		return ""
	}
}

// NATSServerConfig_NATSLogLevelFromString returns the enum value with a name,
// or the zero value if there's no such value.
func NATSServerConfig_NATSLogLevelFromString(c string) NATSServerConfig_NATSLogLevel {
	switch c {
	case "nolog":
		return NATSServerConfig_NATSLogLevel_nolog
	case "debug":
		return NATSServerConfig_NATSLogLevel_debug
	case "trace":
		return NATSServerConfig_NATSLogLevel_trace

	default:
		return 0
	}
}

type NATSServerConfig_NATSLogLevel_List struct{ capnp.List }

func NewNATSServerConfig_NATSLogLevel_List(s *capnp.Segment, sz int32) (NATSServerConfig_NATSLogLevel_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return NATSServerConfig_NATSLogLevel_List{l.List}, err
}

func (l NATSServerConfig_NATSLogLevel_List) At(i int) NATSServerConfig_NATSLogLevel {
	ul := capnp.UInt16List{List: l.List}
	return NATSServerConfig_NATSLogLevel(ul.At(i))
}

func (l NATSServerConfig_NATSLogLevel_List) Set(i int, v NATSServerConfig_NATSLogLevel) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_f8151d76c79d7b95 = "x\xda\x94TAh\x1c\xd5\x1f\xfe}of\xb3)\xe4" +
	"\xdf\xcd0[\xc8\xff\x10\xf7E\x82\xd6\xd0\x86\xa4\x11\x91" +
	"\\bR\x84&\x84:\xe3\xecA\xa4\xb5Nf\xdf\xee" +
	"\x8e\xec\xcc\xdb\xcc{\xbbM\xb1\x18\x85*T\x14D\xe9" +
	"E\x14\x8b\x82\x14\xc5C\xaf\x05/\x82\xd4\x83^\x83x" +
	"\xf3\xe2I\x0f\x1e\xc4\xdeF\xde\xec&\xbb\x87\xb4\"{" +
	"\xd8\xe1\xfb~\xfc\xbe\xef}\xbf\xdf{K\xb7\xf1\x1c[" +
	".\xddgD>/M\xe4\xbb\x7fo}}\xf9\xce\xe2" +
	"O\xe4,\xb0\xfc\xa5\xb5g\x0e\xbe\xf8\xe6\xbb\xdf\x88\xb0" +
	"\xb2\x89{pC\x94\x89\xdc\xcbx\x81\x90\xfbO|9" +
	"{\xfd\x87\x99\x03\xf2\x17\x80Qi\xc9\x94\xac\xec\xe2c" +
	"\xb87\x8b\xea\xb7q\x95\xc6x\xff\xff`\xf9\xad\xd7?" +
	"\xbd\xdf\x9f=\xf5\x80J%S\xfd+^\x84\xfb\x17\x9e" +
	"$ZqX\x0ez6OC\xad\xae(\x91\x95\xfa\"" +
	"\xbb\x12\xc9\xb4\x19\xb7\x16\xa3\xb0\x9bvW/\xae\xd7\x83" +
	"@d}\x91\x9d\x1f\xc0\x06\xd8\x96k\xadm\xd1\x17\x1d" +
	"\x0f\xf0\xa7\xc0\x88\x9c\xd9sD\x80s\xca\xfc1\xe7\x7f" +
	"\xe7\x88j\xa9\xec\xc8V\xad!vz\xad\x9a\xce\xc2H" +
	"\xfc\x17\x99\x0bRiOZ\x996\x12\x93\x96Md\x83" +
	"\xc8yj\x81\xc8\x9f\xb7\xe0/1\x00U\x18\xec\xac\xc1" +
	"N[\xf0\x9ff\xa8\xb4\xa5\xd2\x98\"\x86)B\xa5+" +
	"3\x0d\x9b\x18l\xc2\x91\xb8\xfdo\xe2h\xf9\x93\x18\x0b" +
	"\xdc9\xb156\xa7\x13\xaf\xe5\x03o\x99&\xa2|\x10" +
	"Gk\x9b*&\x0f\x7f\xfe\xc8\xe9\x1f;\xce\x9f\xb5`" +
	"\x06\x16\x82y08\x85[\xc0\x9d\xc3\xaa;\x87Z\xe0" +
	"\x19\xe6\x92a\x18\xab\x82\x01\xae\xc0\x86+P\x0b>1" +
	"\xcc\x1d\xc3XV\x15\x16\xe0\xde\xc5\x86{\x17\xb5\xe0w" +
	"\xc3<0\x8cmWa\x13\xb9`\xab.X-x\x95" +
	"Y\x08\xae3\x06\x94\xaa(\x01\xee5\xb6E\x14\xec\x19" +
	"\xf8\x06cp&P\xc5\x04\xe0\xbe\xc5^&\x0a\xde4" +
	"\xf8{\x06/\xb3*\xca\x80{\x93m\x10\x057\x0c\xfe" +
	"\x81\xc1'\xad*&\x01\xf7}\xf6\xb9{\x8b\xd5\x82\x1f" +
	"\x0d\xf33c\xc8\xa3NOi\x91]\xa4r\x98\x08\xdf" +
	"\x06\xcb_\xf9\xe83\xff\xdb\x83w\xbf'\xdffX\x9f" +
	"\x01\xa6\x88\x1c|Xd\xc3\xa3N\x0f\xa6\x9e\xa7a\x02" +
	"At8\x9c5U$~L\x03^4X\xc6\xe3\xc8" +
	"\xebm\xc1\xc3F#\xb3\x84R\\\xb7C\xcd\xa3N," +
	"R\xadx$\xd3TD\xba\xcc\xb5$\xc2\xf4hZ\x04" +
	"L\x13y\x80\xf5\xc6\xb4\x83\x8d\xfd\xa5\xc5\xe2\xb7\x9f\xc8" +
	"4\xd6\xf28\xbd\xd3C\xbd\xafFz%\xa3\xd7S\xa2" +
	"\xc1\xb5\xe4b\xcf\xec\x11/N3\xec\x12\xa7-~\xa1" +
	"^\xf7xe\xdd\xdbT\x0f3\xf0\x18\x1f70\xcc\xed" +
	"\x18\x03g\x86\x06~\x19\x19\x98\x187\x10\xc9$\x89\xd3" +
	"(\xd4\x82_\x8du\x9b\xeb\xb6\xe0\x87\xd9\x0e\xa2\x95\x0d" +
	"K<\xd4F\xb3:fc-\x93=-\xd41.\xbc" +
	"\xa1\x8b\x0d;\xaf\xb7c\xc5U[N\xf7:\x0d\xbe#" +
	"\xb8\x12\xda\xf8\xe8\xca8->\x94\x10\x0d#*\xd4\"" +
	"\xdfl\xf2Tj\xae\xba\"\x8a\x9b\xb1h\x9c1\xf6R" +
	"\x1eks\x0e\xc5c\xadD\xa7\xc9C\xc5C^H\xf3" +
	"\xb3<T\xaa\x97\x98\x08\x8b\x89j#\x16\x1b\xfe\xf08" +
	"G\xed\x89\x08'\x09\x9e\x85bkN\x12\xf2\x8e\x1c\xbc" +
	"<\x86\xaa\x8c\xae%\x01\x15B\x9e\x84{^x\xad#" +
	"\xc9\x0a\x1b\xe6\xe2\xef\xda\xb7\xdf\x01a?\x09\xf7\xce\xcb" +
	"45\xd0\x9cm\x1e\x83D\xe8,\x8e\xd4\xf3(f+" +
	"2\xaf,3\xfd\x88\xdd\xb8\xf7\xe8\xdd\xe8f2\x11\xba" +
	"-z\x8a\x0f;\xf3~\xbc\x16\x16;Bdd\x97\xed" +
	"K\x0e\xe1\x9f\x00\x00\x00\xff\xffS\x95\xa3\xd3"

func init() {
	schemas.Register(schema_f8151d76c79d7b95,
		0xcd2ea85dab4af771,
		0xd618c87c1da62651,
		0xe6c2ada3d6363f58)
}

var x_f8151d76c79d7b95 = []byte{
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	126, 16, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	30, 32, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	102, 20, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	126, 16, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	30, 32, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	102, 20, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
}
