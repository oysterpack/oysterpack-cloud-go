// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type NATSServerConfig struct{ capnp.Struct }

// NATSServerConfig_TypeID is the unique identifier for the type NATSServerConfig.
const NATSServerConfig_TypeID = 0xe6c2ada3d6363f58

func NewNATSServerConfig(s *capnp.Segment) (NATSServerConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return NATSServerConfig{st}, err
}

func NewRootNATSServerConfig(s *capnp.Segment) (NATSServerConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return NATSServerConfig{st}, err
}

func ReadRootNATSServerConfig(msg *capnp.Message) (NATSServerConfig, error) {
	root, err := msg.RootPtr()
	return NATSServerConfig{root.Struct()}, err
}

func (s NATSServerConfig) String() string {
	str, _ := text.Marshal(0xe6c2ada3d6363f58, s.Struct)
	return str
}

func (s NATSServerConfig) ClusterName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NATSServerConfig) HasClusterName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) ClusterNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NATSServerConfig) SetClusterName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NATSServerConfig) Server() (NATSServerConfig_HostPort, error) {
	p, err := s.Struct.Ptr(1)
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	ss, err := p.StructDefault(x_f8151d76c79d7b95[0:40])
	return NATSServerConfig_HostPort{Struct: ss}, err
}

func (s NATSServerConfig) HasServer() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) SetServer(v NATSServerConfig_HostPort) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewServer sets the server field to a newly
// allocated NATSServerConfig_HostPort struct, preferring placement in s's segment.
func (s NATSServerConfig) NewServer() (NATSServerConfig_HostPort, error) {
	ss, err := NewNATSServerConfig_HostPort(s.Struct.Segment())
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s NATSServerConfig) Monitor() (NATSServerConfig_HostPort, error) {
	p, err := s.Struct.Ptr(2)
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	ss, err := p.StructDefault(x_f8151d76c79d7b95[40:80])
	return NATSServerConfig_HostPort{Struct: ss}, err
}

func (s NATSServerConfig) HasMonitor() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) SetMonitor(v NATSServerConfig_HostPort) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewMonitor sets the monitor field to a newly
// allocated NATSServerConfig_HostPort struct, preferring placement in s's segment.
func (s NATSServerConfig) NewMonitor() (NATSServerConfig_HostPort, error) {
	ss, err := NewNATSServerConfig_HostPort(s.Struct.Segment())
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s NATSServerConfig) Cluster() (NATSServerConfig_HostPort, error) {
	p, err := s.Struct.Ptr(3)
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	ss, err := p.StructDefault(x_f8151d76c79d7b95[80:120])
	return NATSServerConfig_HostPort{Struct: ss}, err
}

func (s NATSServerConfig) HasCluster() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) SetCluster(v NATSServerConfig_HostPort) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewCluster sets the cluster field to a newly
// allocated NATSServerConfig_HostPort struct, preferring placement in s's segment.
func (s NATSServerConfig) NewCluster() (NATSServerConfig_HostPort, error) {
	ss, err := NewNATSServerConfig_HostPort(s.Struct.Segment())
	if err != nil {
		return NATSServerConfig_HostPort{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s NATSServerConfig) Routes() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.TextList{List: p.List()}, err
}

func (s NATSServerConfig) HasRoutes() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) SetRoutes(v capnp.TextList) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewRoutes sets the routes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s NATSServerConfig) NewRoutes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s NATSServerConfig) LogLevel() NATSServerConfig_NATSLogLevel {
	return NATSServerConfig_NATSLogLevel(s.Struct.Uint16(0))
}

func (s NATSServerConfig) SetLogLevel(v NATSServerConfig_NATSLogLevel) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s NATSServerConfig) MaxPayload() int32 {
	return int32(s.Struct.Uint32(4) ^ 100000)
}

func (s NATSServerConfig) SetMaxPayload(v int32) {
	s.Struct.SetUint32(4, uint32(v)^100000)
}

func (s NATSServerConfig) MaxConn() int32 {
	return int32(s.Struct.Uint32(8) ^ 1024)
}

func (s NATSServerConfig) SetMaxConn(v int32) {
	s.Struct.SetUint32(8, uint32(v)^1024)
}

func (s NATSServerConfig) MetricsExporterPort() int32 {
	return int32(s.Struct.Uint32(12) ^ 4444)
}

func (s NATSServerConfig) SetMetricsExporterPort(v int32) {
	s.Struct.SetUint32(12, uint32(v)^4444)
}

func (s NATSServerConfig) ServerX509KeyPair() (NATSServerConfig_X509KeyPair, error) {
	p, err := s.Struct.Ptr(5)
	return NATSServerConfig_X509KeyPair{Struct: p.Struct()}, err
}

func (s NATSServerConfig) HasServerX509KeyPair() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) SetServerX509KeyPair(v NATSServerConfig_X509KeyPair) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewServerX509KeyPair sets the serverX509KeyPair field to a newly
// allocated NATSServerConfig_X509KeyPair struct, preferring placement in s's segment.
func (s NATSServerConfig) NewServerX509KeyPair() (NATSServerConfig_X509KeyPair, error) {
	ss, err := NewNATSServerConfig_X509KeyPair(s.Struct.Segment())
	if err != nil {
		return NATSServerConfig_X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

func (s NATSServerConfig) ClusterX509KeyPair() (NATSServerConfig_X509KeyPair, error) {
	p, err := s.Struct.Ptr(6)
	return NATSServerConfig_X509KeyPair{Struct: p.Struct()}, err
}

func (s NATSServerConfig) HasClusterX509KeyPair() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig) SetClusterX509KeyPair(v NATSServerConfig_X509KeyPair) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewClusterX509KeyPair sets the clusterX509KeyPair field to a newly
// allocated NATSServerConfig_X509KeyPair struct, preferring placement in s's segment.
func (s NATSServerConfig) NewClusterX509KeyPair() (NATSServerConfig_X509KeyPair, error) {
	ss, err := NewNATSServerConfig_X509KeyPair(s.Struct.Segment())
	if err != nil {
		return NATSServerConfig_X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

// NATSServerConfig_List is a list of NATSServerConfig.
type NATSServerConfig_List struct{ capnp.List }

// NewNATSServerConfig creates a new list of NATSServerConfig.
func NewNATSServerConfig_List(s *capnp.Segment, sz int32) (NATSServerConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7}, sz)
	return NATSServerConfig_List{l}, err
}

func (s NATSServerConfig_List) At(i int) NATSServerConfig { return NATSServerConfig{s.List.Struct(i)} }

func (s NATSServerConfig_List) Set(i int, v NATSServerConfig) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s NATSServerConfig_List) String() string {
	str, _ := text.MarshalList(0xe6c2ada3d6363f58, s.List)
	return str
}

// NATSServerConfig_Promise is a wrapper for a NATSServerConfig promised by a client call.
type NATSServerConfig_Promise struct{ *capnp.Pipeline }

func (p NATSServerConfig_Promise) Struct() (NATSServerConfig, error) {
	s, err := p.Pipeline.Struct()
	return NATSServerConfig{s}, err
}

func (p NATSServerConfig_Promise) Server() NATSServerConfig_HostPort_Promise {
	return NATSServerConfig_HostPort_Promise{Pipeline: p.Pipeline.GetPipelineDefault(1, x_f8151d76c79d7b95[120:160])}
}

func (p NATSServerConfig_Promise) Monitor() NATSServerConfig_HostPort_Promise {
	return NATSServerConfig_HostPort_Promise{Pipeline: p.Pipeline.GetPipelineDefault(2, x_f8151d76c79d7b95[160:200])}
}

func (p NATSServerConfig_Promise) Cluster() NATSServerConfig_HostPort_Promise {
	return NATSServerConfig_HostPort_Promise{Pipeline: p.Pipeline.GetPipelineDefault(3, x_f8151d76c79d7b95[200:240])}
}

func (p NATSServerConfig_Promise) ServerX509KeyPair() NATSServerConfig_X509KeyPair_Promise {
	return NATSServerConfig_X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(5)}
}

func (p NATSServerConfig_Promise) ClusterX509KeyPair() NATSServerConfig_X509KeyPair_Promise {
	return NATSServerConfig_X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(6)}
}

type NATSServerConfig_HostPort struct{ capnp.Struct }

// NATSServerConfig_HostPort_TypeID is the unique identifier for the type NATSServerConfig_HostPort.
const NATSServerConfig_HostPort_TypeID = 0xd618c87c1da62651

func NewNATSServerConfig_HostPort(s *capnp.Segment) (NATSServerConfig_HostPort, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NATSServerConfig_HostPort{st}, err
}

func NewRootNATSServerConfig_HostPort(s *capnp.Segment) (NATSServerConfig_HostPort, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NATSServerConfig_HostPort{st}, err
}

func ReadRootNATSServerConfig_HostPort(msg *capnp.Message) (NATSServerConfig_HostPort, error) {
	root, err := msg.RootPtr()
	return NATSServerConfig_HostPort{root.Struct()}, err
}

func (s NATSServerConfig_HostPort) String() string {
	str, _ := text.Marshal(0xd618c87c1da62651, s.Struct)
	return str
}

func (s NATSServerConfig_HostPort) Host() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NATSServerConfig_HostPort) HasHost() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig_HostPort) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NATSServerConfig_HostPort) SetHost(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NATSServerConfig_HostPort) Port() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s NATSServerConfig_HostPort) SetPort(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// NATSServerConfig_HostPort_List is a list of NATSServerConfig_HostPort.
type NATSServerConfig_HostPort_List struct{ capnp.List }

// NewNATSServerConfig_HostPort creates a new list of NATSServerConfig_HostPort.
func NewNATSServerConfig_HostPort_List(s *capnp.Segment, sz int32) (NATSServerConfig_HostPort_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return NATSServerConfig_HostPort_List{l}, err
}

func (s NATSServerConfig_HostPort_List) At(i int) NATSServerConfig_HostPort {
	return NATSServerConfig_HostPort{s.List.Struct(i)}
}

func (s NATSServerConfig_HostPort_List) Set(i int, v NATSServerConfig_HostPort) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s NATSServerConfig_HostPort_List) String() string {
	str, _ := text.MarshalList(0xd618c87c1da62651, s.List)
	return str
}

// NATSServerConfig_HostPort_Promise is a wrapper for a NATSServerConfig_HostPort promised by a client call.
type NATSServerConfig_HostPort_Promise struct{ *capnp.Pipeline }

func (p NATSServerConfig_HostPort_Promise) Struct() (NATSServerConfig_HostPort, error) {
	s, err := p.Pipeline.Struct()
	return NATSServerConfig_HostPort{s}, err
}

type NATSServerConfig_NATSLogLevel uint16

// NATSServerConfig_NATSLogLevel_TypeID is the unique identifier for the type NATSServerConfig_NATSLogLevel.
const NATSServerConfig_NATSLogLevel_TypeID = 0xcd2ea85dab4af771

// Values of NATSServerConfig_NATSLogLevel.
const (
	NATSServerConfig_NATSLogLevel_nolog NATSServerConfig_NATSLogLevel = 0
	NATSServerConfig_NATSLogLevel_debug NATSServerConfig_NATSLogLevel = 1
	NATSServerConfig_NATSLogLevel_trace NATSServerConfig_NATSLogLevel = 2
)

// String returns the enum's constant name.
func (c NATSServerConfig_NATSLogLevel) String() string {
	switch c {
	case NATSServerConfig_NATSLogLevel_nolog:
		return "nolog"
	case NATSServerConfig_NATSLogLevel_debug:
		return "debug"
	case NATSServerConfig_NATSLogLevel_trace:
		return "trace"

	default:
		return ""
	}
}

// NATSServerConfig_NATSLogLevelFromString returns the enum value with a name,
// or the zero value if there's no such value.
func NATSServerConfig_NATSLogLevelFromString(c string) NATSServerConfig_NATSLogLevel {
	switch c {
	case "nolog":
		return NATSServerConfig_NATSLogLevel_nolog
	case "debug":
		return NATSServerConfig_NATSLogLevel_debug
	case "trace":
		return NATSServerConfig_NATSLogLevel_trace

	default:
		return 0
	}
}

type NATSServerConfig_NATSLogLevel_List struct{ capnp.List }

func NewNATSServerConfig_NATSLogLevel_List(s *capnp.Segment, sz int32) (NATSServerConfig_NATSLogLevel_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return NATSServerConfig_NATSLogLevel_List{l.List}, err
}

func (l NATSServerConfig_NATSLogLevel_List) At(i int) NATSServerConfig_NATSLogLevel {
	ul := capnp.UInt16List{List: l.List}
	return NATSServerConfig_NATSLogLevel(ul.At(i))
}

func (l NATSServerConfig_NATSLogLevel_List) Set(i int, v NATSServerConfig_NATSLogLevel) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type NATSServerConfig_X509KeyPair struct{ capnp.Struct }

// NATSServerConfig_X509KeyPair_TypeID is the unique identifier for the type NATSServerConfig_X509KeyPair.
const NATSServerConfig_X509KeyPair_TypeID = 0x8ab1c24f4ecb6266

func NewNATSServerConfig_X509KeyPair(s *capnp.Segment) (NATSServerConfig_X509KeyPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NATSServerConfig_X509KeyPair{st}, err
}

func NewRootNATSServerConfig_X509KeyPair(s *capnp.Segment) (NATSServerConfig_X509KeyPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NATSServerConfig_X509KeyPair{st}, err
}

func ReadRootNATSServerConfig_X509KeyPair(msg *capnp.Message) (NATSServerConfig_X509KeyPair, error) {
	root, err := msg.RootPtr()
	return NATSServerConfig_X509KeyPair{root.Struct()}, err
}

func (s NATSServerConfig_X509KeyPair) String() string {
	str, _ := text.Marshal(0x8ab1c24f4ecb6266, s.Struct)
	return str
}

func (s NATSServerConfig_X509KeyPair) CertPEMBlock() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s NATSServerConfig_X509KeyPair) HasCertPEMBlock() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig_X509KeyPair) SetCertPEMBlock(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s NATSServerConfig_X509KeyPair) KeyPEMBlock() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s NATSServerConfig_X509KeyPair) HasKeyPEMBlock() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NATSServerConfig_X509KeyPair) SetKeyPEMBlock(v []byte) error {
	return s.Struct.SetData(1, v)
}

// NATSServerConfig_X509KeyPair_List is a list of NATSServerConfig_X509KeyPair.
type NATSServerConfig_X509KeyPair_List struct{ capnp.List }

// NewNATSServerConfig_X509KeyPair creates a new list of NATSServerConfig_X509KeyPair.
func NewNATSServerConfig_X509KeyPair_List(s *capnp.Segment, sz int32) (NATSServerConfig_X509KeyPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NATSServerConfig_X509KeyPair_List{l}, err
}

func (s NATSServerConfig_X509KeyPair_List) At(i int) NATSServerConfig_X509KeyPair {
	return NATSServerConfig_X509KeyPair{s.List.Struct(i)}
}

func (s NATSServerConfig_X509KeyPair_List) Set(i int, v NATSServerConfig_X509KeyPair) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s NATSServerConfig_X509KeyPair_List) String() string {
	str, _ := text.MarshalList(0x8ab1c24f4ecb6266, s.List)
	return str
}

// NATSServerConfig_X509KeyPair_Promise is a wrapper for a NATSServerConfig_X509KeyPair promised by a client call.
type NATSServerConfig_X509KeyPair_Promise struct{ *capnp.Pipeline }

func (p NATSServerConfig_X509KeyPair_Promise) Struct() (NATSServerConfig_X509KeyPair, error) {
	s, err := p.Pipeline.Struct()
	return NATSServerConfig_X509KeyPair{s}, err
}

const schema_f8151d76c79d7b95 = "x\xda\x94TAh\x1cU\x18\xfe\xbf\xf7f\xb3mI" +
	"\x9a\x0co\x03U\xac\xfb\x94*mhB\xd2X\xb5E" +
	"H\x9bRhklw\x9c\x1cR\xa9\x96\xc9\xec\xdb\xdd" +
	"iw\xe7\xa53o\xd3\x06\xc5zQ\xb4\xe8\xa5*h" +
	"\xa1(\x0a\"\x8a`\xc5\x83\x96z\xb0X,Ho\xd2" +
	"CO\x9e\x84\x1e<\xebm\xe4\xcd\xee&\x8b\xa4\x95\x92" +
	"C\x96\xff{\xf3\x7f\xdf\xff\x7f\xdf{\x93\x82\xedcS" +
	"\x852'\xf2\xb6\x15\x06\xb2\xda\xe2oG\x8f]\xbfr" +
	"\x81\xdc1d\x0b3O\xdf\xfe\xfc\x9b\xeb\x7fR\x81\x15" +
	"\x89\xa6\xdb\xf8\x0e\xe2=\x14\x89\xc4;8K\xc8\xce\xfc" +
	"}\xe4\xeb\x97\xbf\x9c\xb8E\xee\x18[;L\x98\xfe\x0b" +
	"W!\xf2\x8f\x04\xd81B\xe6=\xf9\xc5\xd6\xd7nn" +
	"\xb9M\xde\x18\xfa\xfb\xdaf\xd3\xa3\xec\x12\xc4x~z" +
	"\x07\xb3}Wq\xef!\xb0\xec\xc3W/\xff\xba\xbcu" +
	"\xf4\x1f*\x14\xed\xe97\xd9\x8b\x10\x1f\xb3g\x88\xa6o" +
	"0\xcd\xe8\xd9,\x0eLz2UIaY%'C" +
	"\x1d\xd7\xa2\xfaD\x18,\xc5K{\x8f\xee\x9f\xf7}\x95" +
	",\xab\xe4@\xa7\xbc\xb0{r\xcf\xf3\xaa\xbcR\x09\xa2" +
	"\xa4\x02x\x1b\xb8C\xe4\x80\xc8\xddq\x8a\xc8\xdb\xce\xe1" +
	"=\xc5\xe0\x02%\xd8\xe2\xd4\"\x917\xc9\xe1=\xc7\x90" +
	"\x85*1\x95\x83/\xcc\xd2pS\x87\xa71D\x0cC" +
	"\x84\xec\xb4Z\xb1\xd5&\x15\xfb\xab\x0f\xa0\xc9\x16\xe6\xf4" +
	"L}N-\xab\xa6\x155\x08F\xe4n\xddE\x04\xb8" +
	"\xa3\xf6\x1fs\x87v\x11\x95c\xdd\xd4\xf5rU-\xb6" +
	"\xebe\x93\x04\xa1z\x10\x9aC:5\x15\xcd\x13\xf3\x9f" +
	"\xb9\xc7\xac\xf3\x1c\xde$Co\xec\xf1\xb1\xb5]\x0c7" +
	"tj0H\x0c\x83\x84\xe1%\x9d\x188\xc4\xe0\xf4\xcd" +
	"\xe8\xfc\x1f9\xea\xde \xfaB\xe0\xbaG\xfa\xb2\xe3\x9e" +
	"\xeaK\x9d\xbb\x98u\x84&\x86\x88\xb2\xcen\xeas4" +
	"l\x97\x93u\xec[\xa9P1\x88\x12ogo\x08\xf1" +
	"\x04\x16\xc5\x0e\x94\xfd\x0a8\xfc\x13\xe89\x08\x88\xe3\xd8" +
	"+\x8e\xa3\xec\xbfm\x91\x0f,\xc2X\x09\x0c\x10\x971" +
	"+.\xa3\xec\xffn\x91?,\xc2y\x09\x1c\x10w1" +
	"+\xee\xa2\xecoc\x1c\xfe$cp\x1d\xa7\x04\x87H" +
	"\xeca{\xc5\x1eV\xf6?\xb2\xc8\xf7\x8c\x01\x85\x12\x0a" +
	"\x80\xb8\xc2\x8e\x10\xf9\xdf\xda\xf25\xfb\xc1\x00J\x18\x00" +
	"\xc4\x8f\xec%\"\xff\x07[\xff\xc5\xd6\x8b\xac\x84\" " +
	"~f\xb3D\xfe5[\xbfi\xeb\x1bx\x09\x1b\x00q" +
	"\x83}&n\xb1\xb2\xefp\x0e\x7f\x843\xb8\x1b\x0b%" +
	"l$\x12C\xfc\xa2\x18\xe5e\x7f\x9fE\xe6,\xb2i" +
	"\xa0\x84MD\xe20\xbf$<^\xf6\xdf\xb0\xc8\xbb\xdc" +
	"&\xb5\xd9N\x8dJ\x8eR1h)\xcf\x01\xcb^y" +
	"\xff\x13\xef\xa7\xdb\x17n\x90\xe70\xec\xdf\x02\x0c\x12\xb9" +
	"\xb8\x98\xefW\x86\xcd6\xecy\x19\x07-(\xa2\x9e\xdb" +
	"3in\xe1:\x0dd\xde`\x0a\x8f#\x9bo(\x19" +
	"T\xab\x09Wi*M#02lF*6\xa9\x0c" +
	"u\x1c\xab\xd0\x14\xa5\xd1D\x18Y\xb3\x9f\x80\x11\xa2\x0a" +
	"\xc0_\x1fq1{~r\"\xff;\xdf\xd2qd\xf4" +
	"z|\xdb\xbb|_\xad\xf1\x15,_;UUi\xb4" +
	"T\xe7l0e>M\xb7K\x14\xd7\xe5\xa1\xf9\xf9\x8a" +
	"\x1c\xde_9\x9c\xdeK\xc0\xa3\xb2_@wo\xeb\x08" +
	"\xd8\xd9\x15pgM\xc0@\xbf\x80P\xb7ZQ\x1c\x06" +
	"F\xc9\xb3\x91iH\xd3P\xb2\xb7\xdb\xceju\x95\xab" +
	"{\xca\xa8\x95\xfad\xcc$\xbamT\xba\x8e\x8aJW" +
	"\xc5\xac\x93\xcd7\xa2T\xa6\x0d=\xd2nV\xe5\xa2\x92" +
	"\xa92V\xc7\x92\x8e\xe2\xfcG\xaaT\xd5\x92\xaatB" +
	"\x1e\xae\xc9X\x1b\x99.\xa90\xaaE\xaa\xba\xd3\xca\x8b" +
	"ed\xec\x1c\xa9\x8cL\xaa\x9a5\x19\xa42\x909\xb5" +
	"\x1c\x97A\x9a\xb6[v\x85\xb9\xa3\xc6\x92E\x16\xef\x8d" +
	"\xb3\xda\x9e\x88\xb0\x99P\xe1\xc8S\xb3\x99\x905u\xe7" +
	")\xb3\xd0\xf0\xda='`\x98\x90\xb5\x82s\x95`\xa5" +
	"\xa9\x89\x07U\xfb\x92\x9cq>}\x0b\x84\xf3\xad\xe0\xdc" +
	"\x01\x1d\xc7\xb6\xf4\x98c_\x97\x962I\x14\xa6\x07\x91" +
	"{\xab\x92JQ'\xe6>\xd9\xb8z\xffl,%\xba" +
	"\xa5LC\xb5S\xd9\xed,\x97\xa3\x99 \xcf\x08\x91\xa5" +
	"\x9drN\xb8\x84\xac\x13\xfa\x85\xdd\xe8<5A\x84\xf5" +
	"\x02\xf1H\xf7\x0a\xdd\xc9r\x9e\x9aNX7\xf8\xe3\x9d" +
	"\x06r\x9e\xcf\xf9\xb9\xdf\xab\x8f[\xee\xf7\xea\xed\\@" +
	"\xf71\x0bxt\xbf;\xf60V)\xb8\xec\xf4\xeeQ" +
	"\xf4\xdc\xb8\x17\xd5\xbf\x01\x00\x00\xff\xff<\x07%\xfa"

func init() {
	schemas.Register(schema_f8151d76c79d7b95,
		0x8ab1c24f4ecb6266,
		0xcd2ea85dab4af771,
		0xd618c87c1da62651,
		0xe6c2ada3d6363f58)
}

var x_f8151d76c79d7b95 = []byte{
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	126, 16, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	30, 32, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	102, 20, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	126, 16, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	30, 32, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	102, 20, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 66, 0, 0, 0,
	48, 46, 48, 46, 48, 46, 48, 0,
}
