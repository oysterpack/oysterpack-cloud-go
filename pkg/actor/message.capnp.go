// Code generated by capnpc-go. DO NOT EDIT.

package actor

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Message struct{ capnp.Struct }

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xf38cccd618967ecd

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xf38cccd618967ecd, s.Struct)
	return str
}

func (s Message) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Message) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Message) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Message) Created() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Message) SetCreated(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Message) Sender() (Message_Sender, error) {
	p, err := s.Struct.Ptr(1)
	return Message_Sender{Struct: p.Struct()}, err
}

func (s Message) HasSender() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Message) SetSender(v Message_Sender) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSender sets the sender field to a newly
// allocated Message_Sender struct, preferring placement in s's segment.
func (s Message) NewSender() (Message_Sender, error) {
	ss, err := NewMessage_Sender(s.Struct.Segment())
	if err != nil {
		return Message_Sender{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Type() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Message) HasType() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Message) TypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Message) SetType(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Message) Compression() Message_Compression {
	return Message_Compression(s.Struct.Uint16(8) ^ 1)
}

func (s Message) SetCompression(v Message_Compression) {
	s.Struct.SetUint16(8, uint16(v)^1)
}

func (s Message) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Message) HasData() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Message) SetData(v []byte) error {
	return s.Struct.SetData(3, v)
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xf38cccd618967ecd, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

func (p Message_Promise) Sender() Message_Sender_Promise {
	return Message_Sender_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

// refers to the actor that sent the message
type Message_Sender struct{ capnp.Struct }

// Message_Sender_TypeID is the unique identifier for the type Message_Sender.
const Message_Sender_TypeID = 0xf113452111fb2455

func NewMessage_Sender(s *capnp.Segment) (Message_Sender, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Message_Sender{st}, err
}

func NewRootMessage_Sender(s *capnp.Segment) (Message_Sender, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Message_Sender{st}, err
}

func ReadRootMessage_Sender(msg *capnp.Message) (Message_Sender, error) {
	root, err := msg.RootPtr()
	return Message_Sender{root.Struct()}, err
}

func (s Message_Sender) String() string {
	str, _ := text.Marshal(0xf113452111fb2455, s.Struct)
	return str
}

func (s Message_Sender) System() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Message_Sender) HasSystem() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message_Sender) SystemBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Message_Sender) SetSystem(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Message_Sender) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Message_Sender) HasId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Message_Sender) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Message_Sender) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Message_Sender) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Message_Sender) HasPath() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Message_Sender) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Message_Sender) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Message_Sender_List is a list of Message_Sender.
type Message_Sender_List struct{ capnp.List }

// NewMessage_Sender creates a new list of Message_Sender.
func NewMessage_Sender_List(s *capnp.Segment, sz int32) (Message_Sender_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Message_Sender_List{l}, err
}

func (s Message_Sender_List) At(i int) Message_Sender { return Message_Sender{s.List.Struct(i)} }

func (s Message_Sender_List) Set(i int, v Message_Sender) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_Sender_List) String() string {
	str, _ := text.MarshalList(0xf113452111fb2455, s.List)
	return str
}

// Message_Sender_Promise is a wrapper for a Message_Sender promised by a client call.
type Message_Sender_Promise struct{ *capnp.Pipeline }

func (p Message_Sender_Promise) Struct() (Message_Sender, error) {
	s, err := p.Pipeline.Struct()
	return Message_Sender{s}, err
}

type Message_Compression uint16

// Message_Compression_TypeID is the unique identifier for the type Message_Compression.
const Message_Compression_TypeID = 0x8865b0351c00948c

// Values of Message_Compression.
const (
	Message_Compression_none Message_Compression = 0
	Message_Compression_zlib Message_Compression = 1
	Message_Compression_gzip Message_Compression = 2
	Message_Compression_lz4  Message_Compression = 3
)

// String returns the enum's constant name.
func (c Message_Compression) String() string {
	switch c {
	case Message_Compression_none:
		return "none"
	case Message_Compression_zlib:
		return "zlib"
	case Message_Compression_gzip:
		return "gzip"
	case Message_Compression_lz4:
		return "lz4"

	default:
		return ""
	}
}

// Message_CompressionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Message_CompressionFromString(c string) Message_Compression {
	switch c {
	case "none":
		return Message_Compression_none
	case "zlib":
		return Message_Compression_zlib
	case "gzip":
		return Message_Compression_gzip
	case "lz4":
		return Message_Compression_lz4

	default:
		return 0
	}
}

type Message_Compression_List struct{ capnp.List }

func NewMessage_Compression_List(s *capnp.Segment, sz int32) (Message_Compression_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Message_Compression_List{l.List}, err
}

func (l Message_Compression_List) At(i int) Message_Compression {
	ul := capnp.UInt16List{List: l.List}
	return Message_Compression(ul.At(i))
}

func (l Message_Compression_List) Set(i int, v Message_Compression) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_87fc44aa3255d2ae = "x\xda|\x93O\x88\x1cU\x10\xc6\xeb{\xdd\xed*n" +
	"\xb6\xb7\xed!\xac!\xd0\xb5\xb2A]\xb2\x925\x8a:" +
	"\x97\x8d\xc6=\x18\x10\xd2\x8e\x83\x9a\x83\xf0f\xfa\xedN" +
	"\xcbLwo\xbf7\xe8\xecAOQ\x91\x9c4\x889" +
	"\x04\x0dx\xf2\xa0\xe2\xcd\x83\xe0E$\x10A<\x04\x84" +
	"\\\xbcz\x13O\x12\xa1\xe5\xf5\xfcKd\xb3\xa7\xa6\xab" +
	"\xbe\xaa\xaf\xfaW\xd5\xa7\xde\xc7\x19\xb1\xe9\xfd,\x88b" +
	"\xf6\xee\xbb}\xe9\xf2\xf1\xa7\xbfU\x1f\x06GE\xf5\xcb" +
	"\xbb\x9f\xae\xdc\xbcq\xe9o\"\x9c~\x09\x0f!|\x03" +
	"\x0bDa\x1b\xbb\x84\xaa\xbdv;X\xdd\x0e\xff\xa2\xe0" +
	"(\xe6J\xcf\xb1\x8a\x11\xfe\x0c/b!\xbc\x88(\xfc" +
	"\x1e\xdf\xd0\x1d\x82x\x09\xa2\xfa\xfa\xb7\xf6\x93_\xbd\xf8" +
	"\xef\x07\xe4\xb9V\xfe\xbb\xf8.\xfcC<Jt\xfa\x1f" +
	"\xf1\x1a\xe8\xd9j\xa0\xb4\x96\xbb\xea\x09\xa7+\x8b\xach" +
	"\xbe<y=\x9b\x0f\x8aRi\x9d\xe6\xc8\xce\x03\xf12" +
	"\x04Q\xf0\xf8:\x11\x10\xac\xda\x87\x08\x1e\xb6\x0f'\x08" +
	"\x1e!\xf2\xb3<S\xfe~?\xed\xf8\xbb\xfbi\xb1\xd0" +
	"\xdf\x7fj\xd6Y\xdc\xdd\xb9\xa5\xfc,Q\xa5m\xeaB" +
	"To~\xf2y\xfc\xc3\xcd\x8f~\xa2\xd8\x15x~\x0d" +
	"X$\xda\xc4+\xa8J\xb5\xa3J\xcd\xc6\xcd\xd9\xf4\x14" +
	"\xcb\xae\xc9K6=iX\xab\xcc\xd4\xb1\xb1\x03\x14Q" +
	"\xbc\xe8\xb8D.\x88\x82\xedf\xb0\x1d\xc5=\x07\xb1\x11" +
	"\x08\x80\x06lt\xefX\xb0\x17\xc5\x97\x1d\xc4_\x08\x04" +
	"B4\xea\xef\xb9\xba\x1e\\\x8d\xe2\x1f\x1d\xc4\xb7\x04\xb6" +
	"\xf4H\x1b58`\xaaF=U\x80\xb7\xaa\xf1\x14z" +
	"D\xbe\x95\x12a\x91\x04\x16\x09N\x9a\x1cRwnR" +
	"\x97&\x16\xdf\xa4\xc4/\xa4\xe9\x1dRtaRTH" +
	"rL\x8f\x08K\x84\xf3\xce\xb8|\x890\xc3\x8b)\xde" +
	"\xa8~\x8f\xef\xc7\x9d\x07\xf3@sve^g\xab\xa5" +
	",\xfaj\xba\\ZH\xf3,^\x99\xa1\xbbr,\xb8" +
	"2\xc6qC`J\xee\xfa\x0b\xc1\xf5\xa8\xb5\x02\x07\xad" +
	"5Xv\xa8\xd9\x85\xabh\x12\xb5\x8e\xdb\xf8c6\xee" +
	"\x88\x06\x1c\xa2\xf0\x04\xd6\xc3\x13\x88Z\xaf\xdbLb3" +
	"\xae\xdb\x80\x0b\x84\x12\x9dP!j}f3_\xda\x8c" +
	"\xe74\xe0\x11\x85\xd7\xb0\x1e^C\xd4\xfa\xd5fnA" +
	"\xdc\x83\xe7\xca\x04\xcd\xc7\xd50K\xf7\x86\x8a\x07\x18C" +
	"\xe0\x14\xc9|\x19\xefuK%\x8d:\xa8\xc3\x99\xc9}" +
	"\xad;S~\xfc`\xadN\xf3\x8cM:P\xda\xc8A" +
	"\xc1\x1b,5Kng\xe9;u\xf4d}n\xd9p" +
	"\xd0Q%\xe7;\xacU7\xcf\x12\xcd\xaa/\x0b\xad\x12" +
	"\xd6i\xd6U|NfCY\x8ex\xf3$o>\xf7" +
	"\xcc)\x9f\xdb\xaf\x9e%\x82G\x02\x1eaK\xd7\xf0\xb1" +
	"<\xdf\x0e\x01\xcb\x04\xdf\x8c\x0au\xf8\xbf0\x9d\xd5M" +
	"\xa4\x91l\xf5\xbc\xc1\xbd\xfcm69\x17\xb2\xd4\xaa\x9e" +
	"/\x91\x06r\x8e\xa1\xea\xde\xb5\xe6{\x1b\\\xf8\xbfA" +
	"w\xf6\xf3g\xbc\xc1\x89\xda\x91\xc3\xbe\xe1T\xf3~\xdf" +
	"I;D\xf0\xa7GE\xf0|\x10|[v\x80\x03O" +
	"\x1c\x9as\x07\xa7v\xd8\xe0\xa1\x1e\xca~\x7f\xc4\x92\xeb" +
	"\xfb\xe5\xc1\xd6X@\x84#$p\x84\xf0_\x00\x00\x00" +
	"\xff\xffR4b\xaa"

func init() {
	schemas.Register(schema_87fc44aa3255d2ae,
		0x8865b0351c00948c,
		0xf113452111fb2455,
		0xf38cccd618967ecd)
}
