// Code generated by capnpc-go. DO NOT EDIT.

package msgs

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Envelope struct{ capnp.Struct }

// Envelope_TypeID is the unique identifier for the type Envelope.
const Envelope_TypeID = 0xf38cccd618967ecd

func NewEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Envelope{st}, err
}

func NewRootEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Envelope{st}, err
}

func ReadRootEnvelope(msg *capnp.Message) (Envelope, error) {
	root, err := msg.RootPtr()
	return Envelope{root.Struct()}, err
}

func (s Envelope) String() string {
	str, _ := text.Marshal(0xf38cccd618967ecd, s.Struct)
	return str
}

func (s Envelope) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Envelope) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Envelope) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Envelope) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Envelope) Created() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Envelope) SetCreated(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Envelope) Address() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s Envelope) HasAddress() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Envelope) SetAddress(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s Envelope) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Envelope) ReplyTo() (Envelope_ReplyTo, error) {
	p, err := s.Struct.Ptr(2)
	return Envelope_ReplyTo{Struct: p.Struct()}, err
}

func (s Envelope) HasReplyTo() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Envelope) SetReplyTo(v Envelope_ReplyTo) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewReplyTo sets the replyTo field to a newly
// allocated Envelope_ReplyTo struct, preferring placement in s's segment.
func (s Envelope) NewReplyTo() (Envelope_ReplyTo, error) {
	ss, err := NewEnvelope_ReplyTo(s.Struct.Segment())
	if err != nil {
		return Envelope_ReplyTo{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Envelope) CorrelationId() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Envelope) HasCorrelationId() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Envelope) CorrelationIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Envelope) SetCorrelationId(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Envelope) MessageType() uint64 {
	return s.Struct.Uint64(8)
}

func (s Envelope) SetMessageType(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Envelope) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Envelope) HasMessage() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Envelope) SetMessage(v []byte) error {
	return s.Struct.SetData(4, v)
}

// Envelope_List is a list of Envelope.
type Envelope_List struct{ capnp.List }

// NewEnvelope creates a new list of Envelope.
func NewEnvelope_List(s *capnp.Segment, sz int32) (Envelope_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return Envelope_List{l}, err
}

func (s Envelope_List) At(i int) Envelope { return Envelope{s.List.Struct(i)} }

func (s Envelope_List) Set(i int, v Envelope) error { return s.List.SetStruct(i, v.Struct) }

func (s Envelope_List) String() string {
	str, _ := text.MarshalList(0xf38cccd618967ecd, s.List)
	return str
}

// Envelope_Promise is a wrapper for a Envelope promised by a client call.
type Envelope_Promise struct{ *capnp.Pipeline }

func (p Envelope_Promise) Struct() (Envelope, error) {
	s, err := p.Pipeline.Struct()
	return Envelope{s}, err
}

func (p Envelope_Promise) Address() Address_Promise {
	return Address_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Envelope_Promise) ReplyTo() Envelope_ReplyTo_Promise {
	return Envelope_ReplyTo_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Envelope_ReplyTo struct{ capnp.Struct }

// Envelope_ReplyTo_TypeID is the unique identifier for the type Envelope_ReplyTo.
const Envelope_ReplyTo_TypeID = 0xab748f26e2efa4c7

func NewEnvelope_ReplyTo(s *capnp.Segment) (Envelope_ReplyTo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Envelope_ReplyTo{st}, err
}

func NewRootEnvelope_ReplyTo(s *capnp.Segment) (Envelope_ReplyTo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Envelope_ReplyTo{st}, err
}

func ReadRootEnvelope_ReplyTo(msg *capnp.Message) (Envelope_ReplyTo, error) {
	root, err := msg.RootPtr()
	return Envelope_ReplyTo{root.Struct()}, err
}

func (s Envelope_ReplyTo) String() string {
	str, _ := text.Marshal(0xab748f26e2efa4c7, s.Struct)
	return str
}

func (s Envelope_ReplyTo) Address() (Address, error) {
	p, err := s.Struct.Ptr(0)
	return Address{Struct: p.Struct()}, err
}

func (s Envelope_ReplyTo) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Envelope_ReplyTo) SetAddress(v Address) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s Envelope_ReplyTo) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Envelope_ReplyTo) MessageType() uint64 {
	return s.Struct.Uint64(0)
}

func (s Envelope_ReplyTo) SetMessageType(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Envelope_ReplyTo_List is a list of Envelope_ReplyTo.
type Envelope_ReplyTo_List struct{ capnp.List }

// NewEnvelope_ReplyTo creates a new list of Envelope_ReplyTo.
func NewEnvelope_ReplyTo_List(s *capnp.Segment, sz int32) (Envelope_ReplyTo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Envelope_ReplyTo_List{l}, err
}

func (s Envelope_ReplyTo_List) At(i int) Envelope_ReplyTo { return Envelope_ReplyTo{s.List.Struct(i)} }

func (s Envelope_ReplyTo_List) Set(i int, v Envelope_ReplyTo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Envelope_ReplyTo_List) String() string {
	str, _ := text.MarshalList(0xab748f26e2efa4c7, s.List)
	return str
}

// Envelope_ReplyTo_Promise is a wrapper for a Envelope_ReplyTo promised by a client call.
type Envelope_ReplyTo_Promise struct{ *capnp.Pipeline }

func (p Envelope_ReplyTo_Promise) Struct() (Envelope_ReplyTo, error) {
	s, err := p.Pipeline.Struct()
	return Envelope_ReplyTo{s}, err
}

func (p Envelope_ReplyTo_Promise) Address() Address_Promise {
	return Address_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Address struct{ capnp.Struct }

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0x9fd358f04cb684bd

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.RootPtr()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0x9fd358f04cb684bd, s.Struct)
	return str
}

func (s Address) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Address) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Address) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Address) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Address) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Address) HasId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Address) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Address) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0x9fd358f04cb684bd, s.List)
	return str
}

// Address_Promise is a wrapper for a Address promised by a client call.
type Address_Promise struct{ *capnp.Pipeline }

func (p Address_Promise) Struct() (Address, error) {
	s, err := p.Pipeline.Struct()
	return Address{s}, err
}

type MessageProcessingError struct{ capnp.Struct }

// MessageProcessingError_TypeID is the unique identifier for the type MessageProcessingError.
const MessageProcessingError_TypeID = 0xa70dd5f5d238faaa

func NewMessageProcessingError(s *capnp.Segment) (MessageProcessingError, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return MessageProcessingError{st}, err
}

func NewRootMessageProcessingError(s *capnp.Segment) (MessageProcessingError, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return MessageProcessingError{st}, err
}

func ReadRootMessageProcessingError(msg *capnp.Message) (MessageProcessingError, error) {
	root, err := msg.RootPtr()
	return MessageProcessingError{root.Struct()}, err
}

func (s MessageProcessingError) String() string {
	str, _ := text.Marshal(0xa70dd5f5d238faaa, s.Struct)
	return str
}

func (s MessageProcessingError) ActorAddress() (Address, error) {
	p, err := s.Struct.Ptr(0)
	return Address{Struct: p.Struct()}, err
}

func (s MessageProcessingError) HasActorAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) SetActorAddress(v Address) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewActorAddress sets the actorAddress field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s MessageProcessingError) NewActorAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageProcessingError) MessageId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s MessageProcessingError) HasMessageId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) MessageIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s MessageProcessingError) SetMessageId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s MessageProcessingError) MessageType() uint64 {
	return s.Struct.Uint64(0)
}

func (s MessageProcessingError) SetMessageType(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s MessageProcessingError) ErrCode() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s MessageProcessingError) SetErrCode(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s MessageProcessingError) ErrMessage() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s MessageProcessingError) HasErrMessage() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) ErrMessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s MessageProcessingError) SetErrMessage(v string) error {
	return s.Struct.SetText(2, v)
}

// MessageProcessingError_List is a list of MessageProcessingError.
type MessageProcessingError_List struct{ capnp.List }

// NewMessageProcessingError creates a new list of MessageProcessingError.
func NewMessageProcessingError_List(s *capnp.Segment, sz int32) (MessageProcessingError_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return MessageProcessingError_List{l}, err
}

func (s MessageProcessingError_List) At(i int) MessageProcessingError {
	return MessageProcessingError{s.List.Struct(i)}
}

func (s MessageProcessingError_List) Set(i int, v MessageProcessingError) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MessageProcessingError_List) String() string {
	str, _ := text.MarshalList(0xa70dd5f5d238faaa, s.List)
	return str
}

// MessageProcessingError_Promise is a wrapper for a MessageProcessingError promised by a client call.
type MessageProcessingError_Promise struct{ *capnp.Pipeline }

func (p MessageProcessingError_Promise) Struct() (MessageProcessingError, error) {
	s, err := p.Pipeline.Struct()
	return MessageProcessingError{s}, err
}

func (p MessageProcessingError_Promise) ActorAddress() Address_Promise {
	return Address_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Started struct{ capnp.Struct }

// Started_TypeID is the unique identifier for the type Started.
const Started_TypeID = 0xf87ced6eabceba45

func NewStarted(s *capnp.Segment) (Started, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Started{st}, err
}

func NewRootStarted(s *capnp.Segment) (Started, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Started{st}, err
}

func ReadRootStarted(msg *capnp.Message) (Started, error) {
	root, err := msg.RootPtr()
	return Started{root.Struct()}, err
}

func (s Started) String() string {
	str, _ := text.Marshal(0xf87ced6eabceba45, s.Struct)
	return str
}

// Started_List is a list of Started.
type Started_List struct{ capnp.List }

// NewStarted creates a new list of Started.
func NewStarted_List(s *capnp.Segment, sz int32) (Started_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Started_List{l}, err
}

func (s Started_List) At(i int) Started { return Started{s.List.Struct(i)} }

func (s Started_List) Set(i int, v Started) error { return s.List.SetStruct(i, v.Struct) }

func (s Started_List) String() string {
	str, _ := text.MarshalList(0xf87ced6eabceba45, s.List)
	return str
}

// Started_Promise is a wrapper for a Started promised by a client call.
type Started_Promise struct{ *capnp.Pipeline }

func (p Started_Promise) Struct() (Started, error) {
	s, err := p.Pipeline.Struct()
	return Started{s}, err
}

type Stopping struct{ capnp.Struct }

// Stopping_TypeID is the unique identifier for the type Stopping.
const Stopping_TypeID = 0xd064305fa8416cb7

func NewStopping(s *capnp.Segment) (Stopping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopping{st}, err
}

func NewRootStopping(s *capnp.Segment) (Stopping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopping{st}, err
}

func ReadRootStopping(msg *capnp.Message) (Stopping, error) {
	root, err := msg.RootPtr()
	return Stopping{root.Struct()}, err
}

func (s Stopping) String() string {
	str, _ := text.Marshal(0xd064305fa8416cb7, s.Struct)
	return str
}

// Stopping_List is a list of Stopping.
type Stopping_List struct{ capnp.List }

// NewStopping creates a new list of Stopping.
func NewStopping_List(s *capnp.Segment, sz int32) (Stopping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopping_List{l}, err
}

func (s Stopping_List) At(i int) Stopping { return Stopping{s.List.Struct(i)} }

func (s Stopping_List) Set(i int, v Stopping) error { return s.List.SetStruct(i, v.Struct) }

func (s Stopping_List) String() string {
	str, _ := text.MarshalList(0xd064305fa8416cb7, s.List)
	return str
}

// Stopping_Promise is a wrapper for a Stopping promised by a client call.
type Stopping_Promise struct{ *capnp.Pipeline }

func (p Stopping_Promise) Struct() (Stopping, error) {
	s, err := p.Pipeline.Struct()
	return Stopping{s}, err
}

type Stopped struct{ capnp.Struct }

// Stopped_TypeID is the unique identifier for the type Stopped.
const Stopped_TypeID = 0x874f20540dfe792f

func NewStopped(s *capnp.Segment) (Stopped, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopped{st}, err
}

func NewRootStopped(s *capnp.Segment) (Stopped, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopped{st}, err
}

func ReadRootStopped(msg *capnp.Message) (Stopped, error) {
	root, err := msg.RootPtr()
	return Stopped{root.Struct()}, err
}

func (s Stopped) String() string {
	str, _ := text.Marshal(0x874f20540dfe792f, s.Struct)
	return str
}

// Stopped_List is a list of Stopped.
type Stopped_List struct{ capnp.List }

// NewStopped creates a new list of Stopped.
func NewStopped_List(s *capnp.Segment, sz int32) (Stopped_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopped_List{l}, err
}

func (s Stopped_List) At(i int) Stopped { return Stopped{s.List.Struct(i)} }

func (s Stopped_List) Set(i int, v Stopped) error { return s.List.SetStruct(i, v.Struct) }

func (s Stopped_List) String() string {
	str, _ := text.MarshalList(0x874f20540dfe792f, s.List)
	return str
}

// Stopped_Promise is a wrapper for a Stopped promised by a client call.
type Stopped_Promise struct{ *capnp.Pipeline }

func (p Stopped_Promise) Struct() (Stopped, error) {
	s, err := p.Pipeline.Struct()
	return Stopped{s}, err
}

type PingRequest struct{ capnp.Struct }

// PingRequest_TypeID is the unique identifier for the type PingRequest.
const PingRequest_TypeID = 0xa8084ffe960780bb

func NewPingRequest(s *capnp.Segment) (PingRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PingRequest{st}, err
}

func NewRootPingRequest(s *capnp.Segment) (PingRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PingRequest{st}, err
}

func ReadRootPingRequest(msg *capnp.Message) (PingRequest, error) {
	root, err := msg.RootPtr()
	return PingRequest{root.Struct()}, err
}

func (s PingRequest) String() string {
	str, _ := text.Marshal(0xa8084ffe960780bb, s.Struct)
	return str
}

// PingRequest_List is a list of PingRequest.
type PingRequest_List struct{ capnp.List }

// NewPingRequest creates a new list of PingRequest.
func NewPingRequest_List(s *capnp.Segment, sz int32) (PingRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PingRequest_List{l}, err
}

func (s PingRequest_List) At(i int) PingRequest { return PingRequest{s.List.Struct(i)} }

func (s PingRequest_List) Set(i int, v PingRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s PingRequest_List) String() string {
	str, _ := text.MarshalList(0xa8084ffe960780bb, s.List)
	return str
}

// PingRequest_Promise is a wrapper for a PingRequest promised by a client call.
type PingRequest_Promise struct{ *capnp.Pipeline }

func (p PingRequest_Promise) Struct() (PingRequest, error) {
	s, err := p.Pipeline.Struct()
	return PingRequest{s}, err
}

type PingResponse struct{ capnp.Struct }

// PingResponse_TypeID is the unique identifier for the type PingResponse.
const PingResponse_TypeID = 0xc8ea6e5ec7f91c46

func NewPingResponse(s *capnp.Segment) (PingResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PingResponse{st}, err
}

func NewRootPingResponse(s *capnp.Segment) (PingResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PingResponse{st}, err
}

func ReadRootPingResponse(msg *capnp.Message) (PingResponse, error) {
	root, err := msg.RootPtr()
	return PingResponse{root.Struct()}, err
}

func (s PingResponse) String() string {
	str, _ := text.Marshal(0xc8ea6e5ec7f91c46, s.Struct)
	return str
}

// PingResponse_List is a list of PingResponse.
type PingResponse_List struct{ capnp.List }

// NewPingResponse creates a new list of PingResponse.
func NewPingResponse_List(s *capnp.Segment, sz int32) (PingResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PingResponse_List{l}, err
}

func (s PingResponse_List) At(i int) PingResponse { return PingResponse{s.List.Struct(i)} }

func (s PingResponse_List) Set(i int, v PingResponse) error { return s.List.SetStruct(i, v.Struct) }

func (s PingResponse_List) String() string {
	str, _ := text.MarshalList(0xc8ea6e5ec7f91c46, s.List)
	return str
}

// PingResponse_Promise is a wrapper for a PingResponse promised by a client call.
type PingResponse_Promise struct{ *capnp.Pipeline }

func (p PingResponse_Promise) Struct() (PingResponse, error) {
	s, err := p.Pipeline.Struct()
	return PingResponse{s}, err
}

const schema_87fc44aa3255d2ae = "x\xda\x94U_h\x1cU\x17?\xe7\xcel6\xfd\xbe" +
	"\x84t\x98\x85/\x94|\xcc\x15\xa2XIb\xd2\"\xa6" +
	"Ei\xb3m\x85\x96J3\xdd\x04j\xd1\xcad\xe6&" +
	"{\xcb\xee\xcc\xf4\xdeY\x93h5\x0a-\x15Q\x8a\x0a" +
	"}\x10\xa5 \x82\xb5\x05\xf1\xa5\x8a\xd1\xbe\x14\xa4>\xa8" +
	"\x94\x8a\x15\xa5\xbe\x14\x0bZ(\xb6H\xc1\x8at\xe4\xce" +
	"\x9f\xdd\xd8l\x0a\xbe\xed\xde\xf3\xf7\xf7;\xbfsf\xf8" +
	"9\xb2\x99\x8c\x14\xbe\xd7\x01\xec\xd1BG\xfc\xe0\xfc\xed" +
	"\xee\x09\xba\xeb\x08\x18=\x18\x7fxar\xdd\xc9\xad\x7f" +
	"\x1d\x01\xbd\x08`\xdad\xd1|\x82\x14A\x8b\xcf\x1c\xfa" +
	"x\xe7\xf5=\xdf\x1e\xff\xa7S\x81(\xaf\x87\xc8\xa2\xf9" +
	"h\xf2k\x03\x99\x05\x8cO\xfe9z\xe1\xe6w\xdd\xef" +
	"\x83\xdd\x83d\x89\xb3V\x04X\x7f\x85\xacC\xf3\xa6\xf2" +
	"^\x7f\x83X\x08\x18\x7f\xf6b\xf1\xd8\xed]\x9d'\xda" +
	"\xd4\x7fG\xff\xd1\xfc@W\xf5\xcf\xbd\xf7\xdb\xe5\xfb\x8e" +
	"F\xa7\xc0\xeeE\x8c\xbf~\xe1X\xef\xc5\xaf^\xfd\x1d" +
	"\x0a\xa8\x12\x1d\xd6\x09\x9a\xaf'\x11\xaf\xe9\xaa\x83\xc7\xfa" +
	"n\x9d\xdb\xe7_\xfd\xb2M\xca\xff\x17.\x9bk\x0b*" +
	"\xe5'\xb5\xb1\x13O\x0f{\xe7\xdb8\x15\x0ag\xcd\xee" +
	"\xc4\xa9Y\xe9\x0e,\x05\xe5\xf6\xab~\xd6\xbc\xa1\xff\x0f" +
	"`\xfd-\xfd\xa8\x82\xb2m\xf1\x9bS\xfe\xb5\x83\x7f\xb4" +
	"I9\xd9\xb9h>\xd5Y\x84\x8dq\x9dI\xe9\xcc0" +
	"\x89C\xae\x13\xfa\xe1\xc6\xca\xa6(\x08C\xe6\x8d#." +
	"\xb3\x8dm\xf2<\xc1\xa4\x1cG\xb4;5\x1d@G\x00" +
	"c\xed\x03\xc6Z\xcb\xde\xa9\xa1\xbd\x87\xa0\x81XB\xf5" +
	":\xb9\xc6\x98\xb4\xec9\x0d\xedC\x04{B'\xaa\xda" +
	":\x92x\xdf\x9b\xc7\xed3\x17_\xf9\x02l\x9d\xe0X" +
	"\x09\xb1\x0b\xc0\xc0\xbd\xb1\xe3F\x81\xa0\xa1\x03ZT\x05" +
	"\xc0. \xd8\x05\xa8q\xef.Q;\xb2(\xee\x01`" +
	"\x1e\xd2lZ\xcb\x9a~<\xfd?.\x02\x97I\xc9\xfd" +
	"\x19k\x9b\x10\x81P\x18JM\x0c\xcf\xef7^\xb2\xec" +
	"\x8f4\xb4?_\x82\xe1\xd3\xdd\xc6\x19\xcb\xfeYC\xfb" +
	":A$%$\x88\xc6\xb5)\xe3\x86U\xe9E\x0d+" +
	"\xfdH\xd0\xd0\xb0\x84\x1a\x80y\x0f\x96\x01*}\xea\xfd" +
	"~\xf5\xae\x93\x12\xea\x00\xe6\xbd\xb8\x17\xa0\xd2\xaf\xde\x87" +
	"\x91`\xda\xf3\x98\xe7A\x8f\xa2\xb2\x0d<\x9a\xc0\x1b\xc1" +
	"u\xd8dE\x8b\xaat\x90\xceV\x99`4\xaa2\xca" +
	"\x14\x02\x1a\xb8\xae\xd5\x10\x82)\xf8\xab[;\x01\x88\xab" +
	"[<l\x07l\xc7ao\xc6\xe1\x1b\xf1\xb4\xc3k\xcc" +
	"\xa3uL\xfd)G\xaf5\x80<\xcb\x04\x14\xe7Cv" +
	"\x97<\xef.\xcb\x13\xa9\x08\x00\\\x05\x04W\x01.0" +
	"!\xb6\x04\x1e\xc3\x02\x10,\x00\xc6L\x88d4\xa0\xcd" +
	"\xb0e\xc3#\xd9\xf0\xc6\xb9?\xb3\x9b\x1dh0MF" +
	"K\x15\x99\x0fw\x9b\xff\x0c\xab\x05!\x1b\xda\xcd\xc2\xda" +
	"\xfcD\x00wH\xb3\x0c`\xf7kh\x0f\x13\xcc\x87:" +
	"8e\x8cX\xf6\x93\x1a\xdaU\x82\x0bN\xaa\xe8\x95\xf9" +
	"[\x11y_6&\x82q2\x92\xb9\x90in\xc4<" +
	"*T+\xb4\x9e\xd3\x90\xb0\xd0\xa4a\x05\x842\x0c\x8a" +
	"\xbedK!\xe6\x0e\x15\xb5\x8f\xdc\x9f\x81v\xc6\x1c?" +
	"\xd8:b\xeb,\x19X^\xc8\x18\xb1\xfb\x9al\x9c^" +
	"c\x9c\xb6\xecK\x1a\xda\xbf\xb4\xe8\xb8R6\xaeX\x95" +
	"Q%\xcf\xadJ\xb6\x04KH\x00\xcc1,\x9bch" +
	"U\x0e*\xcb\xcb\x89\xd0I*\xf4\xc3X6\x0f\xa3U" +
	"9\xaf,\x97\x12\xa9k\xa9\xd4\x7f@a\xfe\x84Ve" +
	"\x80hX\x19%\x04\x8d\x02\x96\xb0\x90\x1c\xe5)s\x03" +
	"\xb1*5e\x99S\x96\x0e\xbd\x84\x1d\x00f\x83\x94\xcd" +
	"\x06\xb1*o+\xcb\x09BV\xd8\xf9\x96^\x1b>?" +
	"\xd0`+\xe8u\xc1\x15\xcc\x89X\xbb\x0c[\xb3y\x09" +
	"-g\x91v\xb1\x8c>\x9a\x84\xf1\xc0\xa7\x11\xaf3\x19" +
	"9\xf5\x90\x0eRGR\x87N\xfa|.y\x1dH6" +
	"\xcfo\xd4\xa7\x98\xa0\xc14\x95\xcc\x0d|ORVs" +
	"B\xc9<*\xb9\xef2\xba\xc3\xf1\x1b\x8e\x98\xa7#\x03" +
	"td\xc3\xc3\xd60\x9d\x9c\xd8\x02\x90\x8b>\x97[\x9b" +
	"\xf6\x06\xb2\xf6.`<[\x0d\x92Z\x1d\xcd\xf6\xb8\xa4" +
	"Y$\xf3h\x14\x0cP>\xc4\x86\xd2\x86\xd2\x13\x91Z" +
	"Q\xb6\xbb\x04\x0b\"S\xc2\xf2\xa2\x8fdE\xaf\x92\x98" +
	"\xfb\x1ew\x9d\x88\xfdG\x81N%\xcce\xa2\xeaD\xd4" +
	"N\x94T\x93!s\xf94W\x0fK\xeaJ:\xcb\xa3" +
	"\xea\x1d\x0e9\xc9=\xe9\x06\xe0\xea\x96<\xb3\x0ds\x03" +
	"!X\xcd\x89\xc0\xe2\x81\xbf\xbd\xdd\xcc6\xe7\xa7P\x8b" +
	"\x1b)t\xfa\xdf<J]B.[{\x16P\xc7\x0f" +
	"\xa2*\x13\xcd\xa7A\xda\x90\x8c\xba\x8eL\x08\x0c\x1d." +
	"\xb8?C\x85:'2\xa2\x8e\xafVU\x86\x81/\x99" +
	"\x0a\xb1\x92\xc5\xfa\x17\xa7\xaf?kn\x7f\xd3\x95\xea\x0a" +
	"+\x9d\x0eDz\xa5\xebS\xcc\xf3\x98G\xa7\xb8\xaf4" +
	"Qg\xb2G\xb9-9\x8aY\xe0]\x04\xffV,\x99" +
	"\xe0N\x8d?\x8b9\xa9Z\x92\xa2\x1b\x08v\x03\xb6\xfb" +
	"\x80;\"J>\xe0\x7f\x07\x00\x00\xff\xffN\x03\xb8\xb1"

func init() {
	schemas.Register(schema_87fc44aa3255d2ae,
		0x874f20540dfe792f,
		0x9fd358f04cb684bd,
		0xa70dd5f5d238faaa,
		0xa8084ffe960780bb,
		0xab748f26e2efa4c7,
		0xc8ea6e5ec7f91c46,
		0xd064305fa8416cb7,
		0xf38cccd618967ecd,
		0xf87ced6eabceba45)
}
