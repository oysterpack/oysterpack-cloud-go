// Code generated by capnpc-go. DO NOT EDIT.

package msgs

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Envelope struct{ capnp.Struct }

// Envelope_TypeID is the unique identifier for the type Envelope.
const Envelope_TypeID = 0xf38cccd618967ecd

func NewEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Envelope{st}, err
}

func NewRootEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Envelope{st}, err
}

func ReadRootEnvelope(msg *capnp.Message) (Envelope, error) {
	root, err := msg.RootPtr()
	return Envelope{root.Struct()}, err
}

func (s Envelope) String() string {
	str, _ := text.Marshal(0xf38cccd618967ecd, s.Struct)
	return str
}

func (s Envelope) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Envelope) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Envelope) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Envelope) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Envelope) Created() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Envelope) SetCreated(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Envelope) ReplyTo() (ChannelAddress, error) {
	p, err := s.Struct.Ptr(1)
	return ChannelAddress{Struct: p.Struct()}, err
}

func (s Envelope) HasReplyTo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Envelope) SetReplyTo(v ChannelAddress) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewReplyTo sets the replyTo field to a newly
// allocated ChannelAddress struct, preferring placement in s's segment.
func (s Envelope) NewReplyTo() (ChannelAddress, error) {
	ss, err := NewChannelAddress(s.Struct.Segment())
	if err != nil {
		return ChannelAddress{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Envelope) Channel() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Envelope) HasChannel() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Envelope) ChannelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Envelope) SetChannel(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Envelope) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Envelope) HasMessage() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Envelope) SetMessage(v []byte) error {
	return s.Struct.SetData(3, v)
}

// Envelope_List is a list of Envelope.
type Envelope_List struct{ capnp.List }

// NewEnvelope creates a new list of Envelope.
func NewEnvelope_List(s *capnp.Segment, sz int32) (Envelope_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Envelope_List{l}, err
}

func (s Envelope_List) At(i int) Envelope { return Envelope{s.List.Struct(i)} }

func (s Envelope_List) Set(i int, v Envelope) error { return s.List.SetStruct(i, v.Struct) }

func (s Envelope_List) String() string {
	str, _ := text.MarshalList(0xf38cccd618967ecd, s.List)
	return str
}

// Envelope_Promise is a wrapper for a Envelope promised by a client call.
type Envelope_Promise struct{ *capnp.Pipeline }

func (p Envelope_Promise) Struct() (Envelope, error) {
	s, err := p.Pipeline.Struct()
	return Envelope{s}, err
}

func (p Envelope_Promise) ReplyTo() ChannelAddress_Promise {
	return ChannelAddress_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Address struct{ capnp.Struct }

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0x9fd358f04cb684bd

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.RootPtr()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0x9fd358f04cb684bd, s.Struct)
	return str
}

func (s Address) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Address) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Address) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Address) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Address) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Address) HasId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Address) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Address) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0x9fd358f04cb684bd, s.List)
	return str
}

// Address_Promise is a wrapper for a Address promised by a client call.
type Address_Promise struct{ *capnp.Pipeline }

func (p Address_Promise) Struct() (Address, error) {
	s, err := p.Pipeline.Struct()
	return Address{s}, err
}

type ChannelAddress struct{ capnp.Struct }

// ChannelAddress_TypeID is the unique identifier for the type ChannelAddress.
const ChannelAddress_TypeID = 0xd801266d9df371b7

func NewChannelAddress(s *capnp.Segment) (ChannelAddress, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChannelAddress{st}, err
}

func NewRootChannelAddress(s *capnp.Segment) (ChannelAddress, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChannelAddress{st}, err
}

func ReadRootChannelAddress(msg *capnp.Message) (ChannelAddress, error) {
	root, err := msg.RootPtr()
	return ChannelAddress{root.Struct()}, err
}

func (s ChannelAddress) String() string {
	str, _ := text.Marshal(0xd801266d9df371b7, s.Struct)
	return str
}

func (s ChannelAddress) Channel() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ChannelAddress) HasChannel() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChannelAddress) ChannelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ChannelAddress) SetChannel(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ChannelAddress) Address() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s ChannelAddress) HasAddress() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChannelAddress) SetAddress(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s ChannelAddress) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// ChannelAddress_List is a list of ChannelAddress.
type ChannelAddress_List struct{ capnp.List }

// NewChannelAddress creates a new list of ChannelAddress.
func NewChannelAddress_List(s *capnp.Segment, sz int32) (ChannelAddress_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ChannelAddress_List{l}, err
}

func (s ChannelAddress_List) At(i int) ChannelAddress { return ChannelAddress{s.List.Struct(i)} }

func (s ChannelAddress_List) Set(i int, v ChannelAddress) error { return s.List.SetStruct(i, v.Struct) }

func (s ChannelAddress_List) String() string {
	str, _ := text.MarshalList(0xd801266d9df371b7, s.List)
	return str
}

// ChannelAddress_Promise is a wrapper for a ChannelAddress promised by a client call.
type ChannelAddress_Promise struct{ *capnp.Pipeline }

func (p ChannelAddress_Promise) Struct() (ChannelAddress, error) {
	s, err := p.Pipeline.Struct()
	return ChannelAddress{s}, err
}

func (p ChannelAddress_Promise) Address() Address_Promise {
	return Address_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

const schema_87fc44aa3255d2ae = "x\xda|S\xcfk\x14I\x18\xfd^u\xcf\xee\x06&" +
	"?\x9a\x9e\x85\x90K\xd7aY\xc8\x92]2\xbb\x87\xdd" +
	",\x0b\xd9L\xb2\x87\x0dYH\xed$`\x82\x08\xe5t" +
	"\x99i\x98\xe9\xeet\xcf\x98D\x8c\xb9\x08\x06\xf1\xa4\xe2" +
	"A\x94\\<H \"\x1e\x14\x029x\x08\"\xe8E" +
	"!\xf87x\x12r\x15Zj\xbag2\x87qn\xd5" +
	"\xf5\xde\xf7\xf5{\xef\xfbjR\xe1oV\xcc\xbdbD" +
	"\x82\xe7\xbeI\x8e\xae?_\xf8t\xee\xfd\x1eYCH" +
	"\x9e\xbc[\xfeu\x7f\xee\xf3\x0d\xca\xb1o\x89\xec\x7f\xf1" +
	"\xcc\x16\xd0\xa7\xff\xb0AH^\xac\x9f>\xac\xff\x88\x0f" +
	"\xbd\xb8\x03\xec\xa3\xfd}\xebd1\xcd}{\xed\xde\xe8" +
	"\xc9\x9b[\xa7$\x86\xd0M65\xe5%;\xb4_k" +
	"\xf2o\xc7\xcc\x01\xfd\x91\xd4U\x1c\xcb5\xf5\x0b*2" +
	"\xf4\xc3?g\\\xc7\x8dT\x1c/\x02\xe2;\xc3$2" +
	"Ad\x8d\xffd\x8d;b\xc1\x80\xa82X@\x01\xfa" +
	"V\x8dY\xca\x11\xbb\x06\xc4]\x86\xe1P6\xaa\xc2\x04" +
	"K.\xdc\xd9\x13G'7\x8fI\x98\x0c3\x05 O" +
	"da5\x91\x95F\x10\xf1P\x92\xd1\xa8\x12a\x88\xb0" +
	"hh\x90\xe9\xa3\xe1\xb9}\x8a\xe7\xb3b\xcf%JK" +
	"\xf2\x84\x8et\x96J\x9f\xadJ\xdfW\xb5\x19\xd7\x1d\xee" +
	"\xe1\xa0\xa4\x1d,\x1a\x10\xe7\xbb\x1c\xac\x94\xac\x15G\\" +
	"5 v\x19v*i\x83\x1e:F3\x1d\xfb\xed\x7f" +
	"rdd>\xec\xcb\xba\"j\x8b\xda\x91n+\xbf>" +
	"f\xa2\xcc\x8ct)\xcd\x9a\x08#g\xdb@\xc0H\x97" +
	"\xb9l.\xff\xf8\xd3\x97U-\x08\x95\xb6U\xe8\xd8\xda" +
	"\x1e\xb3\xb6\x1d\xf1\xc8\x80x\xca\xd0vuP\xb2\x0e\x9c" +
	"\xffa\xa0\x9c\x07\x83\xc5P\x00\xd3{\x82\x92=\x00\xa7" +
	"<\xa9\x91\xbf4b\xb0\x02\x0c\"{\x0a%{\x0aN" +
	"\xb9\xa6\x91M\x8d\x98F\x01&\x91\xddD\xc9n\xc2)" +
	"?\xd0\xc8c\xb0\xaf\xcc\xa9\x9d\xcf\xed\xa4\xe9{\xebM" +
	"\xc5\xeb\xc8r\xf2\xe0v\x85S\x89\x94l\xa8^\x1d\xe6" +
	"Z\x1d\x8a\x88\x8cN\xc4y\xe5\xa7\x96y\xab\xcc\x0b|" +
	"\xde\xf0\xea*n\xc8z\xc8\x7f\xe62\xe6\x92/\xfb\xde" +
	"f\xebv\x827\xaa\x8a\xfb\xcd\xfaE\x15\xf1\xe0\x12\x8f" +
	"U%\xf0\xdd\x98\xab\x9a\x0cc\xe5\xf2\xd8\xf3+\x8a\xcf" +
	"K\xbf)\xa3-^\x9c\xe0\xc5\xa9\xdf\x9dI\xbe\xbc4" +
	"K\x84\x1c1\xe4\x08;\x91\x0ak[KA\x1f\x83\x87" +
	"I\x10j%\xb2\x06\xdebs9\xed\x9e\x0d\xb1\xf3L" +
	"\xd3!\xf6\xd9\xa8\x1f2\xbf\xabH\xb4pM4\xf5:" +
	"\xe9\x8fv\x00^\xcce\x1c\x07\x15Og\xc67\xbc\xf4" +
	"\xdd\xb4\xb3\xccX}\xc4\xdeOb\x15y\xb2\xe6]\x81" +
	"r\xd3\xae\xc6\x9a\xde\xd5Ab\x18$|\x09\x00\x00\xff" +
	"\xff\x81%7U"

func init() {
	schemas.Register(schema_87fc44aa3255d2ae,
		0x9fd358f04cb684bd,
		0xd801266d9df371b7,
		0xf38cccd618967ecd)
}
