// Code generated by capnpc-go. DO NOT EDIT.

package msgs

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0xf38cccd618967ecd

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0xf38cccd618967ecd, s.Struct)
	return str
}

func (s Header) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Header) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Header) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Header) Created() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Header) SetCreated(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Header) Sender() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s Header) HasSender() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetSender(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSender sets the sender field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s Header) NewSender() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0xf38cccd618967ecd, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

func (p Header_Promise) Sender() Address_Promise {
	return Address_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Address struct{ capnp.Struct }

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0x9fd358f04cb684bd

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.RootPtr()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0x9fd358f04cb684bd, s.Struct)
	return str
}

func (s Address) System() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Address) HasSystem() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Address) SystemBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Address) SetSystem(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Address) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Address) HasPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Address) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Address) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Address) Id() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Address) HasId() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Address) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Address) SetId(v string) error {
	return s.Struct.SetText(2, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0x9fd358f04cb684bd, s.List)
	return str
}

// Address_Promise is a wrapper for a Address promised by a client call.
type Address_Promise struct{ *capnp.Pipeline }

func (p Address_Promise) Struct() (Address, error) {
	s, err := p.Pipeline.Struct()
	return Address{s}, err
}

const schema_87fc44aa3255d2ae = "x\xda|\x92\xbfk\x14A\x18\x86\xbfw\xe6V\x0b\x8f" +
	"\xbb\x0cwE\x08\xca\x8e\x85M\x88\xe2\xd9\xa8\xd7$\xa7" +
	"\x1eh\xb0\xc8\x80\x07b!\x8c\xbb\xa3\xb7\x92\xfdq;" +
	"\xbb\x90k\xb4\x11\x04\xb1R\xb1M\x1f\x88\x11\x0b\xbbt" +
	"\x0a\x16\x06\x82J*\xff\x08\xc1\xc2FX\xd9\xcd\x1d\x91" +
	"\xa0\xe9>>\xde\xe7\x9b\x97\x87\x99\xf9\xb5\xc4:N\xcc" +
	"\x88\xd4I\xe7X\xb1\xfd\xe4\xfd\xcd\x1f\xb7\xbf\xae\x93h" +
	"\xa0x\xf3epa\xe3\xda\xef\xa7\xe4\xf0\xe3D\xadS" +
	"x\xd7:\x83r:\x8d-B\xb1\xf3\xe8\xf5\xec\xde\xe7" +
	"\xe7?I5\xf0w\x98\x95\x91\x1e\xdbh\xdd\xa8\xa6>" +
	"\xdb\xa2KEh\xac\xd5\x0f\xcc9x:\x89\x92n\xcf" +
	"w\xfd\xd4X\xbb\x02\xa8:\xaf\x11\xd5@$\xfa]\xd1" +
	"w\xd5\x90Ce\x0c\x02h\xa3\xdc\x8e\xe6\xc5\xc8U\xaf" +
	"8\xd4[\x06\xc1X\x1b\x8cHl\xce\x89MW\xedr" +
	"\xa8\xef\x0c\x8bvl3\x13\xaa\x1aXq\xf7\xe5\xba\xda" +
	"\xde{\xf6\x91T\x8d\xa1\xd7\x06\xeaD\x02\x0f\x0b\xede" +
	"q*\xed\x98\x9ae\x94\x08ub\xa8\x13\x9a\x89\xce\x86" +
	"G\x90w&d\xa2\x89gC\"4\x08+\x1c\x15\xde" +
	" \xf0\xc0?\x02^\x9e\xc0\x81O\x84\xe9\x8b\x87e\\" +
	"7M\xed\x9b\xf4\x90\x8b\xb9\xd2\xc5*\x87Zc\x98\xaa" +
	"\xc8\xaf\x88\xdcU\x1f8\xd4n\xa9\x02\xfb*v\xbaD" +
	"\xea\x13\x87\xfa\xc6\xfeSgvR\xe7E\x91G\xc1(" +
	"72\xc4~\x05\x19\xc0?P\xf1\xd8K\x8d\xce\xcc\xbf" +
	".,U\x17:\x98\xe7\xd3\xf6\xf2D\x95\x0e\xe2Hf" +
	"Ahl\xa6\xc3D\x9e\x95\xdaJ-\x07Q\xb0Vm" +
	"\x17d642\xca\xc3{&\x95\xf1}i\x8d\x17G" +
	"\xbe\x95fU'\xd6\xf8\xd2\x06\x91g\xe4\xb2\x8er\x9d" +
	"\x8eegAv._<\xdf\x94\x83[W\x89\xe0\x10" +
	"\x83CX\xb4&\xf2M\x8a\x99\x83\xdfI\xc0\x0c\xe1O" +
	"\x00\x00\x00\xff\xff\xd1\xdd\xb8\x06"

func init() {
	schemas.Register(schema_87fc44aa3255d2ae,
		0x9fd358f04cb684bd,
		0xf38cccd618967ecd)
}
