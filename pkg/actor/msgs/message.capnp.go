// Code generated by capnpc-go. DO NOT EDIT.

package msgs

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0xf38cccd618967ecd

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0xf38cccd618967ecd, s.Struct)
	return str
}

func (s Header) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Header) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Header) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Header) Created() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Header) SetCreated(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Header) Reply() (ChannelAddress, error) {
	p, err := s.Struct.Ptr(1)
	return ChannelAddress{Struct: p.Struct()}, err
}

func (s Header) HasReply() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetReply(v ChannelAddress) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewReply sets the reply field to a newly
// allocated ChannelAddress struct, preferring placement in s's segment.
func (s Header) NewReply() (ChannelAddress, error) {
	ss, err := NewChannelAddress(s.Struct.Segment())
	if err != nil {
		return ChannelAddress{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0xf38cccd618967ecd, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

func (p Header_Promise) Reply() ChannelAddress_Promise {
	return ChannelAddress_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Address struct{ capnp.Struct }

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0x9fd358f04cb684bd

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.RootPtr()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0x9fd358f04cb684bd, s.Struct)
	return str
}

func (s Address) System() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Address) HasSystem() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Address) SystemBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Address) SetSystem(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Address) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Address) HasPath() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Address) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Address) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Address) Id() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Address) HasId() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Address) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Address) SetId(v string) error {
	return s.Struct.SetText(2, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0x9fd358f04cb684bd, s.List)
	return str
}

// Address_Promise is a wrapper for a Address promised by a client call.
type Address_Promise struct{ *capnp.Pipeline }

func (p Address_Promise) Struct() (Address, error) {
	s, err := p.Pipeline.Struct()
	return Address{s}, err
}

type ChannelAddress struct{ capnp.Struct }

// ChannelAddress_TypeID is the unique identifier for the type ChannelAddress.
const ChannelAddress_TypeID = 0xd801266d9df371b7

func NewChannelAddress(s *capnp.Segment) (ChannelAddress, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChannelAddress{st}, err
}

func NewRootChannelAddress(s *capnp.Segment) (ChannelAddress, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChannelAddress{st}, err
}

func ReadRootChannelAddress(msg *capnp.Message) (ChannelAddress, error) {
	root, err := msg.RootPtr()
	return ChannelAddress{root.Struct()}, err
}

func (s ChannelAddress) String() string {
	str, _ := text.Marshal(0xd801266d9df371b7, s.Struct)
	return str
}

func (s ChannelAddress) Channel() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ChannelAddress) HasChannel() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChannelAddress) ChannelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ChannelAddress) SetChannel(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ChannelAddress) Address() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s ChannelAddress) HasAddress() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChannelAddress) SetAddress(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s ChannelAddress) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// ChannelAddress_List is a list of ChannelAddress.
type ChannelAddress_List struct{ capnp.List }

// NewChannelAddress creates a new list of ChannelAddress.
func NewChannelAddress_List(s *capnp.Segment, sz int32) (ChannelAddress_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ChannelAddress_List{l}, err
}

func (s ChannelAddress_List) At(i int) ChannelAddress { return ChannelAddress{s.List.Struct(i)} }

func (s ChannelAddress_List) Set(i int, v ChannelAddress) error { return s.List.SetStruct(i, v.Struct) }

func (s ChannelAddress_List) String() string {
	str, _ := text.MarshalList(0xd801266d9df371b7, s.List)
	return str
}

// ChannelAddress_Promise is a wrapper for a ChannelAddress promised by a client call.
type ChannelAddress_Promise struct{ *capnp.Pipeline }

func (p ChannelAddress_Promise) Struct() (ChannelAddress, error) {
	s, err := p.Pipeline.Struct()
	return ChannelAddress{s}, err
}

func (p ChannelAddress_Promise) Address() Address_Promise {
	return Address_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

const schema_87fc44aa3255d2ae = "x\xda|\x93\xbfk\x14A\x1c\xc5\xbfo\xe6N\x05\x8f" +
	"\xbb,\x97\"\xa4\xd9i\x14\x12\x12\xc9\xa5Qca~" +
	"\x18\xd0\xa0\x90\x01\x03FD\x18oGo\xe5voo" +
	"g\x17s \xa6\x11\x14\xb1R\xb1\x93\xf4\x81\x18\xb1\xd0" +
	"*\x9d\xa2\x85\x81\xa0\x12,\xfc\x0b\xac\x84\xb4\xc2\xca\xed" +
	"\xed%!\xc6\xeb\x86\xe1\xbd\xefw\xde\xe7\xed\x8e\x9d\xc3" +
	"$\xab\xe4?1\")\xf2G\x92\x8d\x87\xef.\xff\xbe" +
	"\xf6m\x85\xac\"\x92\xd7_\x17\xc6W/\xfcyDy" +
	"~\x94\xa8|\x09o\xcb\x12\xed\xd3\x15\xac\x13\x92\xf7\xcd" +
	"\x9dW\xdeI\xfc8\xa0em\x85\xc7~\x95[\xe9)" +
	"f\xf7\x08\xc9\xe6\x83\x97\x03\xdb_\x9e\xee\x90,\xe2\x1f" +
	"\xf1\x09\xbeZ\x1eMW\x0c\xf1u:\x93x\xda\x18u" +
	"G\x9fBU\x05~01\xe5\xd8N\xa8\x8d\x99\x07d" +
	"\x81\xe7\x88r \xb2f'\xacY[\xd68d\xc4`" +
	"\x01\xfdh\xdf6\x87\xad\xa6-_p\xc87\x0c\x16c" +
	"\xfd`D\xd6\xda\xa0\xb5f\xcb-\x0e\xf9\x93\xe1\xbci" +
	"\x99H{2\x07\x96\xdc|\xbe\"7\xb6\x9f|$\x99" +
	"c\x98\xea\x07\x0aD\x16\xee&\xaa\x1a5BaZT" +
	"jK\x89P \x86\x02\xa1\x14\xa8\xa8\xd6\xc3y=s" +
	"\x06\x8axT#B\x910\xcf\x91\xda\x8b\x04\xee:=" +
	"\xccs\x99\xd9u\x88\xd0\xdd\xb8\x0b\x83u`\xcc\xd4\x94" +
	"\xef\xeb\xfa\x94\xe3\x94\xbaL\x8e\xed2\x19\x9a\xb6\x86l" +
	"9\xcf!o\xecc\xb28m-\xda\xf2>\x87|\xcc" +
	"\xb0\\\xed\x0c8\xe4\x1d\x03\xd9;V\xbb;\x052\xb1" +
	"(\xf9\xca\xd3{\x18\x96\x95\x936\xd2#L\x98\x85Q" +
	"\x0eu\xda#B\xdf\xde\xe7E@\xdf\xbepY\xd3\x17" +
	"uI9:<P\xf4`\xbb\xe8:\x87\\b\xe8f" +
	"\x8a\xa7\xad\xd8\x96\x1f8\xe4V\xbbgtz\xde\x1c'" +
	"\x92\x9f9\xe4w\xf6\x1f\xd6\xdd\x8c\xcf\x92\xd8w\x9b\xb1" +
	"\x16\x1e\xb2\xac.\x9c}\x01\xab\xa1V\x91>l\xc2d" +
	":\xa1\x82a\xbe\x8b\xe9x\xaav\x1b\xbe\x88\\O\x9b" +
	"Hy\x81\x18\x15\xca\x08%\x16|w)\xbd\x1d\x11Q" +
	"M\x0b?\xf6n\xe9P4n\x0b\xa3\xab\x0d\xdf1B" +
	"\xd7U`\xb4#\x8c\xebW\xb5\x98S~\xac\xc2\x96\xa8" +
	"\x8c\x88\xca\xd9\xd3c%\xb1pu\x86\x08yb\xc8\x13" +
	"\xecP\x07\xf5\x16\xfa\xf6\xfe\xbc\x0e\xc6\xbf\x01\x00\x00\xff" +
	"\xff\x99Y\x01+"

func init() {
	schemas.Register(schema_87fc44aa3255d2ae,
		0x9fd358f04cb684bd,
		0xd801266d9df371b7,
		0xf38cccd618967ecd)
}
