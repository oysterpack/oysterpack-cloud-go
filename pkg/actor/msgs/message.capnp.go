// Code generated by capnpc-go. DO NOT EDIT.

package msgs

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Envelope struct{ capnp.Struct }

// Envelope_TypeID is the unique identifier for the type Envelope.
const Envelope_TypeID = 0xf38cccd618967ecd

func NewEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return Envelope{st}, err
}

func NewRootEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return Envelope{st}, err
}

func ReadRootEnvelope(msg *capnp.Message) (Envelope, error) {
	root, err := msg.RootPtr()
	return Envelope{root.Struct()}, err
}

func (s Envelope) String() string {
	str, _ := text.Marshal(0xf38cccd618967ecd, s.Struct)
	return str
}

func (s Envelope) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Envelope) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Envelope) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Envelope) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Envelope) Created() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Envelope) SetCreated(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Envelope) ReplyTo() (ChannelAddress, error) {
	p, err := s.Struct.Ptr(1)
	return ChannelAddress{Struct: p.Struct()}, err
}

func (s Envelope) HasReplyTo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Envelope) SetReplyTo(v ChannelAddress) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewReplyTo sets the replyTo field to a newly
// allocated ChannelAddress struct, preferring placement in s's segment.
func (s Envelope) NewReplyTo() (ChannelAddress, error) {
	ss, err := NewChannelAddress(s.Struct.Segment())
	if err != nil {
		return ChannelAddress{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Envelope) Channel() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Envelope) HasChannel() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Envelope) ChannelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Envelope) SetChannel(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Envelope) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Envelope) HasMessage() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Envelope) SetMessage(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Envelope) MessageType() uint8 {
	return s.Struct.Uint8(8)
}

func (s Envelope) SetMessageType(v uint8) {
	s.Struct.SetUint8(8, v)
}

// Envelope_List is a list of Envelope.
type Envelope_List struct{ capnp.List }

// NewEnvelope creates a new list of Envelope.
func NewEnvelope_List(s *capnp.Segment, sz int32) (Envelope_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return Envelope_List{l}, err
}

func (s Envelope_List) At(i int) Envelope { return Envelope{s.List.Struct(i)} }

func (s Envelope_List) Set(i int, v Envelope) error { return s.List.SetStruct(i, v.Struct) }

func (s Envelope_List) String() string {
	str, _ := text.MarshalList(0xf38cccd618967ecd, s.List)
	return str
}

// Envelope_Promise is a wrapper for a Envelope promised by a client call.
type Envelope_Promise struct{ *capnp.Pipeline }

func (p Envelope_Promise) Struct() (Envelope, error) {
	s, err := p.Pipeline.Struct()
	return Envelope{s}, err
}

func (p Envelope_Promise) ReplyTo() ChannelAddress_Promise {
	return ChannelAddress_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Address struct{ capnp.Struct }

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0x9fd358f04cb684bd

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.RootPtr()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0x9fd358f04cb684bd, s.Struct)
	return str
}

func (s Address) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Address) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Address) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Address) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Address) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Address) HasId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Address) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Address) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0x9fd358f04cb684bd, s.List)
	return str
}

// Address_Promise is a wrapper for a Address promised by a client call.
type Address_Promise struct{ *capnp.Pipeline }

func (p Address_Promise) Struct() (Address, error) {
	s, err := p.Pipeline.Struct()
	return Address{s}, err
}

type ChannelAddress struct{ capnp.Struct }

// ChannelAddress_TypeID is the unique identifier for the type ChannelAddress.
const ChannelAddress_TypeID = 0xd801266d9df371b7

func NewChannelAddress(s *capnp.Segment) (ChannelAddress, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChannelAddress{st}, err
}

func NewRootChannelAddress(s *capnp.Segment) (ChannelAddress, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChannelAddress{st}, err
}

func ReadRootChannelAddress(msg *capnp.Message) (ChannelAddress, error) {
	root, err := msg.RootPtr()
	return ChannelAddress{root.Struct()}, err
}

func (s ChannelAddress) String() string {
	str, _ := text.Marshal(0xd801266d9df371b7, s.Struct)
	return str
}

func (s ChannelAddress) Channel() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ChannelAddress) HasChannel() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChannelAddress) ChannelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ChannelAddress) SetChannel(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ChannelAddress) Address() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s ChannelAddress) HasAddress() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChannelAddress) SetAddress(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s ChannelAddress) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// ChannelAddress_List is a list of ChannelAddress.
type ChannelAddress_List struct{ capnp.List }

// NewChannelAddress creates a new list of ChannelAddress.
func NewChannelAddress_List(s *capnp.Segment, sz int32) (ChannelAddress_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ChannelAddress_List{l}, err
}

func (s ChannelAddress_List) At(i int) ChannelAddress { return ChannelAddress{s.List.Struct(i)} }

func (s ChannelAddress_List) Set(i int, v ChannelAddress) error { return s.List.SetStruct(i, v.Struct) }

func (s ChannelAddress_List) String() string {
	str, _ := text.MarshalList(0xd801266d9df371b7, s.List)
	return str
}

// ChannelAddress_Promise is a wrapper for a ChannelAddress promised by a client call.
type ChannelAddress_Promise struct{ *capnp.Pipeline }

func (p ChannelAddress_Promise) Struct() (ChannelAddress, error) {
	s, err := p.Pipeline.Struct()
	return ChannelAddress{s}, err
}

func (p ChannelAddress_Promise) Address() Address_Promise {
	return Address_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type MessageProcessingError struct{ capnp.Struct }

// MessageProcessingError_TypeID is the unique identifier for the type MessageProcessingError.
const MessageProcessingError_TypeID = 0xa70dd5f5d238faaa

func NewMessageProcessingError(s *capnp.Segment) (MessageProcessingError, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MessageProcessingError{st}, err
}

func NewRootMessageProcessingError(s *capnp.Segment) (MessageProcessingError, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MessageProcessingError{st}, err
}

func ReadRootMessageProcessingError(msg *capnp.Message) (MessageProcessingError, error) {
	root, err := msg.RootPtr()
	return MessageProcessingError{root.Struct()}, err
}

func (s MessageProcessingError) String() string {
	str, _ := text.Marshal(0xa70dd5f5d238faaa, s.Struct)
	return str
}

func (s MessageProcessingError) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s MessageProcessingError) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MessageProcessingError) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s MessageProcessingError) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s MessageProcessingError) HasMessage() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) SetMessage(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s MessageProcessingError) Err() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s MessageProcessingError) HasErr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) ErrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s MessageProcessingError) SetErr(v string) error {
	return s.Struct.SetText(2, v)
}

// MessageProcessingError_List is a list of MessageProcessingError.
type MessageProcessingError_List struct{ capnp.List }

// NewMessageProcessingError creates a new list of MessageProcessingError.
func NewMessageProcessingError_List(s *capnp.Segment, sz int32) (MessageProcessingError_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return MessageProcessingError_List{l}, err
}

func (s MessageProcessingError_List) At(i int) MessageProcessingError {
	return MessageProcessingError{s.List.Struct(i)}
}

func (s MessageProcessingError_List) Set(i int, v MessageProcessingError) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MessageProcessingError_List) String() string {
	str, _ := text.MarshalList(0xa70dd5f5d238faaa, s.List)
	return str
}

// MessageProcessingError_Promise is a wrapper for a MessageProcessingError promised by a client call.
type MessageProcessingError_Promise struct{ *capnp.Pipeline }

func (p MessageProcessingError_Promise) Struct() (MessageProcessingError, error) {
	s, err := p.Pipeline.Struct()
	return MessageProcessingError{s}, err
}

const schema_87fc44aa3255d2ae = "x\xda\xa4T\xcf\x8b\x1cE\x14~\xaf\xaagw\x0f\xfb" +
	"#M\xcfa\x09B?$\x91dIB\xc6\x18\x8c^" +
	"\xd6\x9dd.a\x85-f\x07\x93 Bmw\x99i" +
	"\x98\xe9\xeet\xf5d\x1d1.\x0b\x01\x17\xf1\x12\x0dB" +
	"\x04\xc9Q\xd8\x83\x82\x07\x0d\x0b\x01\x17\x92C ^\"" +
	"\x06\xff\x00O\x82\x10\x08^Dh\xa9\xee\x9e\xc9\xa0\x93" +
	"\xb9\xe4V\xdd\xef\xbd\xaf\xbf\xef\xab\xef\xf5\xc9?\xf1-" +
	"V\xab\xb8\x1c@\x1c\xaaLew\xaf\xff\xb0\xfa\xe4\xc2" +
	"/\xb7\xc1\x9e\xc7\xec\xdbG\xadWw\xcf\xfd\xf3\x09T" +
	"\xd84\x80\xd3\xc3\xef\x9dkhN}\xdc\x04\xccv\xff" +
	">\xf3\xe8\xaf_\xe7\xbe\xf9O/\x9f\x068u\x9a-" +
	"\xa1\xd3\xc8\xc7V\xd8w\x80\xd9\x8fW\x9e~\xdd}\x05" +
	"\x7f\x1b\x0b\xcc\xffp\xb6\xcd\x98s\x8d\x1b\xe0\x9f?\xfe" +
	"r\xf1\xf1\xc3\xcf\x9e\x82\x98G6\xd2l\x99\x96\xe3\xd6" +
	"\x9es\xda\x9cN\xd5\xacw\x10\xced]\xa5\xb5\xbc\xac" +
	"N\xa0'\xe30~s\xc5w\xfdDi\xbd\x86(f" +
	"\xb8\x05`!\x80}t\xc9>\xea\x8aU\x8e\xa2\xcd\xd0" +
	"F\xac\xa2y\xab\x0e\xda\xca\x15;\x1c\xc5M\x86\x0b\xb1" +
	"L\xdb\xc2B\x96\xbd\xf7\xc5mq\xf7\xf1\xa7\xf7AX" +
	"\x0cW\xaa\x88\xb3\x006^\xca\xa4\x97F\x09\xc5\x12x" +
	"\xda\x06\xc0y\xc05n\x8a\xcc\x1cy\xe0O\x18>_" +
	"\x0e\x07>@12\x0b8\xa4\xce\x0b\xeao\x17\x8fk" +
	"I\xe4)\xad\x83\xf0rc!I\xa2\xc4(\x99\x1d*" +
	"i,\xd9\x0dW\xb49\x8a\xeb#J\xb6\xeb\xf6\xb6+" +
	"\xeep\x14\xf7\x18\xda\x8cU\x91\x01\xd8\xfb/\xdb\xfb\xae" +
	"\xf8\x9d\xa3x\xf2\xc2\xfa\xb6J\xb2c\x10\x8e\xe4\x085" +
	"\xdc\xc3\xaca\x08S\xe4U\xbc^\x92(\x9f6\xdbA" +
	"GQ<TDi;\xd0TB\x91\x0a\xaf.\xabN" +
	"\x14\xab\x13\x008\x07\x0c\xe7\x00\xa7U\x92L`\x99\x94" +
	"\x9f\xe8*ps\x10\x80\xff\xd9\xc9\x0a;\xcf\xb6e\x18" +
	"\xaa\xce\x8a\xef/\x8c\x09D\xdd\x04b\x8d\xa3xw\xc4" +
	"\xc6\x8bu\xfb\xa2+>\xe2(v\x18ny\x05\xc0\x18" +
	"6\x8b%\x9b\xdd\xc17\x09\xcbfZ\x08ew\x84\xd4" +
	"\x96\xf4\xf38N\x94T\x18/}(\xa2\x0b\x80\x07\x9e" +
	"m\" \x1e\x18\x11W\xc6\xbc\x11._\xcd\xad3\xb2" +
	"\x16\x87\xb2n\x1d\xb4o\xb9\xe2'\x8e\xe2!\xc3\x81\xaa" +
	"\x07u\xfb\x81\xdb|\x0996\x8f\xa0\x89\x07\xe6\xf1p" +
	"\x0ec\xdd9\x8cns\xd5T.\x98\x0agU\xe4\x00" +
	"N\x0b\xebN\x0b\xdd\xe6\x8e\xa9\xdc4\x15\x8bW\xd1\x02" +
	"pn`\xdd\xb9\x81n\xf3\x8e\xa9\xdc3\x95\xcaL\x15" +
	"+\x88\xce>n8\xf7\xd1m\xce0\x8e\xcd*c\xcf" +
	"\xd9\x88\x81u\x9fg\xbd0\xb8\xd2S\xd4\xc5\xd2\xc2\x00" +
	"\xfd\x11\xdf\xbcD\xc9T\x8dC8W\xc6-\xe1C\xf7" +
	"gUX\xb8A\xf9X\x10\x85\x94\x06]\xa5S\xd9\x8d" +
	"\xe98IM\x92Za\xf0A\xfe\xf6\x18\xa5mEa" +
	"\xaf\xbb\xa1\x12\x8a\xde'\xad\xbc(\xf45\xa9\x8e\x8c\xb5" +
	"\xf2I\x07\xa1\xa7\xe8\xbc\x0c{2\xe9S\xed\x18\xd5\xde" +
	"x\xdd=I\xad\xf5\xb3\x00X\x01\x86\x15\xc0\xadD\xc5" +
	"\x9d\xfez4A\xe0^\x16\xc5\x86\x89\xec \xe5\xdd$" +
	"\x97\xfdg\xf7;\xfc!\x16\xf7;!l\x87J\xbd\x97" +
	"03\xc4M\xa3e\x92f\x1e\x06\x06\x04\x9a\xa4\xd6\x91" +
	"\x17\x18\xcfh3(6x\xe0\xe5\xf3Ww@\xf6\xab" +
	"L\xab$\x90\x9d\xe0CT~\x81\xca\xf3\xdd*\xb7r" +
	"\xe0\xf4:L\xf7\xe3q@\xaf\x0d.\x85\x0d/e&" +
	"\xed\xc79\xb3\x9e\xce\xff\x04*\xa4n\xaf\x93\x06qG" +
	"\x91)ic~\xd9\xac\xc9\x93!m(\xd2*L)" +
	"\x0aI\x92\xd7vsG\x00p\x0a\x18N\x01\xfe\x1b\x00" +
	"\x00\xff\xff\x0e\x01\xce\xf6"

func init() {
	schemas.Register(schema_87fc44aa3255d2ae,
		0x9fd358f04cb684bd,
		0xa70dd5f5d238faaa,
		0xd801266d9df371b7,
		0xf38cccd618967ecd)
}
