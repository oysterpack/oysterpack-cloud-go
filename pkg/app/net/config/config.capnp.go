// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ServerSpec struct{ capnp.Struct }

// ServerSpec_TypeID is the unique identifier for the type ServerSpec.
const ServerSpec_TypeID = 0xe57b76fedcda1734

func NewServerSpec(s *capnp.Segment) (ServerSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ServerSpec{st}, err
}

func NewRootServerSpec(s *capnp.Segment) (ServerSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ServerSpec{st}, err
}

func ReadRootServerSpec(msg *capnp.Message) (ServerSpec, error) {
	root, err := msg.RootPtr()
	return ServerSpec{root.Struct()}, err
}

func (s ServerSpec) String() string {
	str, _ := text.Marshal(0xe57b76fedcda1734, s.Struct)
	return str
}

func (s ServerSpec) ServiceSpec() (ServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceSpec{Struct: p.Struct()}, err
}

func (s ServerSpec) HasServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServerSpec) SetServiceSpec(v ServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceSpec sets the serviceSpec field to a newly
// allocated ServiceSpec struct, preferring placement in s's segment.
func (s ServerSpec) NewServiceSpec() (ServiceSpec, error) {
	ss, err := NewServiceSpec(s.Struct.Segment())
	if err != nil {
		return ServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerSpec) ServerCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s ServerSpec) HasServerCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ServerSpec) SetServerCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewServerCert sets the serverCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s ServerSpec) NewServerCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ServerSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ServerSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s ServerSpec) MaxConns() uint32 {
	return s.Struct.Uint32(0)
}

func (s ServerSpec) SetMaxConns(v uint32) {
	s.Struct.SetUint32(0, v)
}

// ServerSpec_List is a list of ServerSpec.
type ServerSpec_List struct{ capnp.List }

// NewServerSpec creates a new list of ServerSpec.
func NewServerSpec_List(s *capnp.Segment, sz int32) (ServerSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return ServerSpec_List{l}, err
}

func (s ServerSpec_List) At(i int) ServerSpec { return ServerSpec{s.List.Struct(i)} }

func (s ServerSpec_List) Set(i int, v ServerSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s ServerSpec_List) String() string {
	str, _ := text.MarshalList(0xe57b76fedcda1734, s.List)
	return str
}

// ServerSpec_Promise is a wrapper for a ServerSpec promised by a client call.
type ServerSpec_Promise struct{ *capnp.Pipeline }

func (p ServerSpec_Promise) Struct() (ServerSpec, error) {
	s, err := p.Pipeline.Struct()
	return ServerSpec{s}, err
}

func (p ServerSpec_Promise) ServiceSpec() ServiceSpec_Promise {
	return ServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ServerSpec_Promise) ServerCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type ClientSpec struct{ capnp.Struct }

// ClientSpec_TypeID is the unique identifier for the type ClientSpec.
const ClientSpec_TypeID = 0x853a22bea61af6f5

func NewClientSpec(s *capnp.Segment) (ClientSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientSpec{st}, err
}

func NewRootClientSpec(s *capnp.Segment) (ClientSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientSpec{st}, err
}

func ReadRootClientSpec(msg *capnp.Message) (ClientSpec, error) {
	root, err := msg.RootPtr()
	return ClientSpec{root.Struct()}, err
}

func (s ClientSpec) String() string {
	str, _ := text.Marshal(0x853a22bea61af6f5, s.Struct)
	return str
}

func (s ClientSpec) ServiceSpec() (ServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceSpec{Struct: p.Struct()}, err
}

func (s ClientSpec) HasServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ClientSpec) SetServiceSpec(v ServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceSpec sets the serviceSpec field to a newly
// allocated ServiceSpec struct, preferring placement in s's segment.
func (s ClientSpec) NewServiceSpec() (ServiceSpec, error) {
	ss, err := NewServiceSpec(s.Struct.Segment())
	if err != nil {
		return ServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ClientSpec) ClientCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s ClientSpec) HasClientCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ClientSpec) SetClientCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewClientCert sets the clientCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s ClientSpec) NewClientCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ClientSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ClientSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ClientSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

// ClientSpec_List is a list of ClientSpec.
type ClientSpec_List struct{ capnp.List }

// NewClientSpec creates a new list of ClientSpec.
func NewClientSpec_List(s *capnp.Segment, sz int32) (ClientSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ClientSpec_List{l}, err
}

func (s ClientSpec_List) At(i int) ClientSpec { return ClientSpec{s.List.Struct(i)} }

func (s ClientSpec_List) Set(i int, v ClientSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s ClientSpec_List) String() string {
	str, _ := text.MarshalList(0x853a22bea61af6f5, s.List)
	return str
}

// ClientSpec_Promise is a wrapper for a ClientSpec promised by a client call.
type ClientSpec_Promise struct{ *capnp.Pipeline }

func (p ClientSpec_Promise) Struct() (ClientSpec, error) {
	s, err := p.Pipeline.Struct()
	return ClientSpec{s}, err
}

func (p ClientSpec_Promise) ServiceSpec() ServiceSpec_Promise {
	return ServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ClientSpec_Promise) ClientCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type ServiceSpec struct{ capnp.Struct }

// ServiceSpec_TypeID is the unique identifier for the type ServiceSpec.
const ServiceSpec_TypeID = 0x8e98877ce02ee396

func NewServiceSpec(s *capnp.Segment) (ServiceSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return ServiceSpec{st}, err
}

func NewRootServiceSpec(s *capnp.Segment) (ServiceSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return ServiceSpec{st}, err
}

func ReadRootServiceSpec(msg *capnp.Message) (ServiceSpec, error) {
	root, err := msg.RootPtr()
	return ServiceSpec{root.Struct()}, err
}

func (s ServiceSpec) String() string {
	str, _ := text.Marshal(0x8e98877ce02ee396, s.Struct)
	return str
}

func (s ServiceSpec) DomainID() uint64 {
	return s.Struct.Uint64(0)
}

func (s ServiceSpec) SetDomainID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ServiceSpec) AppId() uint64 {
	return s.Struct.Uint64(8)
}

func (s ServiceSpec) SetAppId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s ServiceSpec) ServiceId() uint64 {
	return s.Struct.Uint64(16)
}

func (s ServiceSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s ServiceSpec) Port() uint16 {
	return s.Struct.Uint16(24)
}

func (s ServiceSpec) SetPort(v uint16) {
	s.Struct.SetUint16(24, v)
}

// ServiceSpec_List is a list of ServiceSpec.
type ServiceSpec_List struct{ capnp.List }

// NewServiceSpec creates a new list of ServiceSpec.
func NewServiceSpec_List(s *capnp.Segment, sz int32) (ServiceSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return ServiceSpec_List{l}, err
}

func (s ServiceSpec_List) At(i int) ServiceSpec { return ServiceSpec{s.List.Struct(i)} }

func (s ServiceSpec_List) Set(i int, v ServiceSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s ServiceSpec_List) String() string {
	str, _ := text.MarshalList(0x8e98877ce02ee396, s.List)
	return str
}

// ServiceSpec_Promise is a wrapper for a ServiceSpec promised by a client call.
type ServiceSpec_Promise struct{ *capnp.Pipeline }

func (p ServiceSpec_Promise) Struct() (ServiceSpec, error) {
	s, err := p.Pipeline.Struct()
	return ServiceSpec{s}, err
}

type X509KeyPair struct{ capnp.Struct }

// X509KeyPair_TypeID is the unique identifier for the type X509KeyPair.
const X509KeyPair_TypeID = 0xf82cc68ebab66792

func NewX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func NewRootX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func ReadRootX509KeyPair(msg *capnp.Message) (X509KeyPair, error) {
	root, err := msg.RootPtr()
	return X509KeyPair{root.Struct()}, err
}

func (s X509KeyPair) String() string {
	str, _ := text.Marshal(0xf82cc68ebab66792, s.Struct)
	return str
}

func (s X509KeyPair) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s X509KeyPair) Cert() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetCert(v []byte) error {
	return s.Struct.SetData(1, v)
}

// X509KeyPair_List is a list of X509KeyPair.
type X509KeyPair_List struct{ capnp.List }

// NewX509KeyPair creates a new list of X509KeyPair.
func NewX509KeyPair_List(s *capnp.Segment, sz int32) (X509KeyPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return X509KeyPair_List{l}, err
}

func (s X509KeyPair_List) At(i int) X509KeyPair { return X509KeyPair{s.List.Struct(i)} }

func (s X509KeyPair_List) Set(i int, v X509KeyPair) error { return s.List.SetStruct(i, v.Struct) }

func (s X509KeyPair_List) String() string {
	str, _ := text.MarshalList(0xf82cc68ebab66792, s.List)
	return str
}

// X509KeyPair_Promise is a wrapper for a X509KeyPair promised by a client call.
type X509KeyPair_Promise struct{ *capnp.Pipeline }

func (p X509KeyPair_Promise) Struct() (X509KeyPair, error) {
	s, err := p.Pipeline.Struct()
	return X509KeyPair{s}, err
}

const schema_cee75c59b9f2a30b = "x\xda\xa4\x92AH\x14Q\x18\xc7\xff\xff\xf7\xc6V\xc9" +
	"\xc5\x1dv#\xe8\xb2\"uPJ,\x0aj/%\xab" +
	"\x87\xad\x84}\x89`\x11\xd18>mhwv\x1aG" +
	"S2\x88(\x82\x0e\x1e\x0a\xa2[\x87\xa0k\xb7\xa0\xa0" +
	"\x0eB\x1d<t\xec\x10\x1d\x82\x08\xefA\xd1\xa9\x897" +
	"\xba\xb3[\x0aE\xdd\xde\xbc\xf9\xf8\xde\xef\xf7\xfd\xbf!" +
	"\xcd\x13\xe2`GQ\x02jo\xc7\x8e\xf8\xeb\xb7=O" +
	"^\xf5\x95n\xc3\xce2\xde\xf9\xf8\xcb\xf3\xb3\xe7\xd7\xdf" +
	"\xa2Cf\x80\xfc<W\xf3\xd7iNK|\x0a\xc6\x0f" +
	">\x0d~\\\xbe\xf3p\x05*K\xabUl\x99\x8aa" +
	"\xb1\x96\x1f\x13\xe6T\x11\xeb`|x\xf7\xfb\x0f?\x16" +
	"\xae}6\xb5[\x1a\xef\x93\xab\xf9\x03\xc9\xa9_\x9a\xe2" +
	"{\xb3\xcf^\xac\xbc\xd9\xff\xfd7\x88\xa4]\x97\xb5\x96" +
	"\xdf\x95<a[Wq4v\x1b\xfe\x8c7;\xe8\x0a" +
	"'\xf0\x83R\xb9\xe6i?\x1a\x0f\xb4\x8b*\xa9\xba\xa5" +
	"\x05X\x04\xec\xd1)@\x8dH\xaa\xaa\xa0M\x16h." +
	"\xc7\xce\x01\xea\xb4\xa4\x9a\x14\xb4\x85(P\x00\xf6D\xc9" +
	"\x9e(\xaaEIuK0\x9e\xd3\xe1\x82\xe7\xeaqd" +
	"\x02\xed2\xd7r\x06\x99\x03c7y\xb0\xac!\xc3\x88" +
	"\xb9\x16\xf9\xc6\xef\xe3\xaeS\xd6a\xa4,\x8a\xf8\xc2\xfd" +
	"G\xea\xe5\xbb\xbb\xaf\xa1,\xc1\xe1\x02\xd9\x0d\xd8\xbc\x19" +
	"WG\xc7zg\xbc\x9af\xefL#\xac;\x11\x00f" +
	"!\x985\xdd\x7f\x91\x1b\xdfd1v\x89^.\xd5s" +
	"N\x02\xea\xa2\xa4\xaa\xb5\xe9y\x87\x005-\xa9\x826" +
	"\xbd\xfa\x19@\xd5$\xd5\xa2\xa0-\xbb\x0b\x94\x80=?" +
	"\x00\xa8@R-\x0b\xc6\xd3\x8d\xba\xe3\xf9\x95\x11\x03\xd2" +
	"\x05\xc1.\xb0\xe8\x04Ae\xba\xf9\xd5\x1cJ\x05L\xef" +
	"z\x82F\x181\x03\xc1\xcc\xb6\xdc:LCi\xa3\x9e" +
	"\xda\x8e\xda\x84rIREm\xd4WJ-j\xcaM" +
	"h\xe3\x1cI\xaa\x1b\x7f\x91\xd3\\\xc2\xf0\x87\x9c\xd2\xb9" +
	"\xd7\x9d\xc5r\xc3\xf7\xe7\xcc\x08:!\xd8\xb9\xc5i\xf2" +
	"\xc8\xd0\xb1Sz\xa9\xeax\xe1F\x16\x9d\xa9U\x7f\x9f" +
	"\xdd_L\xd7\xaa\xa951\xd0\xb6V\x99\xcbz\xe9_" +
	"\x97\xa2\xc7\xfd\x8f\x8d\xfa\x19\x00\x00\xff\xff=\xcf\xf4\xca"

func init() {
	schemas.Register(schema_cee75c59b9f2a30b,
		0x853a22bea61af6f5,
		0x8e98877ce02ee396,
		0xe57b76fedcda1734,
		0xf82cc68ebab66792)
}
