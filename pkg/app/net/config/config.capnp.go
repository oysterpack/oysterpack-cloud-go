// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ServerSpec struct{ capnp.Struct }

// ServerSpec_TypeID is the unique identifier for the type ServerSpec.
const ServerSpec_TypeID = 0xe57b76fedcda1734

func NewServerSpec(s *capnp.Segment) (ServerSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ServerSpec{st}, err
}

func NewRootServerSpec(s *capnp.Segment) (ServerSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ServerSpec{st}, err
}

func ReadRootServerSpec(msg *capnp.Message) (ServerSpec, error) {
	root, err := msg.RootPtr()
	return ServerSpec{root.Struct()}, err
}

func (s ServerSpec) String() string {
	str, _ := text.Marshal(0xe57b76fedcda1734, s.Struct)
	return str
}

func (s ServerSpec) ServiceSpec() (ServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceSpec{Struct: p.Struct()}, err
}

func (s ServerSpec) HasServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServerSpec) SetServiceSpec(v ServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceSpec sets the serviceSpec field to a newly
// allocated ServiceSpec struct, preferring placement in s's segment.
func (s ServerSpec) NewServiceSpec() (ServiceSpec, error) {
	ss, err := NewServiceSpec(s.Struct.Segment())
	if err != nil {
		return ServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerSpec) ServerCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s ServerSpec) HasServerCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ServerSpec) SetServerCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewServerCert sets the serverCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s ServerSpec) NewServerCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ServerSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ServerSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s ServerSpec) MaxConns() uint32 {
	return s.Struct.Uint32(0) ^ 64
}

func (s ServerSpec) SetMaxConns(v uint32) {
	s.Struct.SetUint32(0, v^64)
}

func (s ServerSpec) KeepAlivePeriodSecs() uint8 {
	return s.Struct.Uint8(4) ^ 15
}

func (s ServerSpec) SetKeepAlivePeriodSecs(v uint8) {
	s.Struct.SetUint8(4, v^15)
}

// ServerSpec_List is a list of ServerSpec.
type ServerSpec_List struct{ capnp.List }

// NewServerSpec creates a new list of ServerSpec.
func NewServerSpec_List(s *capnp.Segment, sz int32) (ServerSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return ServerSpec_List{l}, err
}

func (s ServerSpec_List) At(i int) ServerSpec { return ServerSpec{s.List.Struct(i)} }

func (s ServerSpec_List) Set(i int, v ServerSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s ServerSpec_List) String() string {
	str, _ := text.MarshalList(0xe57b76fedcda1734, s.List)
	return str
}

// ServerSpec_Promise is a wrapper for a ServerSpec promised by a client call.
type ServerSpec_Promise struct{ *capnp.Pipeline }

func (p ServerSpec_Promise) Struct() (ServerSpec, error) {
	s, err := p.Pipeline.Struct()
	return ServerSpec{s}, err
}

func (p ServerSpec_Promise) ServiceSpec() ServiceSpec_Promise {
	return ServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ServerSpec_Promise) ServerCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type ClientSpec struct{ capnp.Struct }

// ClientSpec_TypeID is the unique identifier for the type ClientSpec.
const ClientSpec_TypeID = 0x853a22bea61af6f5

func NewClientSpec(s *capnp.Segment) (ClientSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientSpec{st}, err
}

func NewRootClientSpec(s *capnp.Segment) (ClientSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientSpec{st}, err
}

func ReadRootClientSpec(msg *capnp.Message) (ClientSpec, error) {
	root, err := msg.RootPtr()
	return ClientSpec{root.Struct()}, err
}

func (s ClientSpec) String() string {
	str, _ := text.Marshal(0x853a22bea61af6f5, s.Struct)
	return str
}

func (s ClientSpec) ServiceSpec() (ServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceSpec{Struct: p.Struct()}, err
}

func (s ClientSpec) HasServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ClientSpec) SetServiceSpec(v ServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceSpec sets the serviceSpec field to a newly
// allocated ServiceSpec struct, preferring placement in s's segment.
func (s ClientSpec) NewServiceSpec() (ServiceSpec, error) {
	ss, err := NewServiceSpec(s.Struct.Segment())
	if err != nil {
		return ServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ClientSpec) ClientCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s ClientSpec) HasClientCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ClientSpec) SetClientCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewClientCert sets the clientCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s ClientSpec) NewClientCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ClientSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ClientSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ClientSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

// ClientSpec_List is a list of ClientSpec.
type ClientSpec_List struct{ capnp.List }

// NewClientSpec creates a new list of ClientSpec.
func NewClientSpec_List(s *capnp.Segment, sz int32) (ClientSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ClientSpec_List{l}, err
}

func (s ClientSpec_List) At(i int) ClientSpec { return ClientSpec{s.List.Struct(i)} }

func (s ClientSpec_List) Set(i int, v ClientSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s ClientSpec_List) String() string {
	str, _ := text.MarshalList(0x853a22bea61af6f5, s.List)
	return str
}

// ClientSpec_Promise is a wrapper for a ClientSpec promised by a client call.
type ClientSpec_Promise struct{ *capnp.Pipeline }

func (p ClientSpec_Promise) Struct() (ClientSpec, error) {
	s, err := p.Pipeline.Struct()
	return ClientSpec{s}, err
}

func (p ClientSpec_Promise) ServiceSpec() ServiceSpec_Promise {
	return ServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ClientSpec_Promise) ClientCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type ServiceSpec struct{ capnp.Struct }

// ServiceSpec_TypeID is the unique identifier for the type ServiceSpec.
const ServiceSpec_TypeID = 0x8e98877ce02ee396

func NewServiceSpec(s *capnp.Segment) (ServiceSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return ServiceSpec{st}, err
}

func NewRootServiceSpec(s *capnp.Segment) (ServiceSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return ServiceSpec{st}, err
}

func ReadRootServiceSpec(msg *capnp.Message) (ServiceSpec, error) {
	root, err := msg.RootPtr()
	return ServiceSpec{root.Struct()}, err
}

func (s ServiceSpec) String() string {
	str, _ := text.Marshal(0x8e98877ce02ee396, s.Struct)
	return str
}

func (s ServiceSpec) DomainID() uint64 {
	return s.Struct.Uint64(0)
}

func (s ServiceSpec) SetDomainID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ServiceSpec) AppId() uint64 {
	return s.Struct.Uint64(8)
}

func (s ServiceSpec) SetAppId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s ServiceSpec) ServiceId() uint64 {
	return s.Struct.Uint64(16)
}

func (s ServiceSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s ServiceSpec) Port() uint16 {
	return s.Struct.Uint16(24)
}

func (s ServiceSpec) SetPort(v uint16) {
	s.Struct.SetUint16(24, v)
}

// ServiceSpec_List is a list of ServiceSpec.
type ServiceSpec_List struct{ capnp.List }

// NewServiceSpec creates a new list of ServiceSpec.
func NewServiceSpec_List(s *capnp.Segment, sz int32) (ServiceSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return ServiceSpec_List{l}, err
}

func (s ServiceSpec_List) At(i int) ServiceSpec { return ServiceSpec{s.List.Struct(i)} }

func (s ServiceSpec_List) Set(i int, v ServiceSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s ServiceSpec_List) String() string {
	str, _ := text.MarshalList(0x8e98877ce02ee396, s.List)
	return str
}

// ServiceSpec_Promise is a wrapper for a ServiceSpec promised by a client call.
type ServiceSpec_Promise struct{ *capnp.Pipeline }

func (p ServiceSpec_Promise) Struct() (ServiceSpec, error) {
	s, err := p.Pipeline.Struct()
	return ServiceSpec{s}, err
}

type X509KeyPair struct{ capnp.Struct }

// X509KeyPair_TypeID is the unique identifier for the type X509KeyPair.
const X509KeyPair_TypeID = 0xf82cc68ebab66792

func NewX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func NewRootX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func ReadRootX509KeyPair(msg *capnp.Message) (X509KeyPair, error) {
	root, err := msg.RootPtr()
	return X509KeyPair{root.Struct()}, err
}

func (s X509KeyPair) String() string {
	str, _ := text.Marshal(0xf82cc68ebab66792, s.Struct)
	return str
}

func (s X509KeyPair) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s X509KeyPair) Cert() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetCert(v []byte) error {
	return s.Struct.SetData(1, v)
}

// X509KeyPair_List is a list of X509KeyPair.
type X509KeyPair_List struct{ capnp.List }

// NewX509KeyPair creates a new list of X509KeyPair.
func NewX509KeyPair_List(s *capnp.Segment, sz int32) (X509KeyPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return X509KeyPair_List{l}, err
}

func (s X509KeyPair_List) At(i int) X509KeyPair { return X509KeyPair{s.List.Struct(i)} }

func (s X509KeyPair_List) Set(i int, v X509KeyPair) error { return s.List.SetStruct(i, v.Struct) }

func (s X509KeyPair_List) String() string {
	str, _ := text.MarshalList(0xf82cc68ebab66792, s.List)
	return str
}

// X509KeyPair_Promise is a wrapper for a X509KeyPair promised by a client call.
type X509KeyPair_Promise struct{ *capnp.Pipeline }

func (p X509KeyPair_Promise) Struct() (X509KeyPair, error) {
	s, err := p.Pipeline.Struct()
	return X509KeyPair{s}, err
}

const schema_cee75c59b9f2a30b = "x\xda\xa4\x92Mh\x13_\x14\xc5\xefyo\xd2\xb4\xfc" +
	"\x1b\x9aG\x06\xfe\xe0&\xa5\xe8\xa2EK\xfd\x02\xcd\xc6" +
	"\x96\xb4\x8b\xa8\x81\\C\xa0\x15\x11\xc7\xc9k\x19\x9a\x8f" +
	"a\x92\xc6\x16\xdb\x8d\xb4X\x04K\xfd@\x14\x0a\x82\x82" +
	"\xb8s'(\xe8\xa2\xa0\x8b.\\\xba\x10\x17\x82H\xf7" +
	"\x82\xe2\xca\x91I\xed$ZA\xd1\xdd\x9d7\x97{\x7f" +
	"\xe7\x9c;\xd4\xc0\xb0\xd8\x1fIJ\"\xde\x1d\xe9\xf0?" +
	"}\xde\xf5\xe0y_j\x89T\x0c\xfe\x7f\xf7?>\x99" +
	"8\xb3\xf9\x8a\"2J\x94\x98\xc1zb\x01A5\x87" +
	"G\x04\xff\xd6\xfb\xc1w\xf3\x97o\xaf\x10\xc7`\xb4\x9a" +
	"\x8d\xa0cDl$\xb2\"\xa82b\x93\xe0\x1f\xfa\xff" +
	"\xcd\xdb\xaf\x8d\x8b\x1f\x82\xde\x1d\x83\xf7\xc8\xf5\xc4\xbe\xa0" +
	":\xd8/\x93 \xf8\xd7\xa7\x1e?]y\xb9\xf7\xcbO" +
	"\x14\xcdyYc#1\xd1\xdcQ0.\xd0\x11\xdf\xae" +
	"V&\x9d\xa9A[Xn\xc5M\xa5K\x8e\xae\xd4\xf3" +
	"\xae\xb6)\x07p\xb74\x88\x0c\x10\xa9\xb1\xf3D<*" +
	"\xc19\x01\x05\x98\x08\x1e\xb3\xa7\x89\xf8\xa4\x04\x8f\x0b(" +
	"!L\x08\"UH\xa9B\x92g%xQ\xc0\xafi" +
	"\xaf\xe1\xd8:OQW\xdb\x88\xb7D\x13\x10'\xf8v" +
	"saZ\x93\xf4\xea\x88\xb7\xc8\xb7~\x1f\xb3\xad\xb4\xf6" +
	"\xeal@\xf8go\xdc\xe5g\xaf\xaf\xbc 6\x04F" +
	"L\xa0\x9bH\xe1\x92\x9f\x1b\xcb\xf6N:%\x8d\xde\xc9" +
	"\xaaW\xb6\xeaD\x84\x18\x09\xc4\x82\xe9?\x88\xcb\x7fg" +
	"\x09\xd45\xe5\xc5Cy\xd6q\">'\xc1\xa56y" +
	"\xce\x01\".J\xb0\xdb&\xaf|\x8a\x88K\x12<+" +
	"\xa0d\xb7\x09I\xa4f\x06\x88\xd8\x95\xe0y\x01\xbfX" +
	"-[N%3\x1a\x80t\x91@\x17!i\xb9n\xa6" +
	"\xb8\xfd\xb5mJ\x86\x10\xbe\xf5\xb8U\xaf\x8e(\x09D" +
	"\x7f\xc9\xad\xbd0\x143\xa4^\x08B\x99\x97\xe0\xe56" +
	"\xea\xa5 \x94E\x09^m\xa3\xbe\x9a\"\xe2e\x09\xbe" +
	")\x00iB\x02\xeaZ\xa0yU\x82\xd7\x04\x94a\x98" +
	"0\x00u\xe7\x1e\x11\xafI\xf0\xc3?\x08\xaf\xd6\x04\xfb" +
	"Mxa\x18ek6]\xadTj\x81/\x9d$T" +
	"\xe70\xc1\x9f\xd6\xda\x1d)9\x0d\xe8\x9c\xf6\x9cj1" +
	"\x1f\xd5v\x0d\x1d$\"\x1d=;\x8c\x18?<t\xf4" +
	"\x84\x9e\xcbY\x8e\xb7\x15`ghE\x7f\x9f\xeaO\x86" +
	"\xb7\xb8\xedEa\xa0\xed\x16\xa3\xd3z\xeeo/\xa9\xc7" +
	"\xfe\x873\xfc\x16\x00\x00\xff\xff\x1b\xd9\x02\xd4"

func init() {
	schemas.Register(schema_cee75c59b9f2a30b,
		0x853a22bea61af6f5,
		0x8e98877ce02ee396,
		0xe57b76fedcda1734,
		0xf82cc68ebab66792)
}
