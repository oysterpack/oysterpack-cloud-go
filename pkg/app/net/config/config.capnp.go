// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ServerSpec struct{ capnp.Struct }

// ServerSpec_TypeID is the unique identifier for the type ServerSpec.
const ServerSpec_TypeID = 0xe57b76fedcda1734

func NewServerSpec(s *capnp.Segment) (ServerSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return ServerSpec{st}, err
}

func NewRootServerSpec(s *capnp.Segment) (ServerSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return ServerSpec{st}, err
}

func ReadRootServerSpec(msg *capnp.Message) (ServerSpec, error) {
	root, err := msg.RootPtr()
	return ServerSpec{root.Struct()}, err
}

func (s ServerSpec) String() string {
	str, _ := text.Marshal(0xe57b76fedcda1734, s.Struct)
	return str
}

func (s ServerSpec) ServiceSpec() (ServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceSpec{Struct: p.Struct()}, err
}

func (s ServerSpec) HasServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServerSpec) SetServiceSpec(v ServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceSpec sets the serviceSpec field to a newly
// allocated ServiceSpec struct, preferring placement in s's segment.
func (s ServerSpec) NewServiceSpec() (ServiceSpec, error) {
	ss, err := NewServiceSpec(s.Struct.Segment())
	if err != nil {
		return ServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerSpec) ServerCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s ServerSpec) HasServerCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ServerSpec) SetServerCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewServerCert sets the serverCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s ServerSpec) NewServerCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ServerSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ServerSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ServerSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s ServerSpec) MaxConns() uint32 {
	return s.Struct.Uint32(0) ^ 64
}

func (s ServerSpec) SetMaxConns(v uint32) {
	s.Struct.SetUint32(0, v^64)
}

func (s ServerSpec) KeepAlivePeriodSecs() uint8 {
	return s.Struct.Uint8(4) ^ 15
}

func (s ServerSpec) SetKeepAlivePeriodSecs(v uint8) {
	s.Struct.SetUint8(4, v^15)
}

func (s ServerSpec) ReadDeadlineMSec() uint32 {
	return s.Struct.Uint32(8)
}

func (s ServerSpec) SetReadDeadlineMSec(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s ServerSpec) WriteDeadlineMSec() uint32 {
	return s.Struct.Uint32(12)
}

func (s ServerSpec) SetWriteDeadlineMSec(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s ServerSpec) ReadBufferSize() uint32 {
	return s.Struct.Uint32(16)
}

func (s ServerSpec) SetReadBufferSize(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s ServerSpec) WriteBufferSize() uint32 {
	return s.Struct.Uint32(20)
}

func (s ServerSpec) SetWriteBufferSize(v uint32) {
	s.Struct.SetUint32(20, v)
}

// ServerSpec_List is a list of ServerSpec.
type ServerSpec_List struct{ capnp.List }

// NewServerSpec creates a new list of ServerSpec.
func NewServerSpec_List(s *capnp.Segment, sz int32) (ServerSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return ServerSpec_List{l}, err
}

func (s ServerSpec_List) At(i int) ServerSpec { return ServerSpec{s.List.Struct(i)} }

func (s ServerSpec_List) Set(i int, v ServerSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s ServerSpec_List) String() string {
	str, _ := text.MarshalList(0xe57b76fedcda1734, s.List)
	return str
}

// ServerSpec_Promise is a wrapper for a ServerSpec promised by a client call.
type ServerSpec_Promise struct{ *capnp.Pipeline }

func (p ServerSpec_Promise) Struct() (ServerSpec, error) {
	s, err := p.Pipeline.Struct()
	return ServerSpec{s}, err
}

func (p ServerSpec_Promise) ServiceSpec() ServiceSpec_Promise {
	return ServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ServerSpec_Promise) ServerCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type ClientSpec struct{ capnp.Struct }

// ClientSpec_TypeID is the unique identifier for the type ClientSpec.
const ClientSpec_TypeID = 0x853a22bea61af6f5

func NewClientSpec(s *capnp.Segment) (ClientSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientSpec{st}, err
}

func NewRootClientSpec(s *capnp.Segment) (ClientSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientSpec{st}, err
}

func ReadRootClientSpec(msg *capnp.Message) (ClientSpec, error) {
	root, err := msg.RootPtr()
	return ClientSpec{root.Struct()}, err
}

func (s ClientSpec) String() string {
	str, _ := text.Marshal(0x853a22bea61af6f5, s.Struct)
	return str
}

func (s ClientSpec) ServiceSpec() (ServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceSpec{Struct: p.Struct()}, err
}

func (s ClientSpec) HasServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ClientSpec) SetServiceSpec(v ServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceSpec sets the serviceSpec field to a newly
// allocated ServiceSpec struct, preferring placement in s's segment.
func (s ClientSpec) NewServiceSpec() (ServiceSpec, error) {
	ss, err := NewServiceSpec(s.Struct.Segment())
	if err != nil {
		return ServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ClientSpec) ClientCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s ClientSpec) HasClientCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ClientSpec) SetClientCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewClientCert sets the clientCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s ClientSpec) NewClientCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ClientSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ClientSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ClientSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

// ClientSpec_List is a list of ClientSpec.
type ClientSpec_List struct{ capnp.List }

// NewClientSpec creates a new list of ClientSpec.
func NewClientSpec_List(s *capnp.Segment, sz int32) (ClientSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ClientSpec_List{l}, err
}

func (s ClientSpec_List) At(i int) ClientSpec { return ClientSpec{s.List.Struct(i)} }

func (s ClientSpec_List) Set(i int, v ClientSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s ClientSpec_List) String() string {
	str, _ := text.MarshalList(0x853a22bea61af6f5, s.List)
	return str
}

// ClientSpec_Promise is a wrapper for a ClientSpec promised by a client call.
type ClientSpec_Promise struct{ *capnp.Pipeline }

func (p ClientSpec_Promise) Struct() (ClientSpec, error) {
	s, err := p.Pipeline.Struct()
	return ClientSpec{s}, err
}

func (p ClientSpec_Promise) ServiceSpec() ServiceSpec_Promise {
	return ServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ClientSpec_Promise) ClientCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type ServiceSpec struct{ capnp.Struct }

// ServiceSpec_TypeID is the unique identifier for the type ServiceSpec.
const ServiceSpec_TypeID = 0x8e98877ce02ee396

func NewServiceSpec(s *capnp.Segment) (ServiceSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return ServiceSpec{st}, err
}

func NewRootServiceSpec(s *capnp.Segment) (ServiceSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return ServiceSpec{st}, err
}

func ReadRootServiceSpec(msg *capnp.Message) (ServiceSpec, error) {
	root, err := msg.RootPtr()
	return ServiceSpec{root.Struct()}, err
}

func (s ServiceSpec) String() string {
	str, _ := text.Marshal(0x8e98877ce02ee396, s.Struct)
	return str
}

func (s ServiceSpec) DomainID() uint64 {
	return s.Struct.Uint64(0)
}

func (s ServiceSpec) SetDomainID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ServiceSpec) AppId() uint64 {
	return s.Struct.Uint64(8)
}

func (s ServiceSpec) SetAppId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s ServiceSpec) ServiceId() uint64 {
	return s.Struct.Uint64(16)
}

func (s ServiceSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s ServiceSpec) Port() uint16 {
	return s.Struct.Uint16(24)
}

func (s ServiceSpec) SetPort(v uint16) {
	s.Struct.SetUint16(24, v)
}

// ServiceSpec_List is a list of ServiceSpec.
type ServiceSpec_List struct{ capnp.List }

// NewServiceSpec creates a new list of ServiceSpec.
func NewServiceSpec_List(s *capnp.Segment, sz int32) (ServiceSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return ServiceSpec_List{l}, err
}

func (s ServiceSpec_List) At(i int) ServiceSpec { return ServiceSpec{s.List.Struct(i)} }

func (s ServiceSpec_List) Set(i int, v ServiceSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s ServiceSpec_List) String() string {
	str, _ := text.MarshalList(0x8e98877ce02ee396, s.List)
	return str
}

// ServiceSpec_Promise is a wrapper for a ServiceSpec promised by a client call.
type ServiceSpec_Promise struct{ *capnp.Pipeline }

func (p ServiceSpec_Promise) Struct() (ServiceSpec, error) {
	s, err := p.Pipeline.Struct()
	return ServiceSpec{s}, err
}

type X509KeyPair struct{ capnp.Struct }

// X509KeyPair_TypeID is the unique identifier for the type X509KeyPair.
const X509KeyPair_TypeID = 0xf82cc68ebab66792

func NewX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func NewRootX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func ReadRootX509KeyPair(msg *capnp.Message) (X509KeyPair, error) {
	root, err := msg.RootPtr()
	return X509KeyPair{root.Struct()}, err
}

func (s X509KeyPair) String() string {
	str, _ := text.Marshal(0xf82cc68ebab66792, s.Struct)
	return str
}

func (s X509KeyPair) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s X509KeyPair) Cert() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetCert(v []byte) error {
	return s.Struct.SetData(1, v)
}

// X509KeyPair_List is a list of X509KeyPair.
type X509KeyPair_List struct{ capnp.List }

// NewX509KeyPair creates a new list of X509KeyPair.
func NewX509KeyPair_List(s *capnp.Segment, sz int32) (X509KeyPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return X509KeyPair_List{l}, err
}

func (s X509KeyPair_List) At(i int) X509KeyPair { return X509KeyPair{s.List.Struct(i)} }

func (s X509KeyPair_List) Set(i int, v X509KeyPair) error { return s.List.SetStruct(i, v.Struct) }

func (s X509KeyPair_List) String() string {
	str, _ := text.MarshalList(0xf82cc68ebab66792, s.List)
	return str
}

// X509KeyPair_Promise is a wrapper for a X509KeyPair promised by a client call.
type X509KeyPair_Promise struct{ *capnp.Pipeline }

func (p X509KeyPair_Promise) Struct() (X509KeyPair, error) {
	s, err := p.Pipeline.Struct()
	return X509KeyPair{s}, err
}

const schema_cee75c59b9f2a30b = "x\xda\xa4SO\x88\x1bU\x1c\xfe\xbe\xf7f\x92,&" +
	"l\x86\x19\xb1xI-\xf1\xb0\xa5-\xab\xb6Ps\xe9" +
	"n\x93\x1eR\x0d\xe4\xed\x10\xa8\xa2\xe28y)C\xf3" +
	"g\x98$\xdb\xddZ/E\x11z\xe8\xa1\x82x\x13\x14" +
	"\xbcz\x13\x15\xf4P\xd0C\x0f\x1e=\x88\x07Ad/" +
	"z\x11W\xf6\xa2#/\xbb;\xc9.\x82\xa2\xb7\xdf|" +
	"\xbf?\xf3}\xef\xfb\xfdV?\xe5\x9ax\xca\xaeH@" +
	"U\xed\\\xba\xfb\xfb\xe3\x1f}y\xaa\xf6\x16\x9c\x12\xd3" +
	"G>\xfc\xf5\xb3\x17^\xda\xf9\x06\xb6\xcc\x03\xee\x94\x0f" +
	"\xdc7h\xa2m~\x0c\xa6\xef\xfex\xee\x87\xdbo\xbf" +
	"w\x0f\xaaDk^l\x99\x8au\xf1\xd0m\x09\x135" +
	"\xc5\x0e\x98\x9e\x7f\xec\xbb\xef\xff\xdc|\xfd'S+\x8f" +
	"\x0f~R>p\xcf\x9a\xe8\x99\x15\x99\x12L\xef_\xff" +
	"\xe4\xf3{_\x9f\xd9;\xc6b6\xafc?t\x03\xdb" +
	"D/\xdb7q1\x0dG\xc3^t\xfd\\(\x82x" +
	"\x18\xd7\xea\xfdH\x0f'~\xacC\xb4IU\x94\x16`" +
	"\x11p\xae\xbc\x06\xa8\x86\xa4j\x0b:\xa4G\x03\xb6^" +
	"\x04\xd4\xf3\x92\xea\x9a\xa0#\x84G\x018\x9d\x9a\xd3\xa9" +
	"\xa8-I\xf5\xa6`:\xd6\xc9f\x14j\x1f\xf9X\x87" +
	",\xcfE\x83,\x83i8\xfba]C&\x13\x96\xe7" +
	"\xcc\xf7\xd3\x97\xc2\xa0\xae\x93\x89\xb2(\xd2W\xdey_" +
	"}\xf1\xed\xdd\xaf\xa0,\xc1u\x8f,\x02\x0e\xef\xa4\xed" +
	"+\xad\x93\xbd\xa8\xafy\xb27J\x06\xc1\x04\x00K\x10" +
	",\x99\xe9G\xc4\xf9\x07\\\x8c\xba\x99\xbcr&/\xb8" +
	"\x0a\xa8W%U\x7fA^\xf44\xa0\xba\x92*^\x90" +
	"7\xd8\x00T_Rm\x09:\xb2\xe8Q\x02\xce\xf44" +
	"\xa0bIu[0\xed\x8e\x06A4l6\x0c\x91%" +
	"\x08.\x81\x95 \x8e\x9b\xdd\xc3\xaf\xc3Gi\x82\x19\xb6" +
	"\x1c\x8f\x92\x09\xf3\x10\xcc\xff-o\x9dd\xa6T3\xd6" +
	"\xbf\x18S~\x96T{\x0b\xacw\x8d)\xbfInp" +
	"\x81\xf5\x1f5@\xedI\xfa\x16\x05)=J\xd2%\xaf" +
	"\x02\x1b\x94\xf4\x8b\xa6\xd6\xb2<Z\xa4\xbb\xc4\x0f\x00\xbf" +
	"h\xf0\x13\x06\xb7\x85G\x1bp\x1f\xe5]\xc0?a\xf0" +
	"\xaa\xc1s\xd2c\x0ep\x9f\xe0}\xc0\xaf\x1a|\xd5\xe0" +
	"y\xcb\x9bm\xf9Y\xde\x02\xfc3\x06\xbfh\xf0\x82\xed" +
	"\xb1\x00\xb8\x17x\x07\xf0\xcf\x1b|\x8d\xffbE\xc63" +
	"\xf9\xff\xb0\"\x99\xe5\x83`\xab>\x1a\x0e\xc7\xe6\xf5\x0b" +
	"\x10Na\x0dLoh\x1d\xaf\xf7\xa3M\xea\xb6N\xa2" +
	"Q\xd7\xcf\xebp\xcc\x1c\x84\x9d[\x06\xd3D\x07\xdd\x86" +
	"\x0e\xba\xecGC\xdd\xf2\xcdz\x98^\x16\xc0\xf4f\x12" +
	"MtC\x07\xec\x1e$\x19f9\xd3wy\xda\xeb\xe1" +
	"\x92N\xfc\xe8\x96>\xdaty\xdaco?1\x1fw" +
	"\xd4\xd9k\x17V\x9f}No\xb7\x83(\xd9\xdf\xc8B" +
	"\xe6\xed\xca)g\xa5\x92\x1d\xd7\xa1\xb9\x9d\xd3\x0b\xc7\x95" +
	"\xbf\xa1\xb7\xff\xebi,\x87\xff\xe3\xae\xfe\x0a\x00\x00\xff" +
	"\xff\xf1\xea'\xce"

func init() {
	schemas.Register(schema_cee75c59b9f2a30b,
		0x853a22bea61af6f5,
		0x8e98877ce02ee396,
		0xe57b76fedcda1734,
		0xf82cc68ebab66792)
}
