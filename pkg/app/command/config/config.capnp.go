// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Pipeline struct{ capnp.Struct }

// Pipeline_TypeID is the unique identifier for the type Pipeline.
const Pipeline_TypeID = 0xfb501e5c22fbcd92

func NewPipeline(s *capnp.Segment) (Pipeline, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Pipeline{st}, err
}

func NewRootPipeline(s *capnp.Segment) (Pipeline, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Pipeline{st}, err
}

func ReadRootPipeline(msg *capnp.Message) (Pipeline, error) {
	root, err := msg.RootPtr()
	return Pipeline{root.Struct()}, err
}

func (s Pipeline) String() string {
	str, _ := text.Marshal(0xfb501e5c22fbcd92, s.Struct)
	return str
}

func (s Pipeline) ServiceID() uint64 {
	return s.Struct.Uint64(0)
}

func (s Pipeline) SetServiceID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Pipeline) Stages() (Pipeline_Stage_List, error) {
	p, err := s.Struct.Ptr(0)
	return Pipeline_Stage_List{List: p.List()}, err
}

func (s Pipeline) HasStages() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Pipeline) SetStages(v Pipeline_Stage_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewStages sets the stages field to a newly
// allocated Pipeline_Stage_List, preferring placement in s's segment.
func (s Pipeline) NewStages(n int32) (Pipeline_Stage_List, error) {
	l, err := NewPipeline_Stage_List(s.Struct.Segment(), n)
	if err != nil {
		return Pipeline_Stage_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Pipeline_List is a list of Pipeline.
type Pipeline_List struct{ capnp.List }

// NewPipeline creates a new list of Pipeline.
func NewPipeline_List(s *capnp.Segment, sz int32) (Pipeline_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Pipeline_List{l}, err
}

func (s Pipeline_List) At(i int) Pipeline { return Pipeline{s.List.Struct(i)} }

func (s Pipeline_List) Set(i int, v Pipeline) error { return s.List.SetStruct(i, v.Struct) }

func (s Pipeline_List) String() string {
	str, _ := text.MarshalList(0xfb501e5c22fbcd92, s.List)
	return str
}

// Pipeline_Promise is a wrapper for a Pipeline promised by a client call.
type Pipeline_Promise struct{ *capnp.Pipeline }

func (p Pipeline_Promise) Struct() (Pipeline, error) {
	s, err := p.Pipeline.Struct()
	return Pipeline{s}, err
}

type Pipeline_Stage struct{ capnp.Struct }

// Pipeline_Stage_TypeID is the unique identifier for the type Pipeline_Stage.
const Pipeline_Stage_TypeID = 0xa3e64eb06ea97afb

func NewPipeline_Stage(s *capnp.Segment) (Pipeline_Stage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Pipeline_Stage{st}, err
}

func NewRootPipeline_Stage(s *capnp.Segment) (Pipeline_Stage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Pipeline_Stage{st}, err
}

func ReadRootPipeline_Stage(msg *capnp.Message) (Pipeline_Stage, error) {
	root, err := msg.RootPtr()
	return Pipeline_Stage{root.Struct()}, err
}

func (s Pipeline_Stage) String() string {
	str, _ := text.Marshal(0xa3e64eb06ea97afb, s.Struct)
	return str
}

func (s Pipeline_Stage) CommandID() uint64 {
	return s.Struct.Uint64(0)
}

func (s Pipeline_Stage) SetCommandID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Pipeline_Stage) PoolSize() uint8 {
	return s.Struct.Uint8(8)
}

func (s Pipeline_Stage) SetPoolSize(v uint8) {
	s.Struct.SetUint8(8, v)
}

// Pipeline_Stage_List is a list of Pipeline_Stage.
type Pipeline_Stage_List struct{ capnp.List }

// NewPipeline_Stage creates a new list of Pipeline_Stage.
func NewPipeline_Stage_List(s *capnp.Segment, sz int32) (Pipeline_Stage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Pipeline_Stage_List{l}, err
}

func (s Pipeline_Stage_List) At(i int) Pipeline_Stage { return Pipeline_Stage{s.List.Struct(i)} }

func (s Pipeline_Stage_List) Set(i int, v Pipeline_Stage) error { return s.List.SetStruct(i, v.Struct) }

func (s Pipeline_Stage_List) String() string {
	str, _ := text.MarshalList(0xa3e64eb06ea97afb, s.List)
	return str
}

// Pipeline_Stage_Promise is a wrapper for a Pipeline_Stage promised by a client call.
type Pipeline_Stage_Promise struct{ *capnp.Pipeline }

func (p Pipeline_Stage_Promise) Struct() (Pipeline_Stage, error) {
	s, err := p.Pipeline.Struct()
	return Pipeline_Stage{s}, err
}

const schema_ac5630c48ddf1619 = "x\xdat\x8f\xbfJ\xc3P\x14\x87\x7f\xbf\x9b\xb4i\x07" +
	"\xa5!\xd2\xeab\xc1IAK+NE\xd0\xc1A\x1d" +
	"$\xd7\x80\x93\x0e!^C\xa0\xf9\x83)\x16\xfa\x0e." +
	".>\x80\x93\xe0 >\x83\xab\xcf 8\xb8;J\x90" +
	"+\x115.N\x07\xbe\x03\xe7\xfbN\xebz[\x0cj" +
	"\x1d\x01\xc8\xf9Z]\x17\xd3\xdb\xe4\xfe\xe0\xf5\x06\xb2M" +
	"\xa1\xaf\x9e\x8a\xa5\xe3E\xb7\x80i\x01\xf6\xdb\x8b\xfdQ" +
	"\xce\xf7\x09X\xad\xe4\x0c\xa9\x17\xda\xcf\x97\x8f\xfd\xa3;" +
	"\xd4h\x01\xce\x09\x1f\x1c\xc5\x0e\xe0\xc4\x9c`M\x07i" +
	"r\x16\x85\xbd@\xf8Y\x92\x0d\xdd(S\xa3(Q=" +
	"ol\xf9\xa1rI\xd90L\xc0$`\xaf\x1c\x02r" +
	"\xd9\xa0\xdc\x10\xb4\xd9\x98c\x09\x07\xfb\x80\xec\x1b\x94\x9b" +
	"\x82:H\xe3\xd8ON\xf7\xc0\x1d6!\xd8\x04u\x96" +
	"\xa6#/\x9a*\x00\xacC\xb0\x0e\xfeJ\xf9#\xed~" +
	"Y\xa5IVo\xda\\\xefzc?T\xff$\x90\xdf" +
	"\x05C@\xae\x1a\x94\xbb\x82:W\xe7\x17Q\xa0\xfe\x16" +
	"l\xe5\xe5\x91\x9c\xb3\xa0k\x90\xad\xca\x00\x96\xf03\x00" +
	"\x00\xff\xff\xe0*Z\xf4"

func init() {
	schemas.Register(schema_ac5630c48ddf1619,
		0xa3e64eb06ea97afb,
		0xfb501e5c22fbcd92)
}
