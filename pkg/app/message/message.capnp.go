// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Message struct{ capnp.Struct }

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xc768aaf640842a35

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xc768aaf640842a35, s.Struct)
	return str
}

func (s Message) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s Message) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Message) Type() uint64 {
	return s.Struct.Uint64(8)
}

func (s Message) SetType(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Message) CorrelationID() uint64 {
	return s.Struct.Uint64(16)
}

func (s Message) SetCorrelationID(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s Message) Timestamp() uint64 {
	return s.Struct.Uint64(24)
}

func (s Message) SetTimestamp(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s Message) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Message) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xc768aaf640842a35, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

type Ping struct{ capnp.Struct }

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0x9bce611bc724ff89

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping{st}, err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping{st}, err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.RootPtr()
	return Ping{root.Struct()}, err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0x9bce611bc724ff89, s.Struct)
	return str
}

// Ping_List is a list of Ping.
type Ping_List struct{ capnp.List }

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Ping_List{l}, err
}

func (s Ping_List) At(i int) Ping { return Ping{s.List.Struct(i)} }

func (s Ping_List) Set(i int, v Ping) error { return s.List.SetStruct(i, v.Struct) }

func (s Ping_List) String() string {
	str, _ := text.MarshalList(0x9bce611bc724ff89, s.List)
	return str
}

// Ping_Promise is a wrapper for a Ping promised by a client call.
type Ping_Promise struct{ *capnp.Pipeline }

func (p Ping_Promise) Struct() (Ping, error) {
	s, err := p.Pipeline.Struct()
	return Ping{s}, err
}

type Pong struct{ capnp.Struct }

// Pong_TypeID is the unique identifier for the type Pong.
const Pong_TypeID = 0xf6486a286fedf2f6

func NewPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pong{st}, err
}

func NewRootPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pong{st}, err
}

func ReadRootPong(msg *capnp.Message) (Pong, error) {
	root, err := msg.RootPtr()
	return Pong{root.Struct()}, err
}

func (s Pong) String() string {
	str, _ := text.Marshal(0xf6486a286fedf2f6, s.Struct)
	return str
}

// Pong_List is a list of Pong.
type Pong_List struct{ capnp.List }

// NewPong creates a new list of Pong.
func NewPong_List(s *capnp.Segment, sz int32) (Pong_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Pong_List{l}, err
}

func (s Pong_List) At(i int) Pong { return Pong{s.List.Struct(i)} }

func (s Pong_List) Set(i int, v Pong) error { return s.List.SetStruct(i, v.Struct) }

func (s Pong_List) String() string {
	str, _ := text.MarshalList(0xf6486a286fedf2f6, s.List)
	return str
}

// Pong_Promise is a wrapper for a Pong promised by a client call.
type Pong_Promise struct{ *capnp.Pipeline }

func (p Pong_Promise) Struct() (Pong, error) {
	s, err := p.Pipeline.Struct()
	return Pong{s}, err
}

const schema_aa44738dedfed9a1 = "x\xdal\x8f1K\xeb`\x18\x85\xcfy\xbf\xe4\x96\x0e" +
	"\xed\xbd\x1f\xc9tU\xbaX\x90\x0e\x8a\x88\x8bS\x87\x0e" +
	":\x08\xf9\xfc\x07\xa1\x0d5b\x9b\xd0dP\xd0A\xa8" +
	"\xa0`\xa1\x8b \xd5\xc5\xb5n\xfe\x89n\xee\xfe\x88." +
	"\x0e\x1d\x8dD\xb1\x82\xba\xbd\xe7\xe1\x9c\x17\x9e\x7f\x0fu" +
	"Y\xb7#\x01\xcc\xa2\xfd'\xbb\xcc\x96'\x0b\xfe\xd3-" +
	"t\x99\xd9\xfd\xf3\xebt\x904\xc6\xb0\x0a\x80\xb3\xc4\x91" +
	"Se\x01*\xdb\xac\xf5\xeb\xb3\xf1\xfe\x04\xa6L\xeb\xab" +
	"e3\xaf\x91\x8fN1\xbf6lV\x08f\xb3\x97i" +
	"\xb4r\xb0=\xfb\xed\xa5\x8c\x9c\xaa\x14\xb0\x96u\x82$" +
	"\xf1\xdb\xc1*\x9b~\xdc\x8d\xb7\xbcPu\xdb\x1e\xf9\x9d" +
	"\xef\x06\x95\xf7\xec\x91\xc6U\x16`\x11\xd0\xa7\xff\x01s" +
	"\xa4h\xfaBM\xba\xcc\xe1Y\x0d0'\x8a\xe6B\xa8" +
	"E\\\x0a\xa0\xcf{\x80\xe9+\x9a\xa1P+\xe5R\x01" +
	"z\xb0\x07\x98+Es#\xa4\xe5\xd2\x02\xf4u\xbe\x1e" +
	"*\x9a;\xa1\x0a[,BX\x04\xff\xa6\xc7q\xf0\x19" +
	"\xb2f\xd4\xeb\x05\x87~\x8aJ\x18uw\x1as\x9e\x86" +
	"\x9d I\xfd\x0e\x18\xcf\x87-?\xf5Y\x82\xb0\x84\x1f" +
	"V^\xf4a\xfb\x16\x00\x00\xff\xff\xc5\xd7a\xb9"

func init() {
	schemas.Register(schema_aa44738dedfed9a1,
		0x9bce611bc724ff89,
		0xc768aaf640842a35,
		0xf6486a286fedf2f6)
}
