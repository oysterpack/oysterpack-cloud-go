// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Message struct{ capnp.Struct }

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xc768aaf640842a35

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xc768aaf640842a35, s.Struct)
	return str
}

func (s Message) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s Message) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Message) Type() uint64 {
	return s.Struct.Uint64(8)
}

func (s Message) SetType(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Message) CorrelationID() uint64 {
	return s.Struct.Uint64(16)
}

func (s Message) SetCorrelationID(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s Message) Timestamp() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s Message) SetTimestamp(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

func (s Message) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Message) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xc768aaf640842a35, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

type Ping struct{ capnp.Struct }

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0x9bce611bc724ff89

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping{st}, err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping{st}, err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.RootPtr()
	return Ping{root.Struct()}, err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0x9bce611bc724ff89, s.Struct)
	return str
}

// Ping_List is a list of Ping.
type Ping_List struct{ capnp.List }

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Ping_List{l}, err
}

func (s Ping_List) At(i int) Ping { return Ping{s.List.Struct(i)} }

func (s Ping_List) Set(i int, v Ping) error { return s.List.SetStruct(i, v.Struct) }

func (s Ping_List) String() string {
	str, _ := text.MarshalList(0x9bce611bc724ff89, s.List)
	return str
}

// Ping_Promise is a wrapper for a Ping promised by a client call.
type Ping_Promise struct{ *capnp.Pipeline }

func (p Ping_Promise) Struct() (Ping, error) {
	s, err := p.Pipeline.Struct()
	return Ping{s}, err
}

type Pong struct{ capnp.Struct }

// Pong_TypeID is the unique identifier for the type Pong.
const Pong_TypeID = 0xf6486a286fedf2f6

func NewPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pong{st}, err
}

func NewRootPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pong{st}, err
}

func ReadRootPong(msg *capnp.Message) (Pong, error) {
	root, err := msg.RootPtr()
	return Pong{root.Struct()}, err
}

func (s Pong) String() string {
	str, _ := text.Marshal(0xf6486a286fedf2f6, s.Struct)
	return str
}

// Pong_List is a list of Pong.
type Pong_List struct{ capnp.List }

// NewPong creates a new list of Pong.
func NewPong_List(s *capnp.Segment, sz int32) (Pong_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Pong_List{l}, err
}

func (s Pong_List) At(i int) Pong { return Pong{s.List.Struct(i)} }

func (s Pong_List) Set(i int, v Pong) error { return s.List.SetStruct(i, v.Struct) }

func (s Pong_List) String() string {
	str, _ := text.MarshalList(0xf6486a286fedf2f6, s.List)
	return str
}

// Pong_Promise is a wrapper for a Pong promised by a client call.
type Pong_Promise struct{ *capnp.Pipeline }

func (p Pong_Promise) Struct() (Pong, error) {
	s, err := p.Pipeline.Struct()
	return Pong{s}, err
}

const schema_aa44738dedfed9a1 = "x\xdal\x8f1K\xeb`\x18\x85\xcfy\xbf\xe4\x96\x0e" +
	"m\xefG2\xdd\xabt\xb1 \x1d\x14\x11\x17\xa7\x0e\x1d" +
	"t\x10\xf2\xf9\x0fB\x1bj\xc46\xa1\xc9\xa0\xa0\x83P" +
	"A\xc1B\x17A\xaa\x8bk\xdd\xfc\x13\xdd\xdc\xfd\x11]" +
	"\x1c:\x1a\x89\xa2\x82\xba\xbd\xe7\xe1\xbc\x07\x9e\xbf\xf7\x0d" +
	"Y\xb3#\x01\xcc\x82\xfd'\xbb\xc8\x96\xa6\xff\xfd\xc7\x1b" +
	"\xe82\xb3\xbb\xa7\x97\xd90iN`\x15\x00g\x91c" +
	"\xa7\xc6\x02T\xb6Q\x1f4\xe6\x93\xbd)L\x99\xd6W" +
	"\xcbf^#\x1f\x9cb~\xad\xdb\xac\x12\xcc\xe6\xcf\xb3" +
	"hy\x7fk\xfe\xdb\xa4\x8c\x9d\x9a\x14\xb0\x9au\x83$" +
	"\xf1;\xc1\x0a[~\xdc\x8b7\xbdP\xf5:\x1e\xf9\x9d" +
	"\xef\x04\xd5\xb7\xec\x91\xc6U\x16`\x11\xd0'\xff\x00s" +
	"\xa8h\x06BM\xba\xcc\xe1i\x1d0\xc7\x8a\xe6\\\xa8" +
	"E\\\x0a\xa0\xcf\xfa\x80\x19(\x9a\x91P+\xe5R\x01" +
	"z\xb8\x0b\x98KEs-\xa4\xe5\xd2\x02\xf4U\xfe=" +
	"R4\xb7B\x15\xb6Y\x84\xb0\x08V\xd2\xa38\xf8\x08" +
	"Y+\xea\xf7\x83\x03?E5\x8cz\xdb\xcdO\x9e\x86" +
	"\xdd I\xfd.\x18\xd3\x86\xd0\x06+m?\xf5Y\x82" +
	"\xb0\x84\x1fV^\xf4n\xfb\x1a\x00\x00\xff\xff\xc4\x87a" +
	"\xb1"

func init() {
	schemas.Register(schema_aa44738dedfed9a1,
		0x9bce611bc724ff89,
		0xc768aaf640842a35,
		0xf6486a286fedf2f6)
}
