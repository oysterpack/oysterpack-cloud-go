// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	strconv "strconv"

	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Message struct{ capnp.Struct }
type Message_deadline Message
type Message_deadline_Which uint16

const (
	Message_deadline_Which_timeoutMSec Message_deadline_Which = 0
	Message_deadline_Which_expiresOn   Message_deadline_Which = 1
)

func (w Message_deadline_Which) String() string {
	const s = "timeoutMSecexpiresOn"
	switch w {
	case Message_deadline_Which_timeoutMSec:
		return s[0:11]
	case Message_deadline_Which_expiresOn:
		return s[11:20]

	}
	return "Message_deadline_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xc768aaf640842a35

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xc768aaf640842a35, s.Struct)
	return str
}

func (s Message) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s Message) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Message) Type() uint64 {
	return s.Struct.Uint64(8)
}

func (s Message) SetType(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Message) CorrelationID() uint64 {
	return s.Struct.Uint64(16)
}

func (s Message) SetCorrelationID(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s Message) Timestamp() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s Message) SetTimestamp(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

func (s Message) Compression() Message_Compression {
	return Message_Compression(s.Struct.Uint16(32))
}

func (s Message) SetCompression(v Message_Compression) {
	s.Struct.SetUint16(32, uint16(v))
}

func (s Message) Packed() bool {
	return s.Struct.Bit(272)
}

func (s Message) SetPacked(v bool) {
	s.Struct.SetBit(272, v)
}

func (s Message) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Message) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Message) Deadline() Message_deadline { return Message_deadline(s) }

func (s Message_deadline) Which() Message_deadline_Which {
	return Message_deadline_Which(s.Struct.Uint16(38))
}
func (s Message_deadline) TimeoutMSec() uint16 {
	if s.Struct.Uint16(38) != 0 {
		panic("Which() != timeoutMSec")
	}
	return s.Struct.Uint16(36)
}

func (s Message_deadline) SetTimeoutMSec(v uint16) {
	s.Struct.SetUint16(38, 0)
	s.Struct.SetUint16(36, v)
}

func (s Message_deadline) ExpiresOn() int64 {
	if s.Struct.Uint16(38) != 1 {
		panic("Which() != expiresOn")
	}
	return int64(s.Struct.Uint64(40))
}

func (s Message_deadline) SetExpiresOn(v int64) {
	s.Struct.SetUint16(38, 1)
	s.Struct.SetUint64(40, uint64(v))
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xc768aaf640842a35, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

func (p Message_Promise) Deadline() Message_deadline_Promise {
	return Message_deadline_Promise{p.Pipeline}
}

// Message_deadline_Promise is a wrapper for a Message_deadline promised by a client call.
type Message_deadline_Promise struct{ *capnp.Pipeline }

func (p Message_deadline_Promise) Struct() (Message_deadline, error) {
	s, err := p.Pipeline.Struct()
	return Message_deadline{s}, err
}

type Message_Compression uint16

// Message_Compression_TypeID is the unique identifier for the type Message_Compression.
const Message_Compression_TypeID = 0xf8f433c185247295

// Values of Message_Compression.
const (
	Message_Compression_none Message_Compression = 0
	Message_Compression_zlib Message_Compression = 1
)

// String returns the enum's constant name.
func (c Message_Compression) String() string {
	switch c {
	case Message_Compression_none:
		return "none"
	case Message_Compression_zlib:
		return "zlib"

	default:
		return ""
	}
}

// Message_CompressionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Message_CompressionFromString(c string) Message_Compression {
	switch c {
	case "none":
		return Message_Compression_none
	case "zlib":
		return Message_Compression_zlib

	default:
		return 0
	}
}

type Message_Compression_List struct{ capnp.List }

func NewMessage_Compression_List(s *capnp.Segment, sz int32) (Message_Compression_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Message_Compression_List{l.List}, err
}

func (l Message_Compression_List) At(i int) Message_Compression {
	ul := capnp.UInt16List{List: l.List}
	return Message_Compression(ul.At(i))
}

func (l Message_Compression_List) Set(i int, v Message_Compression) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Ping struct{ capnp.Struct }

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0x9bce611bc724ff89

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping{st}, err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping{st}, err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.RootPtr()
	return Ping{root.Struct()}, err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0x9bce611bc724ff89, s.Struct)
	return str
}

// Ping_List is a list of Ping.
type Ping_List struct{ capnp.List }

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Ping_List{l}, err
}

func (s Ping_List) At(i int) Ping { return Ping{s.List.Struct(i)} }

func (s Ping_List) Set(i int, v Ping) error { return s.List.SetStruct(i, v.Struct) }

func (s Ping_List) String() string {
	str, _ := text.MarshalList(0x9bce611bc724ff89, s.List)
	return str
}

// Ping_Promise is a wrapper for a Ping promised by a client call.
type Ping_Promise struct{ *capnp.Pipeline }

func (p Ping_Promise) Struct() (Ping, error) {
	s, err := p.Pipeline.Struct()
	return Ping{s}, err
}

type Pong struct{ capnp.Struct }

// Pong_TypeID is the unique identifier for the type Pong.
const Pong_TypeID = 0xf6486a286fedf2f6

func NewPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pong{st}, err
}

func NewRootPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pong{st}, err
}

func ReadRootPong(msg *capnp.Message) (Pong, error) {
	root, err := msg.RootPtr()
	return Pong{root.Struct()}, err
}

func (s Pong) String() string {
	str, _ := text.Marshal(0xf6486a286fedf2f6, s.Struct)
	return str
}

// Pong_List is a list of Pong.
type Pong_List struct{ capnp.List }

// NewPong creates a new list of Pong.
func NewPong_List(s *capnp.Segment, sz int32) (Pong_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Pong_List{l}, err
}

func (s Pong_List) At(i int) Pong { return Pong{s.List.Struct(i)} }

func (s Pong_List) Set(i int, v Pong) error { return s.List.SetStruct(i, v.Struct) }

func (s Pong_List) String() string {
	str, _ := text.MarshalList(0xf6486a286fedf2f6, s.List)
	return str
}

// Pong_Promise is a wrapper for a Pong promised by a client call.
type Pong_Promise struct{ *capnp.Pipeline }

func (p Pong_Promise) Struct() (Pong, error) {
	s, err := p.Pipeline.Struct()
	return Pong{s}, err
}

type SupportedMessageTypes struct{ capnp.Struct }

// SupportedMessageTypes_TypeID is the unique identifier for the type SupportedMessageTypes.
const SupportedMessageTypes_TypeID = 0xf56d6f421703b1f7

func NewSupportedMessageTypes(s *capnp.Segment) (SupportedMessageTypes, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SupportedMessageTypes{st}, err
}

func NewRootSupportedMessageTypes(s *capnp.Segment) (SupportedMessageTypes, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SupportedMessageTypes{st}, err
}

func ReadRootSupportedMessageTypes(msg *capnp.Message) (SupportedMessageTypes, error) {
	root, err := msg.RootPtr()
	return SupportedMessageTypes{root.Struct()}, err
}

func (s SupportedMessageTypes) String() string {
	str, _ := text.Marshal(0xf56d6f421703b1f7, s.Struct)
	return str
}

// SupportedMessageTypes_List is a list of SupportedMessageTypes.
type SupportedMessageTypes_List struct{ capnp.List }

// NewSupportedMessageTypes creates a new list of SupportedMessageTypes.
func NewSupportedMessageTypes_List(s *capnp.Segment, sz int32) (SupportedMessageTypes_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return SupportedMessageTypes_List{l}, err
}

func (s SupportedMessageTypes_List) At(i int) SupportedMessageTypes {
	return SupportedMessageTypes{s.List.Struct(i)}
}

func (s SupportedMessageTypes_List) Set(i int, v SupportedMessageTypes) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SupportedMessageTypes_List) String() string {
	str, _ := text.MarshalList(0xf56d6f421703b1f7, s.List)
	return str
}

// SupportedMessageTypes_Promise is a wrapper for a SupportedMessageTypes promised by a client call.
type SupportedMessageTypes_Promise struct{ *capnp.Pipeline }

func (p SupportedMessageTypes_Promise) Struct() (SupportedMessageTypes, error) {
	s, err := p.Pipeline.Struct()
	return SupportedMessageTypes{s}, err
}

type SupportedMessageTypes_Request struct{ capnp.Struct }

// SupportedMessageTypes_Request_TypeID is the unique identifier for the type SupportedMessageTypes_Request.
const SupportedMessageTypes_Request_TypeID = 0x80b38fdd614a8b73

func NewSupportedMessageTypes_Request(s *capnp.Segment) (SupportedMessageTypes_Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SupportedMessageTypes_Request{st}, err
}

func NewRootSupportedMessageTypes_Request(s *capnp.Segment) (SupportedMessageTypes_Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SupportedMessageTypes_Request{st}, err
}

func ReadRootSupportedMessageTypes_Request(msg *capnp.Message) (SupportedMessageTypes_Request, error) {
	root, err := msg.RootPtr()
	return SupportedMessageTypes_Request{root.Struct()}, err
}

func (s SupportedMessageTypes_Request) String() string {
	str, _ := text.Marshal(0x80b38fdd614a8b73, s.Struct)
	return str
}

// SupportedMessageTypes_Request_List is a list of SupportedMessageTypes_Request.
type SupportedMessageTypes_Request_List struct{ capnp.List }

// NewSupportedMessageTypes_Request creates a new list of SupportedMessageTypes_Request.
func NewSupportedMessageTypes_Request_List(s *capnp.Segment, sz int32) (SupportedMessageTypes_Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return SupportedMessageTypes_Request_List{l}, err
}

func (s SupportedMessageTypes_Request_List) At(i int) SupportedMessageTypes_Request {
	return SupportedMessageTypes_Request{s.List.Struct(i)}
}

func (s SupportedMessageTypes_Request_List) Set(i int, v SupportedMessageTypes_Request) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SupportedMessageTypes_Request_List) String() string {
	str, _ := text.MarshalList(0x80b38fdd614a8b73, s.List)
	return str
}

// SupportedMessageTypes_Request_Promise is a wrapper for a SupportedMessageTypes_Request promised by a client call.
type SupportedMessageTypes_Request_Promise struct{ *capnp.Pipeline }

func (p SupportedMessageTypes_Request_Promise) Struct() (SupportedMessageTypes_Request, error) {
	s, err := p.Pipeline.Struct()
	return SupportedMessageTypes_Request{s}, err
}

type SupportedMessageTypes_Response struct{ capnp.Struct }

// SupportedMessageTypes_Response_TypeID is the unique identifier for the type SupportedMessageTypes_Response.
const SupportedMessageTypes_Response_TypeID = 0x87799f37b0d1886a

func NewSupportedMessageTypes_Response(s *capnp.Segment) (SupportedMessageTypes_Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SupportedMessageTypes_Response{st}, err
}

func NewRootSupportedMessageTypes_Response(s *capnp.Segment) (SupportedMessageTypes_Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SupportedMessageTypes_Response{st}, err
}

func ReadRootSupportedMessageTypes_Response(msg *capnp.Message) (SupportedMessageTypes_Response, error) {
	root, err := msg.RootPtr()
	return SupportedMessageTypes_Response{root.Struct()}, err
}

func (s SupportedMessageTypes_Response) String() string {
	str, _ := text.Marshal(0x87799f37b0d1886a, s.Struct)
	return str
}

func (s SupportedMessageTypes_Response) Types() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s SupportedMessageTypes_Response) HasTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SupportedMessageTypes_Response) SetTypes(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s SupportedMessageTypes_Response) NewTypes(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SupportedMessageTypes_Response_List is a list of SupportedMessageTypes_Response.
type SupportedMessageTypes_Response_List struct{ capnp.List }

// NewSupportedMessageTypes_Response creates a new list of SupportedMessageTypes_Response.
func NewSupportedMessageTypes_Response_List(s *capnp.Segment, sz int32) (SupportedMessageTypes_Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SupportedMessageTypes_Response_List{l}, err
}

func (s SupportedMessageTypes_Response_List) At(i int) SupportedMessageTypes_Response {
	return SupportedMessageTypes_Response{s.List.Struct(i)}
}

func (s SupportedMessageTypes_Response_List) Set(i int, v SupportedMessageTypes_Response) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SupportedMessageTypes_Response_List) String() string {
	str, _ := text.MarshalList(0x87799f37b0d1886a, s.List)
	return str
}

// SupportedMessageTypes_Response_Promise is a wrapper for a SupportedMessageTypes_Response promised by a client call.
type SupportedMessageTypes_Response_Promise struct{ *capnp.Pipeline }

func (p SupportedMessageTypes_Response_Promise) Struct() (SupportedMessageTypes_Response, error) {
	s, err := p.Pipeline.Struct()
	return SupportedMessageTypes_Response{s}, err
}

const schema_aa44738dedfed9a1 = "x\xda\x9cT=l\x1cE\x18}of\xd6{\x96\xb0" +
	"\xcf\x93]\x12~\x12\x9dA\x17\x91\x9cD\x84\xb9D!" +
	"i\x1c\x87\x14`\xc9\xc2\xe3#\x12\x0dH{\xbe\x91Y" +
	"\xe3\xdb]n\xd7\"I\x13\x0a\x10\x7fB !\x9aP" +
	"D4H\xa4\xe2G\x14\x14)(\"7\x04\x91\x02\xe4" +
	"HP A\x19\x0a\x04\x06Qd\xd0\xdeq\xf6\x85\x1f" +
	"\x09\xd1\xed\xbc}\xf3\xbeo\xde\xbco\x1ex\x93'\xc4" +
	"\x8cw^\x01\xe6\xb07\xe6\xf2\xd7\xe6\xa3o\xdf\xf8\xf8" +
	"y\xe8:\xdd\xaf\x1f\xca='\xd3\xee/P>\xd0\xdc" +
	"/\xda\x0c\x8e\x09\x1f\xd2\xad\xbe|\xed\x83\xa3\x17\xcf\xbe" +
	"t+\xcbcI\xbb]\xac28(| \xd8/f" +
	"A\xf7\x8a\xabo\xdc\x1d}\xf1\x0e\xf4$\xdd\xbb\xd7o" +
	"\xdex=?u\xa9/\x19\x9c\x16\x17\x82'\xfb\x8aG" +
	"\x1a/\x9c\xd8\xba\xf4\xf4\x06\xcc$\xc7vX}\xc9\xe0" +
	"\x98\xf8(\x98\x13{\x80\xe6\x82\xd8 \xe8&7c\xb3" +
	"\xf2\xde\xdc\x8f0\xbb9\xb6\xb3\xf74}\x0a\x06\xc1\xfd" +
	"\xeaw0\x98Q\xcfa\xa4\xbb\xbfUo^V\xf72" +
	"\xb8\xaa\xee\x83t[?\xddH\x0f\xac>\xb2\xf5\x0f=" +
	"^Q\x17\x82\xab\xaa\xec\xf1\xed^\xfd\xc5\xcf\x9a?\xff" +
	"\x06\xbd[\xec\x14\x05\x9b\xef\xab]\x0c>\xed\xb3?Q" +
	"G\xf1\x90\xeb\xda<\x8fV\xec!\xb5\x1ceIv\xbc" +
	"\xb5\x9eei\xaf\xb0\x9d\x85\x01\xfe\xf8\xd9\xcc\xe6\x87\x96" +
	"\xec\xb3\xeb\xbe\xcd\x8bE\xf2\xbfn\xc8\xb3j\x9a\xe4v" +
	"\x914J*@\x11\xd0\x13\x0f\x02\xa6\"i\xea\x82\xb5" +
	"\xa2dr\x12\\\x94\xe48D\xf9\xb9\xad\xce\x81\xfab" +
	",\x93\x95\xd1\xaa\x7f\xe2\x0b\xb6\xd6_\x1bE\x8e\x1c\x96" +
	"m\xf7p\xda\xcdz6\xcf\xe1\xc7ib\xa6\xb7K_" +
	"\xbb\x0b0\x9fK\x9aMAM\x86,\xc1\xaf\x1a\x80\xf9" +
	"R\xd2|#\xa8\x85\x08)\x00}\xbd\x07\x98MI\xf3" +
	"\xbd\xa0\x962\xa4\x04\xf4wK\xfa\x87Z\xabB\xc9V" +
	"HA\xad\xa6B*2\xd0l\x03\xad\xa9\x12\xdfK\xc1" +
	"\x19o\x8a!=2\xb8\x93\xc7\x81VX\xfe\x98\xa6 " +
	"\xc7B\x8e\x01\xc1>6\x80\xd6\x1d%\\/a\x9f#" +
	"\x11\x09\xee\xe1<\x84\x8c;};\xc6\xc1j\xe9\xd1p" +
	"\xe1\x96\xd3^\xcf\xaeE\x05jq\x9a<zj\x1b/" +
	"\xe2\xae\xcd\x8b\xa8\x0bfFQ\xb8\xa7\xde\xbah.\x7f" +
	"\xfd\xea\x15\x18%8\x17\x92\xb7\x01\x9a\xe7\xdcz\x12\x9f" +
	"\x99N\xa2\x04\xb3\xe9t\xb9\x07\xa0\x07A\xaf/=\xe2" +
	"\x1a\xab;\x96\x82\xac\x82\xb3Y\xb4\xfc\x8c\xed\x90\x10$" +
	"X\xedDE\xc4\x09\x08N\x80\xaec\xa3\xceZ\x9cX" +
	"\x00\xdb\xd7$\x86\xd74Xv\xec\xec\x80c*R\xed" +
	"unWX\x0e\x8b>\xd8\x06\xcc\x01IsXp\x1f" +
	"o:/d\x05\xd03K\xfaH\xcd<!i:b" +
	"p\xbat\xbdX\x80\xdf\xb2\xcb\xf4!\xe8\x83\xce\x9e\xc9" +
	"\xe2\x9e\xcd\x1f\x03\x93\xff{\xe6a\xaf\xf2\xdf\x82\xecg" +
	"67\x15r\xe4\xa5\x19?9\xf2\xa0x\xf3\xe7\xcb\xc1" +
	"\xb0y\xe1\xca\xbc\x97q\x1f\xf5`\x18\xe1\xf4/\x11\x96" +
	"\xb7z3\x0cl\x9c2)\xa7\xa5\xd2\x0f\xa1n\x94\xd6" +
	"\xeb\xf1\x06PM\xd2\xc4V\xcf\xad\xc5\xed?\x02\x00\x00" +
	"\xff\xff\x82;gt"

func init() {
	schemas.Register(schema_aa44738dedfed9a1,
		0x80b38fdd614a8b73,
		0x87799f37b0d1886a,
		0x9bce611bc724ff89,
		0xc768aaf640842a35,
		0xee41a6675169d80e,
		0xf56d6f421703b1f7,
		0xf6486a286fedf2f6,
		0xf8f433c185247295)
}
