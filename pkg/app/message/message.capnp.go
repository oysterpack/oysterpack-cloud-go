// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Message struct{ capnp.Struct }

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xc768aaf640842a35

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xc768aaf640842a35, s.Struct)
	return str
}

func (s Message) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s Message) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Message) Type() uint64 {
	return s.Struct.Uint64(8)
}

func (s Message) SetType(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Message) CorrelationID() uint64 {
	return s.Struct.Uint64(16)
}

func (s Message) SetCorrelationID(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s Message) Timestamp() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s Message) SetTimestamp(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

func (s Message) Compression() Message_Compression {
	return Message_Compression(s.Struct.Uint16(32) ^ 1)
}

func (s Message) SetCompression(v Message_Compression) {
	s.Struct.SetUint16(32, uint16(v)^1)
}

func (s Message) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Message) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xc768aaf640842a35, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

type Message_Compression uint16

// Message_Compression_TypeID is the unique identifier for the type Message_Compression.
const Message_Compression_TypeID = 0xf8f433c185247295

// Values of Message_Compression.
const (
	Message_Compression_none Message_Compression = 0
	Message_Compression_zlib Message_Compression = 1
)

// String returns the enum's constant name.
func (c Message_Compression) String() string {
	switch c {
	case Message_Compression_none:
		return "none"
	case Message_Compression_zlib:
		return "zlib"

	default:
		return ""
	}
}

// Message_CompressionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Message_CompressionFromString(c string) Message_Compression {
	switch c {
	case "none":
		return Message_Compression_none
	case "zlib":
		return Message_Compression_zlib

	default:
		return 0
	}
}

type Message_Compression_List struct{ capnp.List }

func NewMessage_Compression_List(s *capnp.Segment, sz int32) (Message_Compression_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Message_Compression_List{l.List}, err
}

func (l Message_Compression_List) At(i int) Message_Compression {
	ul := capnp.UInt16List{List: l.List}
	return Message_Compression(ul.At(i))
}

func (l Message_Compression_List) Set(i int, v Message_Compression) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Ping struct{ capnp.Struct }

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0x9bce611bc724ff89

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping{st}, err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping{st}, err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.RootPtr()
	return Ping{root.Struct()}, err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0x9bce611bc724ff89, s.Struct)
	return str
}

// Ping_List is a list of Ping.
type Ping_List struct{ capnp.List }

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Ping_List{l}, err
}

func (s Ping_List) At(i int) Ping { return Ping{s.List.Struct(i)} }

func (s Ping_List) Set(i int, v Ping) error { return s.List.SetStruct(i, v.Struct) }

func (s Ping_List) String() string {
	str, _ := text.MarshalList(0x9bce611bc724ff89, s.List)
	return str
}

// Ping_Promise is a wrapper for a Ping promised by a client call.
type Ping_Promise struct{ *capnp.Pipeline }

func (p Ping_Promise) Struct() (Ping, error) {
	s, err := p.Pipeline.Struct()
	return Ping{s}, err
}

type Pong struct{ capnp.Struct }

// Pong_TypeID is the unique identifier for the type Pong.
const Pong_TypeID = 0xf6486a286fedf2f6

func NewPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pong{st}, err
}

func NewRootPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pong{st}, err
}

func ReadRootPong(msg *capnp.Message) (Pong, error) {
	root, err := msg.RootPtr()
	return Pong{root.Struct()}, err
}

func (s Pong) String() string {
	str, _ := text.Marshal(0xf6486a286fedf2f6, s.Struct)
	return str
}

// Pong_List is a list of Pong.
type Pong_List struct{ capnp.List }

// NewPong creates a new list of Pong.
func NewPong_List(s *capnp.Segment, sz int32) (Pong_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Pong_List{l}, err
}

func (s Pong_List) At(i int) Pong { return Pong{s.List.Struct(i)} }

func (s Pong_List) Set(i int, v Pong) error { return s.List.SetStruct(i, v.Struct) }

func (s Pong_List) String() string {
	str, _ := text.MarshalList(0xf6486a286fedf2f6, s.List)
	return str
}

// Pong_Promise is a wrapper for a Pong promised by a client call.
type Pong_Promise struct{ *capnp.Pipeline }

func (p Pong_Promise) Struct() (Pong, error) {
	s, err := p.Pipeline.Struct()
	return Pong{s}, err
}

const schema_aa44738dedfed9a1 = "x\xdal\x90\xb1k\x13q\x1c\xc5\xdf\xfb\xfe\xeeg\xcc" +
	"\xd0^\x7f\xe6P\xd1\xa1\x0e\x1d$PAB\x11\x9c*" +
	"v\xb0\x83\x90\xaf\x8b\xf3\xa5=\xeaIsw\xdc\xdd\xa2" +
	"\xe0\xa6C\x87n\x0a\xb6\"4\xe0\xa0\xc5A\xa5\x8b\xe0" +
	"\xa0S6\xf7\xfe\x11]D\x82\x93'\x17\x89)\xb5\xe3" +
	"{<>\xf0>s\x87\xcbr\xdd\x0e\x05\xd0+\xf6L" +
	"\xb5U-\x0c/\x87\xdf_\xc1\xcd\xb2\x1a\x1c\xfe>\xda" +
	".V\xf6\xe15\x80\xd6*w[\xca\x06L\xb5\xd4~" +
	"\xba<\xda\x7f0\x84\xce\xd2NW\x96\xf5l\x91\x9fZ" +
	"K\xbc\x00tn\xf1>\xc1j\xf4\xe3(\xbd\xfa\xf0\xce" +
	"\xe8\x14\xe4\x8e\xec\xb6\x06R#_\xe4\x0b\xcf\xbeu~" +
	"\xfe\x82;/S>\xd8y\"\xe7\xd8\xda\x96z\xbd%" +
	"7\xb0X\xf5\xa3\xa2\x087\xa2k\\\x0b\xb3$\xbb\xd9" +
	"\x8dM\xb2\xd1%O\xf6w\xa3\xf9qV\x8f<Fg" +
	"\xaf\xba\x9d\xf6\xb3<*\x0a4\xe24\xd1\x8b\xc6\x03<" +
	"\x02n\xe7\x12\xa0\xcf\x0duO\xe8\xc8\x80u\xf9\xba\x0d" +
	"\xe8KC}#t\"\x01\x05p\x83\x1c\xd0=C}" +
	"/t\xc6\x044\x80{w\x0f\xd0\xb7\x86z t\xde" +
	"\\@\x8ft\x1f{\x80~0\xd4/B\xda\x80\x16p" +
	"\x9fk\xe4\x81\xa1~\x15\x9ax\x9dM\x08\x9b\xa0_>" +
	"\xca\xa2I\xa8\xd6\xd2<\x8f6\xc3\x12\xf3q\x9a\xac\xae" +
	"\xfc\xeb\xcb\xb8\x1f\x15e\xd8\x073Z\x08\xedx{\xec" +
	"\x10\xfd\xe9[\xd0\xfa\x04\xfd\xf5\xb0\x0c9\x03\xe1\x0c\xfe" +
	"\xf3\xd4MO\xf83\x13\x7f\x7f\xe3\xc4V\x9c2\xe9\x92" +
	"zvl\xc0\xb5\x01\xd25\xdb\x80\x9f\xa4I\xe4?\xde" +
	"\x8c{\x7f\x02\x00\x00\xff\xff\x9aE\xa0E"

func init() {
	schemas.Register(schema_aa44738dedfed9a1,
		0x9bce611bc724ff89,
		0xc768aaf640842a35,
		0xf6486a286fedf2f6,
		0xf8f433c185247295)
}
