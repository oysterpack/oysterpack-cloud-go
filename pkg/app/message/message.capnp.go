// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	strconv "strconv"

	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Message struct{ capnp.Struct }
type Message_deadline Message
type Message_deadline_Which uint16

const (
	Message_deadline_Which_timeoutMSec Message_deadline_Which = 0
	Message_deadline_Which_expiresOn   Message_deadline_Which = 1
)

func (w Message_deadline_Which) String() string {
	const s = "timeoutMSecexpiresOn"
	switch w {
	case Message_deadline_Which_timeoutMSec:
		return s[0:11]
	case Message_deadline_Which_expiresOn:
		return s[11:20]

	}
	return "Message_deadline_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xc768aaf640842a35

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xc768aaf640842a35, s.Struct)
	return str
}

func (s Message) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s Message) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Message) Type() uint64 {
	return s.Struct.Uint64(8)
}

func (s Message) SetType(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Message) CorrelationID() uint64 {
	return s.Struct.Uint64(16)
}

func (s Message) SetCorrelationID(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s Message) Timestamp() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s Message) SetTimestamp(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

func (s Message) Compression() Message_Compression {
	return Message_Compression(s.Struct.Uint16(32) ^ 1)
}

func (s Message) SetCompression(v Message_Compression) {
	s.Struct.SetUint16(32, uint16(v)^1)
}

func (s Message) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Message) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Message) Deadline() Message_deadline { return Message_deadline(s) }

func (s Message_deadline) Which() Message_deadline_Which {
	return Message_deadline_Which(s.Struct.Uint16(36))
}
func (s Message_deadline) TimeoutMSec() uint16 {
	if s.Struct.Uint16(36) != 0 {
		panic("Which() != timeoutMSec")
	}
	return s.Struct.Uint16(34)
}

func (s Message_deadline) SetTimeoutMSec(v uint16) {
	s.Struct.SetUint16(36, 0)
	s.Struct.SetUint16(34, v)
}

func (s Message_deadline) ExpiresOn() int64 {
	if s.Struct.Uint16(36) != 1 {
		panic("Which() != expiresOn")
	}
	return int64(s.Struct.Uint64(40))
}

func (s Message_deadline) SetExpiresOn(v int64) {
	s.Struct.SetUint16(36, 1)
	s.Struct.SetUint64(40, uint64(v))
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xc768aaf640842a35, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

func (p Message_Promise) Deadline() Message_deadline_Promise {
	return Message_deadline_Promise{p.Pipeline}
}

// Message_deadline_Promise is a wrapper for a Message_deadline promised by a client call.
type Message_deadline_Promise struct{ *capnp.Pipeline }

func (p Message_deadline_Promise) Struct() (Message_deadline, error) {
	s, err := p.Pipeline.Struct()
	return Message_deadline{s}, err
}

type Message_Compression uint16

// Message_Compression_TypeID is the unique identifier for the type Message_Compression.
const Message_Compression_TypeID = 0xf8f433c185247295

// Values of Message_Compression.
const (
	Message_Compression_none Message_Compression = 0
	Message_Compression_zlib Message_Compression = 1
)

// String returns the enum's constant name.
func (c Message_Compression) String() string {
	switch c {
	case Message_Compression_none:
		return "none"
	case Message_Compression_zlib:
		return "zlib"

	default:
		return ""
	}
}

// Message_CompressionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Message_CompressionFromString(c string) Message_Compression {
	switch c {
	case "none":
		return Message_Compression_none
	case "zlib":
		return Message_Compression_zlib

	default:
		return 0
	}
}

type Message_Compression_List struct{ capnp.List }

func NewMessage_Compression_List(s *capnp.Segment, sz int32) (Message_Compression_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Message_Compression_List{l.List}, err
}

func (l Message_Compression_List) At(i int) Message_Compression {
	ul := capnp.UInt16List{List: l.List}
	return Message_Compression(ul.At(i))
}

func (l Message_Compression_List) Set(i int, v Message_Compression) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Ping struct{ capnp.Struct }

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0x9bce611bc724ff89

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping{st}, err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping{st}, err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.RootPtr()
	return Ping{root.Struct()}, err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0x9bce611bc724ff89, s.Struct)
	return str
}

// Ping_List is a list of Ping.
type Ping_List struct{ capnp.List }

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Ping_List{l}, err
}

func (s Ping_List) At(i int) Ping { return Ping{s.List.Struct(i)} }

func (s Ping_List) Set(i int, v Ping) error { return s.List.SetStruct(i, v.Struct) }

func (s Ping_List) String() string {
	str, _ := text.MarshalList(0x9bce611bc724ff89, s.List)
	return str
}

// Ping_Promise is a wrapper for a Ping promised by a client call.
type Ping_Promise struct{ *capnp.Pipeline }

func (p Ping_Promise) Struct() (Ping, error) {
	s, err := p.Pipeline.Struct()
	return Ping{s}, err
}

type Pong struct{ capnp.Struct }

// Pong_TypeID is the unique identifier for the type Pong.
const Pong_TypeID = 0xf6486a286fedf2f6

func NewPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pong{st}, err
}

func NewRootPong(s *capnp.Segment) (Pong, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pong{st}, err
}

func ReadRootPong(msg *capnp.Message) (Pong, error) {
	root, err := msg.RootPtr()
	return Pong{root.Struct()}, err
}

func (s Pong) String() string {
	str, _ := text.Marshal(0xf6486a286fedf2f6, s.Struct)
	return str
}

// Pong_List is a list of Pong.
type Pong_List struct{ capnp.List }

// NewPong creates a new list of Pong.
func NewPong_List(s *capnp.Segment, sz int32) (Pong_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Pong_List{l}, err
}

func (s Pong_List) At(i int) Pong { return Pong{s.List.Struct(i)} }

func (s Pong_List) Set(i int, v Pong) error { return s.List.SetStruct(i, v.Struct) }

func (s Pong_List) String() string {
	str, _ := text.MarshalList(0xf6486a286fedf2f6, s.List)
	return str
}

// Pong_Promise is a wrapper for a Pong promised by a client call.
type Pong_Promise struct{ *capnp.Pipeline }

func (p Pong_Promise) Struct() (Pong, error) {
	s, err := p.Pipeline.Struct()
	return Pong{s}, err
}

type SupportedMessageTypes struct{ capnp.Struct }

// SupportedMessageTypes_TypeID is the unique identifier for the type SupportedMessageTypes.
const SupportedMessageTypes_TypeID = 0xf56d6f421703b1f7

func NewSupportedMessageTypes(s *capnp.Segment) (SupportedMessageTypes, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SupportedMessageTypes{st}, err
}

func NewRootSupportedMessageTypes(s *capnp.Segment) (SupportedMessageTypes, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SupportedMessageTypes{st}, err
}

func ReadRootSupportedMessageTypes(msg *capnp.Message) (SupportedMessageTypes, error) {
	root, err := msg.RootPtr()
	return SupportedMessageTypes{root.Struct()}, err
}

func (s SupportedMessageTypes) String() string {
	str, _ := text.Marshal(0xf56d6f421703b1f7, s.Struct)
	return str
}

// SupportedMessageTypes_List is a list of SupportedMessageTypes.
type SupportedMessageTypes_List struct{ capnp.List }

// NewSupportedMessageTypes creates a new list of SupportedMessageTypes.
func NewSupportedMessageTypes_List(s *capnp.Segment, sz int32) (SupportedMessageTypes_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return SupportedMessageTypes_List{l}, err
}

func (s SupportedMessageTypes_List) At(i int) SupportedMessageTypes {
	return SupportedMessageTypes{s.List.Struct(i)}
}

func (s SupportedMessageTypes_List) Set(i int, v SupportedMessageTypes) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SupportedMessageTypes_List) String() string {
	str, _ := text.MarshalList(0xf56d6f421703b1f7, s.List)
	return str
}

// SupportedMessageTypes_Promise is a wrapper for a SupportedMessageTypes promised by a client call.
type SupportedMessageTypes_Promise struct{ *capnp.Pipeline }

func (p SupportedMessageTypes_Promise) Struct() (SupportedMessageTypes, error) {
	s, err := p.Pipeline.Struct()
	return SupportedMessageTypes{s}, err
}

type SupportedMessageTypes_Request struct{ capnp.Struct }

// SupportedMessageTypes_Request_TypeID is the unique identifier for the type SupportedMessageTypes_Request.
const SupportedMessageTypes_Request_TypeID = 0x80b38fdd614a8b73

func NewSupportedMessageTypes_Request(s *capnp.Segment) (SupportedMessageTypes_Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SupportedMessageTypes_Request{st}, err
}

func NewRootSupportedMessageTypes_Request(s *capnp.Segment) (SupportedMessageTypes_Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SupportedMessageTypes_Request{st}, err
}

func ReadRootSupportedMessageTypes_Request(msg *capnp.Message) (SupportedMessageTypes_Request, error) {
	root, err := msg.RootPtr()
	return SupportedMessageTypes_Request{root.Struct()}, err
}

func (s SupportedMessageTypes_Request) String() string {
	str, _ := text.Marshal(0x80b38fdd614a8b73, s.Struct)
	return str
}

// SupportedMessageTypes_Request_List is a list of SupportedMessageTypes_Request.
type SupportedMessageTypes_Request_List struct{ capnp.List }

// NewSupportedMessageTypes_Request creates a new list of SupportedMessageTypes_Request.
func NewSupportedMessageTypes_Request_List(s *capnp.Segment, sz int32) (SupportedMessageTypes_Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return SupportedMessageTypes_Request_List{l}, err
}

func (s SupportedMessageTypes_Request_List) At(i int) SupportedMessageTypes_Request {
	return SupportedMessageTypes_Request{s.List.Struct(i)}
}

func (s SupportedMessageTypes_Request_List) Set(i int, v SupportedMessageTypes_Request) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SupportedMessageTypes_Request_List) String() string {
	str, _ := text.MarshalList(0x80b38fdd614a8b73, s.List)
	return str
}

// SupportedMessageTypes_Request_Promise is a wrapper for a SupportedMessageTypes_Request promised by a client call.
type SupportedMessageTypes_Request_Promise struct{ *capnp.Pipeline }

func (p SupportedMessageTypes_Request_Promise) Struct() (SupportedMessageTypes_Request, error) {
	s, err := p.Pipeline.Struct()
	return SupportedMessageTypes_Request{s}, err
}

type SupportedMessageTypes_Response struct{ capnp.Struct }

// SupportedMessageTypes_Response_TypeID is the unique identifier for the type SupportedMessageTypes_Response.
const SupportedMessageTypes_Response_TypeID = 0x87799f37b0d1886a

func NewSupportedMessageTypes_Response(s *capnp.Segment) (SupportedMessageTypes_Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SupportedMessageTypes_Response{st}, err
}

func NewRootSupportedMessageTypes_Response(s *capnp.Segment) (SupportedMessageTypes_Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SupportedMessageTypes_Response{st}, err
}

func ReadRootSupportedMessageTypes_Response(msg *capnp.Message) (SupportedMessageTypes_Response, error) {
	root, err := msg.RootPtr()
	return SupportedMessageTypes_Response{root.Struct()}, err
}

func (s SupportedMessageTypes_Response) String() string {
	str, _ := text.Marshal(0x87799f37b0d1886a, s.Struct)
	return str
}

func (s SupportedMessageTypes_Response) Types() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s SupportedMessageTypes_Response) HasTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SupportedMessageTypes_Response) SetTypes(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s SupportedMessageTypes_Response) NewTypes(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SupportedMessageTypes_Response_List is a list of SupportedMessageTypes_Response.
type SupportedMessageTypes_Response_List struct{ capnp.List }

// NewSupportedMessageTypes_Response creates a new list of SupportedMessageTypes_Response.
func NewSupportedMessageTypes_Response_List(s *capnp.Segment, sz int32) (SupportedMessageTypes_Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SupportedMessageTypes_Response_List{l}, err
}

func (s SupportedMessageTypes_Response_List) At(i int) SupportedMessageTypes_Response {
	return SupportedMessageTypes_Response{s.List.Struct(i)}
}

func (s SupportedMessageTypes_Response_List) Set(i int, v SupportedMessageTypes_Response) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SupportedMessageTypes_Response_List) String() string {
	str, _ := text.MarshalList(0x87799f37b0d1886a, s.List)
	return str
}

// SupportedMessageTypes_Response_Promise is a wrapper for a SupportedMessageTypes_Response promised by a client call.
type SupportedMessageTypes_Response_Promise struct{ *capnp.Pipeline }

func (p SupportedMessageTypes_Response_Promise) Struct() (SupportedMessageTypes_Response, error) {
	s, err := p.Pipeline.Struct()
	return SupportedMessageTypes_Response{s}, err
}

const schema_aa44738dedfed9a1 = "x\xda\x9c\x94\xc1k\x1dU\x14\xc6\xbf\xef\xdc;\x99\x04" +
	"L\x9e\xb7\xf3lA\xab\xafH\x8am\x16\xc1\xfa\x1a\xda" +
	"\x0a\x92Z\xbb\xd0@07\xb1\xe0Fa\x92w\xa9\x13" +
	"\xf2f\xc67\x13m\x0aR\x0b\x8aV\x91R\xc4M\x15" +
	"\x8a\xdb\xae\xaa\xd5\x85\xd0\x82]\x94\xda\x8d\xd0\x8d\xe0\xa2" +
	"\xff\x81\xddH\x13\x83`\xaf\xcc\x8b\xc9{\xb5\x0a\xe2n" +
	"\xee\x993\xdf9\xf3}?\xee\xd3\xa7yX\xf6\x05\xa7" +
	"4`\xf7\x07\x03\xbe\xf8x*\xbe}\xf6\xf2\xbb0\xa3" +
	"\xf4\xbf}\xa5v\x1c\xc9\xda\xab\xd0!\xd0\xdc-\xf3\x8c" +
	"\x0eI\x08\xe5\x17?\xbcu\xe9\xc0\x85\x95\x0f\xee\xef\x0a" +
	"X\xb5=\"\x8b\x8c\xf6J\x08D\xbbe\x12\xf4g\xfc" +
	"\xe8\x8d\xc7\xe2\x1f?\x87\x19\xa1\xff\xf2\xe7{w>)" +
	"\x8e^\xecJF\xc7\xe4|\xf4ZWq\xe2\xadk\xab" +
	"O\x1c\xbc\xfc\x05\xecv\x0e\xf8\x89\xb1\xf7\x0e\xaf]|" +
	"\xe3\x06\x8e1\xa4p[tH~\x07\xa3\xe7\xe4m\xb0" +
	"\xf7\xd2\x8ep\xa0'\xd8\x9d\x1e\xdd\x94\xaf\xa3[\xb2\x03" +
	"h\xde\x96\xb3D\xdfv\x0fLo\x9e\xd6O2:\xa7" +
	"\x9f\x82\xf2k\xbf\xde\xc9\xf6,\xbe\xb8\xf6\x0f;\x9e\xd1" +
	"\xe7\xa3s\xba\xda\xf1\xb3\xce\xe8\xfb\xd7\x9aw\xd7a\xb6" +
	"Ko\x0b\xb0\xd9\xd6\xdb\x18\xbd\xd3\xed^\xd1\x07p\xd0" +
	"\xb7]Q\xc4\xc7\xdd\xb8^\x88\xf34\x7fvn9\xcf" +
	"\xb3N\xe9Z\xd3\x1b\xf5WVrW\x8c\xcf\xba7\x97" +
	"CW\x943\xe4\x7f\xfd\xa0\xc8kYZ\xb8\x19\xd2j" +
	"\xa5\x01M\xc0\x0c?\x03\xd8AE;*l\x94U'" +
	"G\xc0\x19E\x0eA\xaa\xc7-un\xa8\xcf$*=" +
	"\xde?U6\xea\x7f\x0d\x1bo\xb9\xc9\xb8\xb5\x94\xa4\xce" +
	"\x0e*\xbd\xd3{S\xe7\x00`\xf6\xce\x03v\x8f\xa2\xdd" +
	"/|\x9c\xf7|P\xaf\x1c7\xfbf\xcdD\xc3\xbe\xaa" +
	"h[B_&m\x97-\x97\xd3\x08\xe7\xdc\x02C\x08" +
	"C\xd0\xbb\x13y\xd2q\xc5\xcb`j5\xc5\xbf\xfe\xe9" +
	"\x05{\xf5\xa7\x8f\xae\xc3j\xe1\xf3u\xf2!\xc0\xf0\xa4" +
	"_N\x93\x13\xbb\xd28\xc5d\xb6\xabR\x02\x18@\x18" +
	"<\xf8\x0f\xd3\xae\xd1=[M\xf6\x05\xc3y\xffB\xd6" +
	"\xce;\xae(\x10&Yjwn\xd9\xf4\xed\xa3\x80\xbd" +
	"\xa4h\xaf\x08\x0dYgU\xfcn\x0c\xb0\xdf(\xda\xef" +
	"\x85F\xa4N\x01\xcc\xd5\x0e`\xaf(\xda\x1f\x84F\xa9" +
	":\x15`\xae\xcf\x9a\x9b\x0d\xfb\x8b\xa2]\x17\x1a\xfdp" +
	"\x9d\x9a4\xab\x95'w\x15g)dPg\x00\x98?" +
	"*\xcdu\xc59]\x15\x07\xc8\x1e\xdc\x119\x05QI" +
	"\xab\x1b\xcd\x10X\xab\xf2\xda<\xf8\x85\xac\xd3qKq" +
	"\x89F\x92\xa5/\x1d\xdd\xaaWV\x14e\xdc\x06\xf3\xff" +
	"k\xdfB\xbf+\xac\xf5,\x03\x83\x1a\xc1Z+.c" +
	"\x0eC8\x0c\xfa\x96\xdb\x00\x00\xc0\x96\xf1\xea\xdf\xd0\x0c" +
	"sW\xd8A\xb2\xef\xee\x18:\xd2wE\x04S\xa7*" +
	"\xd4]Q\xfa\x8a\xe0\x0a\xe0~\xddM(\xb3\xbfA\xa9" +
	"\xee\x87r3\xd6$cZ\xf1?\xd8\x8d\xca\x8c\x01\xa4" +
	"\x19\x1a\x03ji\x96\xba\xda\xc9\xa5d\xfe\xcf\x00\x00\x00" +
	"\xff\xff\x8d@f\xed"

func init() {
	schemas.Register(schema_aa44738dedfed9a1,
		0x80b38fdd614a8b73,
		0x87799f37b0d1886a,
		0x9bce611bc724ff89,
		0x9cb3381ef5c17635,
		0xc768aaf640842a35,
		0xf56d6f421703b1f7,
		0xf6486a286fedf2f6,
		0xf8f433c185247295)
}
