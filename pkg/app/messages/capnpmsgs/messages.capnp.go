// Code generated by capnpc-go. DO NOT EDIT.

package capnpmsgs

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Envelope struct{ capnp.Struct }

// Envelope_TypeID is the unique identifier for the type Envelope.
const Envelope_TypeID = 0xf38cccd618967ecd

func NewEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Envelope{st}, err
}

func NewRootEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Envelope{st}, err
}

func ReadRootEnvelope(msg *capnp.Message) (Envelope, error) {
	root, err := msg.RootPtr()
	return Envelope{root.Struct()}, err
}

func (s Envelope) String() string {
	str, _ := text.Marshal(0xf38cccd618967ecd, s.Struct)
	return str
}

func (s Envelope) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Envelope) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Envelope) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Envelope) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Envelope) Created() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Envelope) SetCreated(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Envelope) To() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Envelope) HasTo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Envelope) ToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Envelope) SetTo(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Envelope) ReplyTo() (Envelope_ReplyTo, error) {
	p, err := s.Struct.Ptr(2)
	return Envelope_ReplyTo{Struct: p.Struct()}, err
}

func (s Envelope) HasReplyTo() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Envelope) SetReplyTo(v Envelope_ReplyTo) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewReplyTo sets the replyTo field to a newly
// allocated Envelope_ReplyTo struct, preferring placement in s's segment.
func (s Envelope) NewReplyTo() (Envelope_ReplyTo, error) {
	ss, err := NewEnvelope_ReplyTo(s.Struct.Segment())
	if err != nil {
		return Envelope_ReplyTo{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Envelope) CorrelationId() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Envelope) HasCorrelationId() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Envelope) CorrelationIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Envelope) SetCorrelationId(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Envelope) MessageType() uint64 {
	return s.Struct.Uint64(8)
}

func (s Envelope) SetMessageType(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Envelope) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Envelope) HasMessage() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Envelope) SetMessage(v []byte) error {
	return s.Struct.SetData(4, v)
}

// Envelope_List is a list of Envelope.
type Envelope_List struct{ capnp.List }

// NewEnvelope creates a new list of Envelope.
func NewEnvelope_List(s *capnp.Segment, sz int32) (Envelope_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return Envelope_List{l}, err
}

func (s Envelope_List) At(i int) Envelope { return Envelope{s.List.Struct(i)} }

func (s Envelope_List) Set(i int, v Envelope) error { return s.List.SetStruct(i, v.Struct) }

func (s Envelope_List) String() string {
	str, _ := text.MarshalList(0xf38cccd618967ecd, s.List)
	return str
}

// Envelope_Promise is a wrapper for a Envelope promised by a client call.
type Envelope_Promise struct{ *capnp.Pipeline }

func (p Envelope_Promise) Struct() (Envelope, error) {
	s, err := p.Pipeline.Struct()
	return Envelope{s}, err
}

func (p Envelope_Promise) ReplyTo() Envelope_ReplyTo_Promise {
	return Envelope_ReplyTo_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Envelope_ReplyTo struct{ capnp.Struct }

// Envelope_ReplyTo_TypeID is the unique identifier for the type Envelope_ReplyTo.
const Envelope_ReplyTo_TypeID = 0xab748f26e2efa4c7

func NewEnvelope_ReplyTo(s *capnp.Segment) (Envelope_ReplyTo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Envelope_ReplyTo{st}, err
}

func NewRootEnvelope_ReplyTo(s *capnp.Segment) (Envelope_ReplyTo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Envelope_ReplyTo{st}, err
}

func ReadRootEnvelope_ReplyTo(msg *capnp.Message) (Envelope_ReplyTo, error) {
	root, err := msg.RootPtr()
	return Envelope_ReplyTo{root.Struct()}, err
}

func (s Envelope_ReplyTo) String() string {
	str, _ := text.Marshal(0xab748f26e2efa4c7, s.Struct)
	return str
}

func (s Envelope_ReplyTo) To() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Envelope_ReplyTo) HasTo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Envelope_ReplyTo) ToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Envelope_ReplyTo) SetTo(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Envelope_ReplyTo) MessageType() uint64 {
	return s.Struct.Uint64(0)
}

func (s Envelope_ReplyTo) SetMessageType(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Envelope_ReplyTo_List is a list of Envelope_ReplyTo.
type Envelope_ReplyTo_List struct{ capnp.List }

// NewEnvelope_ReplyTo creates a new list of Envelope_ReplyTo.
func NewEnvelope_ReplyTo_List(s *capnp.Segment, sz int32) (Envelope_ReplyTo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Envelope_ReplyTo_List{l}, err
}

func (s Envelope_ReplyTo_List) At(i int) Envelope_ReplyTo { return Envelope_ReplyTo{s.List.Struct(i)} }

func (s Envelope_ReplyTo_List) Set(i int, v Envelope_ReplyTo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Envelope_ReplyTo_List) String() string {
	str, _ := text.MarshalList(0xab748f26e2efa4c7, s.List)
	return str
}

// Envelope_ReplyTo_Promise is a wrapper for a Envelope_ReplyTo promised by a client call.
type Envelope_ReplyTo_Promise struct{ *capnp.Pipeline }

func (p Envelope_ReplyTo_Promise) Struct() (Envelope_ReplyTo, error) {
	s, err := p.Pipeline.Struct()
	return Envelope_ReplyTo{s}, err
}

type MessageProcessingError struct{ capnp.Struct }

// MessageProcessingError_TypeID is the unique identifier for the type MessageProcessingError.
const MessageProcessingError_TypeID = 0xa70dd5f5d238faaa

func NewMessageProcessingError(s *capnp.Segment) (MessageProcessingError, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return MessageProcessingError{st}, err
}

func NewRootMessageProcessingError(s *capnp.Segment) (MessageProcessingError, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return MessageProcessingError{st}, err
}

func ReadRootMessageProcessingError(msg *capnp.Message) (MessageProcessingError, error) {
	root, err := msg.RootPtr()
	return MessageProcessingError{root.Struct()}, err
}

func (s MessageProcessingError) String() string {
	str, _ := text.Marshal(0xa70dd5f5d238faaa, s.Struct)
	return str
}

func (s MessageProcessingError) AppId() uint64 {
	return s.Struct.Uint64(0)
}

func (s MessageProcessingError) SetAppId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s MessageProcessingError) AppInstanceId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MessageProcessingError) HasAppInstanceId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) AppInstanceIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MessageProcessingError) SetAppInstanceId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s MessageProcessingError) FunctionId() uint64 {
	return s.Struct.Uint64(8)
}

func (s MessageProcessingError) SetFunctionId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s MessageProcessingError) MessageId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s MessageProcessingError) HasMessageId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) MessageIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s MessageProcessingError) SetMessageId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s MessageProcessingError) MessageType() uint64 {
	return s.Struct.Uint64(16)
}

func (s MessageProcessingError) SetMessageType(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s MessageProcessingError) ErrCode() uint64 {
	return s.Struct.Uint64(24)
}

func (s MessageProcessingError) SetErrCode(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s MessageProcessingError) ErrMessage() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s MessageProcessingError) HasErrMessage() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) ErrMessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s MessageProcessingError) SetErrMessage(v string) error {
	return s.Struct.SetText(2, v)
}

// MessageProcessingError_List is a list of MessageProcessingError.
type MessageProcessingError_List struct{ capnp.List }

// NewMessageProcessingError creates a new list of MessageProcessingError.
func NewMessageProcessingError_List(s *capnp.Segment, sz int32) (MessageProcessingError_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return MessageProcessingError_List{l}, err
}

func (s MessageProcessingError_List) At(i int) MessageProcessingError {
	return MessageProcessingError{s.List.Struct(i)}
}

func (s MessageProcessingError_List) Set(i int, v MessageProcessingError) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MessageProcessingError_List) String() string {
	str, _ := text.MarshalList(0xa70dd5f5d238faaa, s.List)
	return str
}

// MessageProcessingError_Promise is a wrapper for a MessageProcessingError promised by a client call.
type MessageProcessingError_Promise struct{ *capnp.Pipeline }

func (p MessageProcessingError_Promise) Struct() (MessageProcessingError, error) {
	s, err := p.Pipeline.Struct()
	return MessageProcessingError{s}, err
}

type PingRequest struct{ capnp.Struct }

// PingRequest_TypeID is the unique identifier for the type PingRequest.
const PingRequest_TypeID = 0xa8084ffe960780bb

func NewPingRequest(s *capnp.Segment) (PingRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PingRequest{st}, err
}

func NewRootPingRequest(s *capnp.Segment) (PingRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PingRequest{st}, err
}

func ReadRootPingRequest(msg *capnp.Message) (PingRequest, error) {
	root, err := msg.RootPtr()
	return PingRequest{root.Struct()}, err
}

func (s PingRequest) String() string {
	str, _ := text.Marshal(0xa8084ffe960780bb, s.Struct)
	return str
}

// PingRequest_List is a list of PingRequest.
type PingRequest_List struct{ capnp.List }

// NewPingRequest creates a new list of PingRequest.
func NewPingRequest_List(s *capnp.Segment, sz int32) (PingRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PingRequest_List{l}, err
}

func (s PingRequest_List) At(i int) PingRequest { return PingRequest{s.List.Struct(i)} }

func (s PingRequest_List) Set(i int, v PingRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s PingRequest_List) String() string {
	str, _ := text.MarshalList(0xa8084ffe960780bb, s.List)
	return str
}

// PingRequest_Promise is a wrapper for a PingRequest promised by a client call.
type PingRequest_Promise struct{ *capnp.Pipeline }

func (p PingRequest_Promise) Struct() (PingRequest, error) {
	s, err := p.Pipeline.Struct()
	return PingRequest{s}, err
}

type PingResponse struct{ capnp.Struct }

// PingResponse_TypeID is the unique identifier for the type PingResponse.
const PingResponse_TypeID = 0xc8ea6e5ec7f91c46

func NewPingResponse(s *capnp.Segment) (PingResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PingResponse{st}, err
}

func NewRootPingResponse(s *capnp.Segment) (PingResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PingResponse{st}, err
}

func ReadRootPingResponse(msg *capnp.Message) (PingResponse, error) {
	root, err := msg.RootPtr()
	return PingResponse{root.Struct()}, err
}

func (s PingResponse) String() string {
	str, _ := text.Marshal(0xc8ea6e5ec7f91c46, s.Struct)
	return str
}

func (s PingResponse) From() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PingResponse) HasFrom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PingResponse) FromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PingResponse) SetFrom(v string) error {
	return s.Struct.SetText(0, v)
}

// PingResponse_List is a list of PingResponse.
type PingResponse_List struct{ capnp.List }

// NewPingResponse creates a new list of PingResponse.
func NewPingResponse_List(s *capnp.Segment, sz int32) (PingResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PingResponse_List{l}, err
}

func (s PingResponse_List) At(i int) PingResponse { return PingResponse{s.List.Struct(i)} }

func (s PingResponse_List) Set(i int, v PingResponse) error { return s.List.SetStruct(i, v.Struct) }

func (s PingResponse_List) String() string {
	str, _ := text.MarshalList(0xc8ea6e5ec7f91c46, s.List)
	return str
}

// PingResponse_Promise is a wrapper for a PingResponse promised by a client call.
type PingResponse_Promise struct{ *capnp.Pipeline }

func (p PingResponse_Promise) Struct() (PingResponse, error) {
	s, err := p.Pipeline.Struct()
	return PingResponse{s}, err
}

const schema_87fc44aa3255d2ae = "x\xda\x94TOh\x1cU\x18\xff\xbe\xf7f\xb3mM" +
	"\xd8\x0e\xb3`)\x95y\x82\x88\x95\xb64\xe9\xc1Z\x0a" +
	"m\xd3V\xac(f2\x09h\x0f\xc5\xb73o\xb3\xaf" +
	"\xec\xceL\xdf\x9b5\x8d\x14\xd3\x83b\x95B\x8aJ\x0f" +
	"\xa2\x88\xa2\xa8\x15\x05\x0f=\x89\x17Q\xea\xc1\x82\x16\xed" +
	"A,H `\x0b\xe2ArP\xd4\x917;\xbb\x1b" +
	"\x93m\xa0\xb7\x99\xef\xcf\xef}\xdf\xef\xfd~o\xf7\x14" +
	"9HFK\xb3\x14\xc0{\xa04\x94]\xfak\xef\xb5" +
	"\xe5\x1fG>\x00\xaf\x82V\xf6\xe9\xb5\xe9\xb1KG\xfe" +
	"~\x09J\xb4\x0c\xb0\xe7\x1d\x1cC\xe734\x9f\x9f\xe0" +
	"\x02\x02f\x9f\x9f-_\xfc\xf7\xc9\x0d\x1f\x82]\xc1~" +
	"\xb5U\x06p\x96\xe9O\x0eZe\xa0\xd9\x95\xf7~_" +
	"\xbc\x7f!\xfd\x18\xbc-\x88\xd9\xd5\xe7/n\xb9\xfe\xed" +
	"\xf9?\xa0\x94\x03\xdd\xa0\x04\x9d\x9b\x06\xdeY\xa2\xb3\x80" +
	"\xd9#\xdb\xfe\xbcr\"\xba\xf5\xcd\xff!\xf3b\xe7-" +
	"k\xd1\xf9(G\x7f\xdf:\x00+\xb0\xbc\x0a\x92\x15\xc5" +
	"%S\xf2\x9b\xf5\xa5\xb3l\xdd\x0d\xb0\xe7\x1fk\x01a" +
	"o\xd6\x12Z\xf3\x19\xa1\xe9\xae\x80'Q\xb2\xef\x89\xce" +
	"\xff\x84\x8a\x03\xa1\xb5\x8cf\xdc\xa3J\xc5j\x02\xd1\xdb" +
	"F-\x00\x0b\x01\xec\xcbc\xf6e\xd7\xfb\x81\xa2\xf7\x0b" +
	"A\xc4*\x9a\xe0\x0d\x05\xe0\xfdL\xd1\xfb\x95\xa0M\xb0" +
	"\x8a\x04\xc0^:n\xdft\xfd*R\xf4\x19\x12\xb4)" +
	"V\x91\x028\xf7\xe0\xa4s/\xba\xfe\xa3&3e2" +
	"\x16\xa9\xa2\x85\xe8xXs\xa6\xd1\xf5\xcf\x98\xcc9\x93" +
	")\xd1*\x96\x00\x9c\x17q\x1c\xc0?k\xe2\xe7M|" +
	"\x88Tq\x08\xc0y\x19\x8f\x03\xf8\xe7L\xfcu$\xe8" +
	"\xf2$9\x16z\x16\x92\xec\xc4ko{_\\\x7f\xe5" +
	"k\xf0,\x82\x876#\x0e\x03\xd8\xb8\xef\x00O\x12&" +
	"C\x00\xdc\x08\x047\x02f\xa6%\xd2)\x077\x0a\xc4" +
	"\xb1\x10\x87\x81\xe00`VoGA*\xe3\x08\xe8@" +
	"\xc4m\x05\xe2b\xa6D+N\x05\xab\x93\xa2\x81\xa5\x0d" +
	"\x9e\xb2:\x97\xe5\xa6XyPA\xf71\xc0Ax[" +
	"\x0a\xbcW\xb3:\x97M\x11\xb2\x16v\xea\x99D\x83\xd2" +
	"\x1d\xab@\x99\x82\xf2\\\"\xd6\xc1yw\x0dNj:" +
	"\xfa\xf3\xcc\x0b\xa5\x0e\xc7\xa1\xe8\xcd'\x94\xca\x15\x00t" +
	"F\xac>N\x93B#\x132\x9a\x99\x14\xa7\xda\x82\xea" +
	"t\x02q\x8d\x86\x8eF\xcf\x8af\x9c\x88]\x93\"i" +
	"\xceM\xc5`\xd4\xb3\xa1\xa7\x9e\xed[\xed\xed\xae\xf78" +
	"E\xef\xa9\xbez\xa6k\xf6\xd3\xae\xf7\x02E\xef\x02A" +
	"\x9a\xc6\x03\xb6\xaa\x16[\xa9L\x19\\\xc6CpC%" +
	"\xb4\xbe\x03f:76\x8a\x04\xb3\xb4!\x988\x9d\x08" +
	"\x1a\xa4\"d\x1d\xc8V\x97\xa6\x9c\xa55\xd7\xb6\x8a\x01" +
	"\x9d\xc4\xe5H\x0b\xb3\x9d\xd5\xdbn\xe4A{\xc4\xf5v" +
	"S\xf4\xf6\x13\xac\xd4U\xdcZg\x95\x93\x99)`<" +
	"\x0c\xa12x\x93\xde\x91]R\xc1\xb3\x10\xfb\xcf\x87\x8d" +
	"\xe3\xf3\x05\xcd+\x0d\xba\xd5\x18\xb40c\x97\xe2\xa5q" +
	"{\xc9\xf5\xf7\x1a\x9f\x1c\xc1\xbeG\x9dC\xb8\xd59\x84" +
	"\xae\x9f\x98\xcc\x99\xdc\xa5\xa4\xe3\xd29\x1cw\xe6\xd0\xf5" +
	"\xbf2\x99\xefr\x97\xd2*Z\x00\xceUT\xce\xf7\xe8" +
	"\xfa\x8cP\xf4w\x10\xe3R\xec\xb8t;\xa99;\x89" +
	"\xeb?c2M\x93\x19\xb2:>\x95d\xdc\x91\xc4\xf5" +
	"/\x98\xcc\x9b\x84 \x95\xeb\x9b\xa0\x1d\xc9Smq\x1b" +
	"\x13\xcc\x07J\xf0T\x0cB8R\\\xb2\xa2]\x16\xd9" +
	"\xb0(\xe8cy[\xeeP\xd9\x12:\xe5\xad\x84\xedd" +
	"\\3\xce\xa6#y:\x8f\xee`F\x1bQ\xbbU\x13" +
	"\x8a\xc5u\xa6E\x10G\xa1f\xa2\xc9\x13-B\xa6e" +
	"\x14\x08\xf6\x18\x8f\xda\\\xcd\xb1\xd1\x1dl\xf4\xe1\x87\xdc" +
	"\xddlz\xea0\x00\x96\x80`\x09n#aVL\xb6" +
	"\x09\xb3\xd9F\x9c\x1fC{\x93Im\x84`d B" +
	"\x96\xc6\x80\xbdUUq\xc1k\x01\xf7\x17\x80\xb7H&" +
	"\xa3P\x06<\x15\x9b\xcc.\x1d9K\x9d+<\x178" +
	"O\xf3\xe3t\"\x02Y\x97&\x10\xa4\xb1\xea\x9e\xc8f" +
	"e\xdaXU\xd0\xe5\xae\xd2q\x03n\xee\xab\x0e\x107" +
	"\x03fA\xac\x94h\xf2\x14\\\x19G\x03_\xc8\x83\xc5" +
	"|c4kw\xd6bwu\xbb\x04K\x1bR\xf7=" +
	"\x173\x1e\xc5iC\xa8^h'kk\xc1\x02\xaes" +
	"r\x12.\x95\x8cf\x982O\x8fN\x19\x8f\x8cmu" +
	"\x12GZ\x98\x167\xf7\xcb\x1d<\x06\xf7\x15\xc3\x9d\xec" +
	"\x952\xcb\xec\xca\xea\xb1\xca\xb9\x10\xad\x9a\x08C\x11\xb2" +
	"\x9a\x8c\xccU\xb7\x84\xae\x98\xb2\x15\x0fh\xd1\xb8\x8e\x8e" +
	"\xdf\xc8\xb4P\x927\xe5s\xd8%\x95\xe6\x10#@p" +
	"\x04\xf0\xbf\x00\x00\x00\xff\xff\xca\x8fT\x8b"

func init() {
	schemas.Register(schema_87fc44aa3255d2ae,
		0xa70dd5f5d238faaa,
		0xa8084ffe960780bb,
		0xab748f26e2efa4c7,
		0xc8ea6e5ec7f91c46,
		0xf38cccd618967ecd)
}
