// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RPCServerSpec struct{ capnp.Struct }

// RPCServerSpec_TypeID is the unique identifier for the type RPCServerSpec.
const RPCServerSpec_TypeID = 0xfc13c8456771ca68

func NewRPCServerSpec(s *capnp.Segment) (RPCServerSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RPCServerSpec{st}, err
}

func NewRootRPCServerSpec(s *capnp.Segment) (RPCServerSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RPCServerSpec{st}, err
}

func ReadRootRPCServerSpec(msg *capnp.Message) (RPCServerSpec, error) {
	root, err := msg.RootPtr()
	return RPCServerSpec{root.Struct()}, err
}

func (s RPCServerSpec) String() string {
	str, _ := text.Marshal(0xfc13c8456771ca68, s.Struct)
	return str
}

func (s RPCServerSpec) RpcServiceSpec() (RPCServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return RPCServiceSpec{Struct: p.Struct()}, err
}

func (s RPCServerSpec) HasRpcServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RPCServerSpec) SetRpcServiceSpec(v RPCServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRpcServiceSpec sets the rpcServiceSpec field to a newly
// allocated RPCServiceSpec struct, preferring placement in s's segment.
func (s RPCServerSpec) NewRpcServiceSpec() (RPCServiceSpec, error) {
	ss, err := NewRPCServiceSpec(s.Struct.Segment())
	if err != nil {
		return RPCServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCServerSpec) ServerCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s RPCServerSpec) HasServerCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RPCServerSpec) SetServerCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewServerCert sets the serverCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s RPCServerSpec) NewServerCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCServerSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s RPCServerSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RPCServerSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s RPCServerSpec) MaxConns() uint32 {
	return s.Struct.Uint32(0)
}

func (s RPCServerSpec) SetMaxConns(v uint32) {
	s.Struct.SetUint32(0, v)
}

// RPCServerSpec_List is a list of RPCServerSpec.
type RPCServerSpec_List struct{ capnp.List }

// NewRPCServerSpec creates a new list of RPCServerSpec.
func NewRPCServerSpec_List(s *capnp.Segment, sz int32) (RPCServerSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return RPCServerSpec_List{l}, err
}

func (s RPCServerSpec_List) At(i int) RPCServerSpec { return RPCServerSpec{s.List.Struct(i)} }

func (s RPCServerSpec_List) Set(i int, v RPCServerSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s RPCServerSpec_List) String() string {
	str, _ := text.MarshalList(0xfc13c8456771ca68, s.List)
	return str
}

// RPCServerSpec_Promise is a wrapper for a RPCServerSpec promised by a client call.
type RPCServerSpec_Promise struct{ *capnp.Pipeline }

func (p RPCServerSpec_Promise) Struct() (RPCServerSpec, error) {
	s, err := p.Pipeline.Struct()
	return RPCServerSpec{s}, err
}

func (p RPCServerSpec_Promise) RpcServiceSpec() RPCServiceSpec_Promise {
	return RPCServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p RPCServerSpec_Promise) ServerCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type RPCClientSpec struct{ capnp.Struct }

// RPCClientSpec_TypeID is the unique identifier for the type RPCClientSpec.
const RPCClientSpec_TypeID = 0xbec6688394d29776

func NewRPCClientSpec(s *capnp.Segment) (RPCClientSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RPCClientSpec{st}, err
}

func NewRootRPCClientSpec(s *capnp.Segment) (RPCClientSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RPCClientSpec{st}, err
}

func ReadRootRPCClientSpec(msg *capnp.Message) (RPCClientSpec, error) {
	root, err := msg.RootPtr()
	return RPCClientSpec{root.Struct()}, err
}

func (s RPCClientSpec) String() string {
	str, _ := text.Marshal(0xbec6688394d29776, s.Struct)
	return str
}

func (s RPCClientSpec) RpcServiceSpec() (RPCServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return RPCServiceSpec{Struct: p.Struct()}, err
}

func (s RPCClientSpec) HasRpcServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RPCClientSpec) SetRpcServiceSpec(v RPCServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRpcServiceSpec sets the rpcServiceSpec field to a newly
// allocated RPCServiceSpec struct, preferring placement in s's segment.
func (s RPCClientSpec) NewRpcServiceSpec() (RPCServiceSpec, error) {
	ss, err := NewRPCServiceSpec(s.Struct.Segment())
	if err != nil {
		return RPCServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCClientSpec) ClientCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s RPCClientSpec) HasClientCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RPCClientSpec) SetClientCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewClientCert sets the clientCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s RPCClientSpec) NewClientCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCClientSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s RPCClientSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RPCClientSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

// RPCClientSpec_List is a list of RPCClientSpec.
type RPCClientSpec_List struct{ capnp.List }

// NewRPCClientSpec creates a new list of RPCClientSpec.
func NewRPCClientSpec_List(s *capnp.Segment, sz int32) (RPCClientSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return RPCClientSpec_List{l}, err
}

func (s RPCClientSpec_List) At(i int) RPCClientSpec { return RPCClientSpec{s.List.Struct(i)} }

func (s RPCClientSpec_List) Set(i int, v RPCClientSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s RPCClientSpec_List) String() string {
	str, _ := text.MarshalList(0xbec6688394d29776, s.List)
	return str
}

// RPCClientSpec_Promise is a wrapper for a RPCClientSpec promised by a client call.
type RPCClientSpec_Promise struct{ *capnp.Pipeline }

func (p RPCClientSpec_Promise) Struct() (RPCClientSpec, error) {
	s, err := p.Pipeline.Struct()
	return RPCClientSpec{s}, err
}

func (p RPCClientSpec_Promise) RpcServiceSpec() RPCServiceSpec_Promise {
	return RPCServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p RPCClientSpec_Promise) ClientCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type RPCServiceSpec struct{ capnp.Struct }

// RPCServiceSpec_TypeID is the unique identifier for the type RPCServiceSpec.
const RPCServiceSpec_TypeID = 0xb6e32df5c504ebf2

func NewRPCServiceSpec(s *capnp.Segment) (RPCServiceSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return RPCServiceSpec{st}, err
}

func NewRootRPCServiceSpec(s *capnp.Segment) (RPCServiceSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return RPCServiceSpec{st}, err
}

func ReadRootRPCServiceSpec(msg *capnp.Message) (RPCServiceSpec, error) {
	root, err := msg.RootPtr()
	return RPCServiceSpec{root.Struct()}, err
}

func (s RPCServiceSpec) String() string {
	str, _ := text.Marshal(0xb6e32df5c504ebf2, s.Struct)
	return str
}

func (s RPCServiceSpec) DomainID() uint64 {
	return s.Struct.Uint64(0)
}

func (s RPCServiceSpec) SetDomainID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s RPCServiceSpec) AppId() uint64 {
	return s.Struct.Uint64(8)
}

func (s RPCServiceSpec) SetAppId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s RPCServiceSpec) ServiceId() uint64 {
	return s.Struct.Uint64(16)
}

func (s RPCServiceSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s RPCServiceSpec) Port() uint16 {
	return s.Struct.Uint16(24)
}

func (s RPCServiceSpec) SetPort(v uint16) {
	s.Struct.SetUint16(24, v)
}

// RPCServiceSpec_List is a list of RPCServiceSpec.
type RPCServiceSpec_List struct{ capnp.List }

// NewRPCServiceSpec creates a new list of RPCServiceSpec.
func NewRPCServiceSpec_List(s *capnp.Segment, sz int32) (RPCServiceSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return RPCServiceSpec_List{l}, err
}

func (s RPCServiceSpec_List) At(i int) RPCServiceSpec { return RPCServiceSpec{s.List.Struct(i)} }

func (s RPCServiceSpec_List) Set(i int, v RPCServiceSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s RPCServiceSpec_List) String() string {
	str, _ := text.MarshalList(0xb6e32df5c504ebf2, s.List)
	return str
}

// RPCServiceSpec_Promise is a wrapper for a RPCServiceSpec promised by a client call.
type RPCServiceSpec_Promise struct{ *capnp.Pipeline }

func (p RPCServiceSpec_Promise) Struct() (RPCServiceSpec, error) {
	s, err := p.Pipeline.Struct()
	return RPCServiceSpec{s}, err
}

type X509KeyPair struct{ capnp.Struct }

// X509KeyPair_TypeID is the unique identifier for the type X509KeyPair.
const X509KeyPair_TypeID = 0xf4dd73213f6e70a6

func NewX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func NewRootX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func ReadRootX509KeyPair(msg *capnp.Message) (X509KeyPair, error) {
	root, err := msg.RootPtr()
	return X509KeyPair{root.Struct()}, err
}

func (s X509KeyPair) String() string {
	str, _ := text.Marshal(0xf4dd73213f6e70a6, s.Struct)
	return str
}

func (s X509KeyPair) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s X509KeyPair) Cert() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetCert(v []byte) error {
	return s.Struct.SetData(1, v)
}

// X509KeyPair_List is a list of X509KeyPair.
type X509KeyPair_List struct{ capnp.List }

// NewX509KeyPair creates a new list of X509KeyPair.
func NewX509KeyPair_List(s *capnp.Segment, sz int32) (X509KeyPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return X509KeyPair_List{l}, err
}

func (s X509KeyPair_List) At(i int) X509KeyPair { return X509KeyPair{s.List.Struct(i)} }

func (s X509KeyPair_List) Set(i int, v X509KeyPair) error { return s.List.SetStruct(i, v.Struct) }

func (s X509KeyPair_List) String() string {
	str, _ := text.MarshalList(0xf4dd73213f6e70a6, s.List)
	return str
}

// X509KeyPair_Promise is a wrapper for a X509KeyPair promised by a client call.
type X509KeyPair_Promise struct{ *capnp.Pipeline }

func (p X509KeyPair_Promise) Struct() (X509KeyPair, error) {
	s, err := p.Pipeline.Struct()
	return X509KeyPair{s}, err
}

const schema_99f3cbccce65aee8 = "x\xda\xac\x92Oh\xd3n\x1c\xc6\x9f\xe7}\xb3_\xb7" +
	"\xb1\xb1\x86\xf4\xde\xfdD\x0f\x1bL\xa6 h/U\xba" +
	"\x1e\xaa\x0e\xfan\x14\xa6\xa0\x18\xd2\xcc\x06\xdb4K\xb3" +
	"\xd9\x0d\x05\xff\x9d\xbc*\x88'o\x1e\x15<x\xd3\xc3" +
	"`\"S<\x08\x0a\x1ev\xf20\xc1\x9b\x7fnB$" +
	"\xa9K\xc3\x14\x14\xf1\xf6\xcd\x9b'o>\xcf\xf7y\xa6" +
	"\xeb<*\x0e\x0c\xe4%\xa0\xf6\x0e\xfc\x17~\xfa\xa8m" +
	"|\x9dz\xff\x18j\x98Z\xf8\xe1\x81\xfd\xea\xe5\x8b\xcf" +
	"w\xa1e\x00c\x99\x9b\xc6UF\xd3en\x83\xe1\xca" +
	"\x9d\xd7\xb7\xaf7\x9e=\x85>\xcc\xbet@F\x8aS" +
	"b\xdd0E4\x9d\x11\x0f\xc1\xf0\xbe\xe7\x16\xff\xefl" +
	"}\xd9\xa5\x8d\x15\xfb\xe4#c*\xfejB^\x04\xc3" +
	"\xc6\xe6\xd2\xf9\xf2s\xe3[\xc4\xf0\xd3\xc5o\xe4\xba\xb1" +
	"\x15O\xef\xe46\x0e\x87\xbeg\xed\xb7L\xcf\x15^a" +
	"\xaeZ\x9a\xb7\xfd\x15\xc7\xb2\xe7=\xdb\x02\xaa\xa4\xcaJ" +
	"\x0d\xd0\x08\xe8\xe6q@\x9d\x93TMA\x9d\xcc1:" +
	"t\x0e\x02\xaa.\xa9<A]\x88\x1c\x05\xa0\xb7\xe6\x00" +
	"\xd5\x94T]A]\x8e\xe4(\x01}y\x12P\x9e\xa4" +
	"\xba$\x18\xd6\xdb-\xd3q+3\x008\x04\xc1!0" +
	"oz^\xa5\xbe\xf3\x14vz \x1509\x1b\xf3\xda" +
	"~\xc0\x0c\x043\xe0.\xeeR\xd3\xb1\xdd \xc6\x8e\xa8" +
	"G\x12\xea\xf2\x1a\xa0f$U5E={\x1aP'" +
	"%\xd5B\x8a\xbaV\xd0ky\xd5\x95T7D|}" +
	"\xbc\x0b\x14{\xdb`\xb6\x1f-\xc8,\x18Z\xf1?K" +
	"6\xa4\x1f0\xdbO\xa8\xf7\xbah\x99%\xdb\x0f\x94F" +
	"\x11\x9e\xbduO=y{s\x03J\x13<\x96#G" +
	"\x00\x9d\xd7\xc2jyv|\xd1i\xda\x1c_l\xfb-" +
	"3\x88\xd61\x0a\xc1\xd1\x94?z\x85\x85C\xd3GN" +
	"\xd8\xf9\xd5\xaa\xe9\xf8\x91\xbb\xc1\xc4\xdd\xc4\x1e}\"\x9f" +
	"8\xd9\xb1W\x9bL9\xc9\\\xb0W\xff\x16b\xcc\xfa" +
	"\x17\x0e\xfa\xcd\xb2\xfd$\xa1T\xaf\xd6~\xd5\xab(\xa1" +
	"\x86\xa4\x0aR\x09-\x15\xfa\xbd\xa2\xfcQ\xab\xa8\x95\x81" +
	"\xa4\xba\xf2g\xa1ub\x8c\xdf\x84\x96Xh\x99\xddR" +
	"\xdbu;\x91\xadA\x08\x0e\x82\xdf\x03\x00\x00\xff\xff(" +
	"\x94\xfc\xae"

func init() {
	schemas.Register(schema_99f3cbccce65aee8,
		0xb6e32df5c504ebf2,
		0xbec6688394d29776,
		0xf4dd73213f6e70a6,
		0xfc13c8456771ca68)
}
