// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RPCServerSpec struct{ capnp.Struct }

// RPCServerSpec_TypeID is the unique identifier for the type RPCServerSpec.
const RPCServerSpec_TypeID = 0xfc13c8456771ca68

func NewRPCServerSpec(s *capnp.Segment) (RPCServerSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RPCServerSpec{st}, err
}

func NewRootRPCServerSpec(s *capnp.Segment) (RPCServerSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RPCServerSpec{st}, err
}

func ReadRootRPCServerSpec(msg *capnp.Message) (RPCServerSpec, error) {
	root, err := msg.RootPtr()
	return RPCServerSpec{root.Struct()}, err
}

func (s RPCServerSpec) String() string {
	str, _ := text.Marshal(0xfc13c8456771ca68, s.Struct)
	return str
}

func (s RPCServerSpec) RpcServiceSpec() (RPCServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return RPCServiceSpec{Struct: p.Struct()}, err
}

func (s RPCServerSpec) HasRpcServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RPCServerSpec) SetRpcServiceSpec(v RPCServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRpcServiceSpec sets the rpcServiceSpec field to a newly
// allocated RPCServiceSpec struct, preferring placement in s's segment.
func (s RPCServerSpec) NewRpcServiceSpec() (RPCServiceSpec, error) {
	ss, err := NewRPCServiceSpec(s.Struct.Segment())
	if err != nil {
		return RPCServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCServerSpec) ServerCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s RPCServerSpec) HasServerCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RPCServerSpec) SetServerCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewServerCert sets the serverCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s RPCServerSpec) NewServerCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCServerSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s RPCServerSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RPCServerSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s RPCServerSpec) MaxConns() uint32 {
	return s.Struct.Uint32(0)
}

func (s RPCServerSpec) SetMaxConns(v uint32) {
	s.Struct.SetUint32(0, v)
}

// RPCServerSpec_List is a list of RPCServerSpec.
type RPCServerSpec_List struct{ capnp.List }

// NewRPCServerSpec creates a new list of RPCServerSpec.
func NewRPCServerSpec_List(s *capnp.Segment, sz int32) (RPCServerSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return RPCServerSpec_List{l}, err
}

func (s RPCServerSpec_List) At(i int) RPCServerSpec { return RPCServerSpec{s.List.Struct(i)} }

func (s RPCServerSpec_List) Set(i int, v RPCServerSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s RPCServerSpec_List) String() string {
	str, _ := text.MarshalList(0xfc13c8456771ca68, s.List)
	return str
}

// RPCServerSpec_Promise is a wrapper for a RPCServerSpec promised by a client call.
type RPCServerSpec_Promise struct{ *capnp.Pipeline }

func (p RPCServerSpec_Promise) Struct() (RPCServerSpec, error) {
	s, err := p.Pipeline.Struct()
	return RPCServerSpec{s}, err
}

func (p RPCServerSpec_Promise) RpcServiceSpec() RPCServiceSpec_Promise {
	return RPCServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p RPCServerSpec_Promise) ServerCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type RPCClientSpec struct{ capnp.Struct }

// RPCClientSpec_TypeID is the unique identifier for the type RPCClientSpec.
const RPCClientSpec_TypeID = 0xbec6688394d29776

func NewRPCClientSpec(s *capnp.Segment) (RPCClientSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RPCClientSpec{st}, err
}

func NewRootRPCClientSpec(s *capnp.Segment) (RPCClientSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RPCClientSpec{st}, err
}

func ReadRootRPCClientSpec(msg *capnp.Message) (RPCClientSpec, error) {
	root, err := msg.RootPtr()
	return RPCClientSpec{root.Struct()}, err
}

func (s RPCClientSpec) String() string {
	str, _ := text.Marshal(0xbec6688394d29776, s.Struct)
	return str
}

func (s RPCClientSpec) RpcServiceSpec() (RPCServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return RPCServiceSpec{Struct: p.Struct()}, err
}

func (s RPCClientSpec) HasRpcServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RPCClientSpec) SetRpcServiceSpec(v RPCServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRpcServiceSpec sets the rpcServiceSpec field to a newly
// allocated RPCServiceSpec struct, preferring placement in s's segment.
func (s RPCClientSpec) NewRpcServiceSpec() (RPCServiceSpec, error) {
	ss, err := NewRPCServiceSpec(s.Struct.Segment())
	if err != nil {
		return RPCServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCClientSpec) ClientCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s RPCClientSpec) HasClientCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RPCClientSpec) SetClientCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewClientCert sets the clientCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s RPCClientSpec) NewClientCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCClientSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s RPCClientSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RPCClientSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

// RPCClientSpec_List is a list of RPCClientSpec.
type RPCClientSpec_List struct{ capnp.List }

// NewRPCClientSpec creates a new list of RPCClientSpec.
func NewRPCClientSpec_List(s *capnp.Segment, sz int32) (RPCClientSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return RPCClientSpec_List{l}, err
}

func (s RPCClientSpec_List) At(i int) RPCClientSpec { return RPCClientSpec{s.List.Struct(i)} }

func (s RPCClientSpec_List) Set(i int, v RPCClientSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s RPCClientSpec_List) String() string {
	str, _ := text.MarshalList(0xbec6688394d29776, s.List)
	return str
}

// RPCClientSpec_Promise is a wrapper for a RPCClientSpec promised by a client call.
type RPCClientSpec_Promise struct{ *capnp.Pipeline }

func (p RPCClientSpec_Promise) Struct() (RPCClientSpec, error) {
	s, err := p.Pipeline.Struct()
	return RPCClientSpec{s}, err
}

func (p RPCClientSpec_Promise) RpcServiceSpec() RPCServiceSpec_Promise {
	return RPCServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p RPCClientSpec_Promise) ClientCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type RPCServiceSpec struct{ capnp.Struct }

// RPCServiceSpec_TypeID is the unique identifier for the type RPCServiceSpec.
const RPCServiceSpec_TypeID = 0xb6e32df5c504ebf2

func NewRPCServiceSpec(s *capnp.Segment) (RPCServiceSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return RPCServiceSpec{st}, err
}

func NewRootRPCServiceSpec(s *capnp.Segment) (RPCServiceSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return RPCServiceSpec{st}, err
}

func ReadRootRPCServiceSpec(msg *capnp.Message) (RPCServiceSpec, error) {
	root, err := msg.RootPtr()
	return RPCServiceSpec{root.Struct()}, err
}

func (s RPCServiceSpec) String() string {
	str, _ := text.Marshal(0xb6e32df5c504ebf2, s.Struct)
	return str
}

func (s RPCServiceSpec) DomainID() uint64 {
	return s.Struct.Uint64(0)
}

func (s RPCServiceSpec) SetDomainID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s RPCServiceSpec) AppId() uint64 {
	return s.Struct.Uint64(8)
}

func (s RPCServiceSpec) SetAppId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s RPCServiceSpec) ServiceId() uint64 {
	return s.Struct.Uint64(16)
}

func (s RPCServiceSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s RPCServiceSpec) Port() uint16 {
	return s.Struct.Uint16(24)
}

func (s RPCServiceSpec) SetPort(v uint16) {
	s.Struct.SetUint16(24, v)
}

// RPCServiceSpec_List is a list of RPCServiceSpec.
type RPCServiceSpec_List struct{ capnp.List }

// NewRPCServiceSpec creates a new list of RPCServiceSpec.
func NewRPCServiceSpec_List(s *capnp.Segment, sz int32) (RPCServiceSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return RPCServiceSpec_List{l}, err
}

func (s RPCServiceSpec_List) At(i int) RPCServiceSpec { return RPCServiceSpec{s.List.Struct(i)} }

func (s RPCServiceSpec_List) Set(i int, v RPCServiceSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s RPCServiceSpec_List) String() string {
	str, _ := text.MarshalList(0xb6e32df5c504ebf2, s.List)
	return str
}

// RPCServiceSpec_Promise is a wrapper for a RPCServiceSpec promised by a client call.
type RPCServiceSpec_Promise struct{ *capnp.Pipeline }

func (p RPCServiceSpec_Promise) Struct() (RPCServiceSpec, error) {
	s, err := p.Pipeline.Struct()
	return RPCServiceSpec{s}, err
}

type X509KeyPair struct{ capnp.Struct }

// X509KeyPair_TypeID is the unique identifier for the type X509KeyPair.
const X509KeyPair_TypeID = 0xf4dd73213f6e70a6

func NewX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func NewRootX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func ReadRootX509KeyPair(msg *capnp.Message) (X509KeyPair, error) {
	root, err := msg.RootPtr()
	return X509KeyPair{root.Struct()}, err
}

func (s X509KeyPair) String() string {
	str, _ := text.Marshal(0xf4dd73213f6e70a6, s.Struct)
	return str
}

func (s X509KeyPair) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s X509KeyPair) Cert() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetCert(v []byte) error {
	return s.Struct.SetData(1, v)
}

// X509KeyPair_List is a list of X509KeyPair.
type X509KeyPair_List struct{ capnp.List }

// NewX509KeyPair creates a new list of X509KeyPair.
func NewX509KeyPair_List(s *capnp.Segment, sz int32) (X509KeyPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return X509KeyPair_List{l}, err
}

func (s X509KeyPair_List) At(i int) X509KeyPair { return X509KeyPair{s.List.Struct(i)} }

func (s X509KeyPair_List) Set(i int, v X509KeyPair) error { return s.List.SetStruct(i, v.Struct) }

func (s X509KeyPair_List) String() string {
	str, _ := text.MarshalList(0xf4dd73213f6e70a6, s.List)
	return str
}

// X509KeyPair_Promise is a wrapper for a X509KeyPair promised by a client call.
type X509KeyPair_Promise struct{ *capnp.Pipeline }

func (p X509KeyPair_Promise) Struct() (X509KeyPair, error) {
	s, err := p.Pipeline.Struct()
	return X509KeyPair{s}, err
}

const schema_db8274f9144abc7e = "x\xda\xac\x92AH\x14_\x1c\xc7\xbf\xdf\xf7\xc6\xff*" +
	"\xb8\xb8\xc3\xec}\xfdG\x17\x85B\x03\xa1\xbcX\xac\x1e" +
	"\xb4\x84}.\x82u\x88\x86\xf1\xa9C\xbb\xb3\xcf\xd9\xd1" +
	"T*\xca:u-\xe8\xd8\xadk\xb7N\xd5\xcd\x08\x8f" +
	"\x1d:\x18^\x8a\x90\xe8\x16u\x08\x82\x89\x99\xd5\xd9\xa5" +
	"\x0d\x8a\xe8\xf6\xdb\xb7\xbf\x99\xf9|\xde\xf7;\xb2\xcc\xb3" +
	"b\xb4\xa7$\x01u\xbc\xe7\xbf\xf8\xf3'k\xe7\xeb\x89" +
	"\xf7O\xa1\xf2\xb4\xe2\x9b\xcff\x8a\xdf\xa2\xed\xb7\xb0r" +
	"\x80\xb3\xc6w\xcem&\xd3\x0d\x1e\x80\xf1\xfa\xc3\xd7\x0f" +
	"\xee\xac\xbc|\x01;\xcf\xf6j\x8fL6.\x8a=G" +
	"\x8bdr\xc5\x130~l\x82\x89\xff\x9b\xfb_~\xda" +
	"M7\x86\xe4\xae3\x96>5*\xaf\x81\xf1\xca\xee\xea" +
	"\xf2\xd4+\xe7{\xc2\xd0\xf5\xe2}\xb9\xe7|L\xa7\x0f" +
	"\xf2\x00\xa7c\xaf\x11,\xf9\xcb'=\xe1\x9a\xc0\x8c\xcf" +
	"U\xcaU\x1d\xae\xfb\x9e\xae\xe6\x8c\xf6*\xa4*H\x0b" +
	"\xb0\x08\xd8\xee\x0c\xa0\xaeH\xaa\x9a\xa0M\x16\x99\x1c\xfa" +
	"\xa7\x00\xb5(\xa9\x8c\xa0-D\x91\x02\xb0\xebs\x80\xaa" +
	"I\xaa\x0dA[\xf6\x17)\x01{m\x18PFR]" +
	"\x17\x8c\x17\x1bu\xd7\x0f\xa6'\x01\xb0\x0f\x82}`\xc9" +
	"5fz\xf1\xe8W\xdclqL\x83\xd9\xd9\x80i\x84" +
	"\x11s\x10\xcc\x81\xdd\xe4\xe5\x9a\xaf\x83\xa8jd\x0b\xbc" +
	"?\x03\x9f\xda\x02\xd4\xa4\xa4\xaat\x80\xcf^\x02\xd4\x05" +
	"I\xb5\xd0\x01>?n\xcf\x97\xd4\x86\xa4\xba+\x18\x87" +
	"\xc6Ko\x03\x13\x9e\xae\x1a\xed\xb1\xd0\xce\x17d!\x81" +
	"H\xbfY\xd6\x90a\xc4B;\xa6\xd6\xdf\x13\x9e[\xd6" +
	"a\xa4,\x8a\xf8\xf2\xfdG\xea\xf9\x9b{;P\x96\xe0" +
	"\xb9\"\xd9\x0f\xd8\xdc\x8e+S\xb3\x83K~Msp" +
	"\xa9\x11\xd6\xdd(\xb9\x91<\x04\xf3]\x8a\x0bc#g" +
	"\xce\xeb\xcd\x8a\xeb\x87@b\xd8\x9b\x19\x0e\x1d\xb3\x87J" +
	"\x99\xcd\x91\xe2\xfcp\x87M\xee\xaa\xde\xfc[\x90\x01\xef" +
	"\xdfY\x1cVL\x87YP\x1d\x0d\xdb\xfaU\xc3\x92\xa0" +
	"V$U\xd4\x11\xd4\xeax\xbba\x94\x87\x05K\xfa\x19" +
	"I\xaa[\x7f\x96]3\xc5\xf8Mv\x99E\xdd\xdd(" +
	"7\x82\xa0\x99\x98\xf5B\xb0\x17\xfc\x11\x00\x00\xff\xff\x84" +
	"\xca\xfb\xe4"

func init() {
	schemas.Register(schema_db8274f9144abc7e,
		0xb6e32df5c504ebf2,
		0xbec6688394d29776,
		0xf4dd73213f6e70a6,
		0xfc13c8456771ca68)
}
