// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RPCServerSpec struct{ capnp.Struct }

// RPCServerSpec_TypeID is the unique identifier for the type RPCServerSpec.
const RPCServerSpec_TypeID = 0xfc13c8456771ca68

func NewRPCServerSpec(s *capnp.Segment) (RPCServerSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RPCServerSpec{st}, err
}

func NewRootRPCServerSpec(s *capnp.Segment) (RPCServerSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RPCServerSpec{st}, err
}

func ReadRootRPCServerSpec(msg *capnp.Message) (RPCServerSpec, error) {
	root, err := msg.RootPtr()
	return RPCServerSpec{root.Struct()}, err
}

func (s RPCServerSpec) String() string {
	str, _ := text.Marshal(0xfc13c8456771ca68, s.Struct)
	return str
}

func (s RPCServerSpec) RpcServiceSpec() (RPCServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return RPCServiceSpec{Struct: p.Struct()}, err
}

func (s RPCServerSpec) HasRpcServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RPCServerSpec) SetRpcServiceSpec(v RPCServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRpcServiceSpec sets the rpcServiceSpec field to a newly
// allocated RPCServiceSpec struct, preferring placement in s's segment.
func (s RPCServerSpec) NewRpcServiceSpec() (RPCServiceSpec, error) {
	ss, err := NewRPCServiceSpec(s.Struct.Segment())
	if err != nil {
		return RPCServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCServerSpec) ServerCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s RPCServerSpec) HasServerCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RPCServerSpec) SetServerCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewServerCert sets the serverCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s RPCServerSpec) NewServerCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCServerSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s RPCServerSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RPCServerSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s RPCServerSpec) MaxConns() uint32 {
	return s.Struct.Uint32(0)
}

func (s RPCServerSpec) SetMaxConns(v uint32) {
	s.Struct.SetUint32(0, v)
}

// RPCServerSpec_List is a list of RPCServerSpec.
type RPCServerSpec_List struct{ capnp.List }

// NewRPCServerSpec creates a new list of RPCServerSpec.
func NewRPCServerSpec_List(s *capnp.Segment, sz int32) (RPCServerSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return RPCServerSpec_List{l}, err
}

func (s RPCServerSpec_List) At(i int) RPCServerSpec { return RPCServerSpec{s.List.Struct(i)} }

func (s RPCServerSpec_List) Set(i int, v RPCServerSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s RPCServerSpec_List) String() string {
	str, _ := text.MarshalList(0xfc13c8456771ca68, s.List)
	return str
}

// RPCServerSpec_Promise is a wrapper for a RPCServerSpec promised by a client call.
type RPCServerSpec_Promise struct{ *capnp.Pipeline }

func (p RPCServerSpec_Promise) Struct() (RPCServerSpec, error) {
	s, err := p.Pipeline.Struct()
	return RPCServerSpec{s}, err
}

func (p RPCServerSpec_Promise) RpcServiceSpec() RPCServiceSpec_Promise {
	return RPCServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p RPCServerSpec_Promise) ServerCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type RPCClientSpec struct{ capnp.Struct }

// RPCClientSpec_TypeID is the unique identifier for the type RPCClientSpec.
const RPCClientSpec_TypeID = 0xbec6688394d29776

func NewRPCClientSpec(s *capnp.Segment) (RPCClientSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RPCClientSpec{st}, err
}

func NewRootRPCClientSpec(s *capnp.Segment) (RPCClientSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RPCClientSpec{st}, err
}

func ReadRootRPCClientSpec(msg *capnp.Message) (RPCClientSpec, error) {
	root, err := msg.RootPtr()
	return RPCClientSpec{root.Struct()}, err
}

func (s RPCClientSpec) String() string {
	str, _ := text.Marshal(0xbec6688394d29776, s.Struct)
	return str
}

func (s RPCClientSpec) RpcServiceSpec() (RPCServiceSpec, error) {
	p, err := s.Struct.Ptr(0)
	return RPCServiceSpec{Struct: p.Struct()}, err
}

func (s RPCClientSpec) HasRpcServiceSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RPCClientSpec) SetRpcServiceSpec(v RPCServiceSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRpcServiceSpec sets the rpcServiceSpec field to a newly
// allocated RPCServiceSpec struct, preferring placement in s's segment.
func (s RPCClientSpec) NewRpcServiceSpec() (RPCServiceSpec, error) {
	ss, err := NewRPCServiceSpec(s.Struct.Segment())
	if err != nil {
		return RPCServiceSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCClientSpec) ClientCert() (X509KeyPair, error) {
	p, err := s.Struct.Ptr(1)
	return X509KeyPair{Struct: p.Struct()}, err
}

func (s RPCClientSpec) HasClientCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RPCClientSpec) SetClientCert(v X509KeyPair) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewClientCert sets the clientCert field to a newly
// allocated X509KeyPair struct, preferring placement in s's segment.
func (s RPCClientSpec) NewClientCert() (X509KeyPair, error) {
	ss, err := NewX509KeyPair(s.Struct.Segment())
	if err != nil {
		return X509KeyPair{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s RPCClientSpec) CaCert() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s RPCClientSpec) HasCaCert() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RPCClientSpec) SetCaCert(v []byte) error {
	return s.Struct.SetData(2, v)
}

// RPCClientSpec_List is a list of RPCClientSpec.
type RPCClientSpec_List struct{ capnp.List }

// NewRPCClientSpec creates a new list of RPCClientSpec.
func NewRPCClientSpec_List(s *capnp.Segment, sz int32) (RPCClientSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return RPCClientSpec_List{l}, err
}

func (s RPCClientSpec_List) At(i int) RPCClientSpec { return RPCClientSpec{s.List.Struct(i)} }

func (s RPCClientSpec_List) Set(i int, v RPCClientSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s RPCClientSpec_List) String() string {
	str, _ := text.MarshalList(0xbec6688394d29776, s.List)
	return str
}

// RPCClientSpec_Promise is a wrapper for a RPCClientSpec promised by a client call.
type RPCClientSpec_Promise struct{ *capnp.Pipeline }

func (p RPCClientSpec_Promise) Struct() (RPCClientSpec, error) {
	s, err := p.Pipeline.Struct()
	return RPCClientSpec{s}, err
}

func (p RPCClientSpec_Promise) RpcServiceSpec() RPCServiceSpec_Promise {
	return RPCServiceSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p RPCClientSpec_Promise) ClientCert() X509KeyPair_Promise {
	return X509KeyPair_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type RPCServiceSpec struct{ capnp.Struct }

// RPCServiceSpec_TypeID is the unique identifier for the type RPCServiceSpec.
const RPCServiceSpec_TypeID = 0xb6e32df5c504ebf2

func NewRPCServiceSpec(s *capnp.Segment) (RPCServiceSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return RPCServiceSpec{st}, err
}

func NewRootRPCServiceSpec(s *capnp.Segment) (RPCServiceSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return RPCServiceSpec{st}, err
}

func ReadRootRPCServiceSpec(msg *capnp.Message) (RPCServiceSpec, error) {
	root, err := msg.RootPtr()
	return RPCServiceSpec{root.Struct()}, err
}

func (s RPCServiceSpec) String() string {
	str, _ := text.Marshal(0xb6e32df5c504ebf2, s.Struct)
	return str
}

func (s RPCServiceSpec) DomainID() uint64 {
	return s.Struct.Uint64(0)
}

func (s RPCServiceSpec) SetDomainID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s RPCServiceSpec) AppId() uint64 {
	return s.Struct.Uint64(8)
}

func (s RPCServiceSpec) SetAppId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s RPCServiceSpec) ServiceId() uint64 {
	return s.Struct.Uint64(16)
}

func (s RPCServiceSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s RPCServiceSpec) Port() uint16 {
	return s.Struct.Uint16(24)
}

func (s RPCServiceSpec) SetPort(v uint16) {
	s.Struct.SetUint16(24, v)
}

// RPCServiceSpec_List is a list of RPCServiceSpec.
type RPCServiceSpec_List struct{ capnp.List }

// NewRPCServiceSpec creates a new list of RPCServiceSpec.
func NewRPCServiceSpec_List(s *capnp.Segment, sz int32) (RPCServiceSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return RPCServiceSpec_List{l}, err
}

func (s RPCServiceSpec_List) At(i int) RPCServiceSpec { return RPCServiceSpec{s.List.Struct(i)} }

func (s RPCServiceSpec_List) Set(i int, v RPCServiceSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s RPCServiceSpec_List) String() string {
	str, _ := text.MarshalList(0xb6e32df5c504ebf2, s.List)
	return str
}

// RPCServiceSpec_Promise is a wrapper for a RPCServiceSpec promised by a client call.
type RPCServiceSpec_Promise struct{ *capnp.Pipeline }

func (p RPCServiceSpec_Promise) Struct() (RPCServiceSpec, error) {
	s, err := p.Pipeline.Struct()
	return RPCServiceSpec{s}, err
}

type X509KeyPair struct{ capnp.Struct }

// X509KeyPair_TypeID is the unique identifier for the type X509KeyPair.
const X509KeyPair_TypeID = 0xf4dd73213f6e70a6

func NewX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func NewRootX509KeyPair(s *capnp.Segment) (X509KeyPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return X509KeyPair{st}, err
}

func ReadRootX509KeyPair(msg *capnp.Message) (X509KeyPair, error) {
	root, err := msg.RootPtr()
	return X509KeyPair{root.Struct()}, err
}

func (s X509KeyPair) String() string {
	str, _ := text.Marshal(0xf4dd73213f6e70a6, s.Struct)
	return str
}

func (s X509KeyPair) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s X509KeyPair) Cert() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s X509KeyPair) HasCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s X509KeyPair) SetCert(v []byte) error {
	return s.Struct.SetData(1, v)
}

// X509KeyPair_List is a list of X509KeyPair.
type X509KeyPair_List struct{ capnp.List }

// NewX509KeyPair creates a new list of X509KeyPair.
func NewX509KeyPair_List(s *capnp.Segment, sz int32) (X509KeyPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return X509KeyPair_List{l}, err
}

func (s X509KeyPair_List) At(i int) X509KeyPair { return X509KeyPair{s.List.Struct(i)} }

func (s X509KeyPair_List) Set(i int, v X509KeyPair) error { return s.List.SetStruct(i, v.Struct) }

func (s X509KeyPair_List) String() string {
	str, _ := text.MarshalList(0xf4dd73213f6e70a6, s.List)
	return str
}

// X509KeyPair_Promise is a wrapper for a X509KeyPair promised by a client call.
type X509KeyPair_Promise struct{ *capnp.Pipeline }

func (p X509KeyPair_Promise) Struct() (X509KeyPair, error) {
	s, err := p.Pipeline.Struct()
	return X509KeyPair{s}, err
}

type MetricsServiceSpec struct{ capnp.Struct }

// MetricsServiceSpec_TypeID is the unique identifier for the type MetricsServiceSpec.
const MetricsServiceSpec_TypeID = 0xb9780f65d5146efb

func NewMetricsServiceSpec(s *capnp.Segment) (MetricsServiceSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MetricsServiceSpec{st}, err
}

func NewRootMetricsServiceSpec(s *capnp.Segment) (MetricsServiceSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MetricsServiceSpec{st}, err
}

func ReadRootMetricsServiceSpec(msg *capnp.Message) (MetricsServiceSpec, error) {
	root, err := msg.RootPtr()
	return MetricsServiceSpec{root.Struct()}, err
}

func (s MetricsServiceSpec) String() string {
	str, _ := text.Marshal(0xb9780f65d5146efb, s.Struct)
	return str
}

func (s MetricsServiceSpec) HttpPort() uint16 {
	return s.Struct.Uint16(0)
}

func (s MetricsServiceSpec) SetHttpPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

// MetricsServiceSpec_List is a list of MetricsServiceSpec.
type MetricsServiceSpec_List struct{ capnp.List }

// NewMetricsServiceSpec creates a new list of MetricsServiceSpec.
func NewMetricsServiceSpec_List(s *capnp.Segment, sz int32) (MetricsServiceSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MetricsServiceSpec_List{l}, err
}

func (s MetricsServiceSpec_List) At(i int) MetricsServiceSpec {
	return MetricsServiceSpec{s.List.Struct(i)}
}

func (s MetricsServiceSpec_List) Set(i int, v MetricsServiceSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MetricsServiceSpec_List) String() string {
	str, _ := text.MarshalList(0xb9780f65d5146efb, s.List)
	return str
}

// MetricsServiceSpec_Promise is a wrapper for a MetricsServiceSpec promised by a client call.
type MetricsServiceSpec_Promise struct{ *capnp.Pipeline }

func (p MetricsServiceSpec_Promise) Struct() (MetricsServiceSpec, error) {
	s, err := p.Pipeline.Struct()
	return MetricsServiceSpec{s}, err
}

const schema_db8274f9144abc7e = "x\xda\xac\x92AH\x14m\x1c\xc6\x9f\xe7}\xc7o\x15" +
	"vq\x87\xd9\xc3w\xd3:\xa5PX!\x94\x10\x9b\xac" +
	"\x1e\xb4\x84}\x15A:D\xc38\xbaC\xbb\xb3\xe3\xec" +
	"\xa4\xabD\x94\x15T\xe0!\x0a:F\x97\xa0CD\x97" +
	"@\xc8nFx\x0c\xea`t\xa9\x83\x87nQ\x87(" +
	"\x98\x98Y\x1d\xb7-(\xa2\xdb\xcc;\xcf\xfc\xdf\xdf\xf3" +
	"\x7f\x9e\xbek<.\x0e\xb6-H@\xedk\xfb/\xfc" +
	"\xf8A[\xff\xbc\xff\xfd\x13\xa8\x0c\xb5\xf0\xc2\xd3\xd1\xdc" +
	"\x97`\xf9\x0d\xb4\x14`\xdc\xe3;\xe3!\xa3\xa7\x07\xdc" +
	"\x02\xc3\xafn\xee\x95\xddY_\x8d\xb4\xfcQ{\xf8\xaa" +
	"\x104n\x8aH\xbc\"\xf2`8\x7f\xe7\xe5\xed\xcb\xa5" +
	"\xe7\xcf\xa0g\x9a\xb4m2R<\x16\x9b\xc6Z\xac]" +
	"\x15\x8f\xc0\xf0\xbe\xe7\xe6\xf7\xd4\xde~j\xd1\xc6\x8aK" +
	"r\xc3X\x89\xff\xba.\x17\xc0\xb0\xb417;\xfc\xc2" +
	"\xf8\xd6\x02\xd1\x18\xdc\xafm\x1a\x831\xfb1m\x0bG" +
	"B\xab\xea\xce8\xb3\x07,az\xae70^,L" +
	"\xd8\xfe\xbcc\xd9\x13)\xcf\xb6\x8a\xa4\xcaJ\x0d\xd0\x08" +
	"\xe8\xe6(\xa0\xceH\xaa\xb2\xa0N\xe6\x18\x1d:\x87\x00" +
	"5-\xa9<A]\x88\x1c\x05\xa0W\xc6\x01U\x96T" +
	"uA]\xa6s\x94\x80~\xae\x17P\x9e\xa4:/\x18" +
	"NW+\xa6\xe3\x8e\x0c\x01`\x07\x04;\xc0.\xd3\xf3" +
	"F\xa6w\xde\xc2Z\x83c\x04L\xce:\xbd\xaa\x1f0" +
	"\x05\xc1\x14\x98\x90\xcb\x98|\xcc\x0e|\xc7\xaa\xed\xd0{" +
	"\xb6\x85\x88^K\xe83\x11}ZR\xfd/\x18\x96\x82" +
	"\xc0+V\xfd \xba\xbeu^\xb2\x89B\xd9\xb1\xdd`" +
	"\xc2\x93\x8dE\xa4\x93Q\xc3K\x80\x1a\x92T\xc5\xa6E" +
	"\x8c\x9d\x02\xd4II5\xd5\xb4\x88\xc9\x01}\xb2K\xd5" +
	"%\xd5\x15\xc1\xd0\xf7\xac\x98\x0f\xf9\x06!\xb3\xbb\xe5\x02" +
	"\x99\x8d \xe2;\x0b6\xa4\x1f0\xbb\x1b{\xe3s\xde" +
	"2\x0b\xb6\x1f(\x8d\"<}\xeb\xaeZ{}c\x1d" +
	"J\x13\x1c\xcc\x91i@\xe7rX\x1c\x1e\xeb\x9eq\xca" +
	"6\xbbg\xaa~\xc5\x8c-f \x98\xf9\xc9\xe2T\x7f" +
	"\xdf\xd1\x13\xf6b\xd1t|\xc4\xcbjO\x1c\xf6\xec\xd5" +
	"{\xba\x127;\x16'{\x9b\xdc\xa4\xce\xda\x8b\x7f\x0b" +
	"\xd2i\xfd;\x17\xdb\x95\xb5\xfd$\xa8\xa6\xc6.\xfd\xaa" +
	"\xb1QP%I\x154\x0557\xb0\xdbX\xca\xed\xc2" +
	"F\x8d\x09$\xd5\xc5?\xcb\xae\x16c\xfc&\xbb\xc4E" +
	"\xc5\xac\x17\xaa\xae[\x8b\x9c\xb5C\xb0\x1d\xfc\x1e\x00\x00" +
	"\xff\xff\x0eR\x1d\xa1"

func init() {
	schemas.Register(schema_db8274f9144abc7e,
		0xb6e32df5c504ebf2,
		0xb9780f65d5146efb,
		0xbec6688394d29776,
		0xf4dd73213f6e70a6,
		0xfc13c8456771ca68)
}
