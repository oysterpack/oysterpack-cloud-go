// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type HealthcheckSpec struct{ capnp.Struct }

// HealthcheckSpec_TypeID is the unique identifier for the type HealthcheckSpec.
const HealthcheckSpec_TypeID = 0xe65df7cace0dd1c2

func NewHealthcheckSpec(s *capnp.Segment) (HealthcheckSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return HealthcheckSpec{st}, err
}

func NewRootHealthcheckSpec(s *capnp.Segment) (HealthcheckSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return HealthcheckSpec{st}, err
}

func ReadRootHealthcheckSpec(msg *capnp.Message) (HealthcheckSpec, error) {
	root, err := msg.RootPtr()
	return HealthcheckSpec{root.Struct()}, err
}

func (s HealthcheckSpec) String() string {
	str, _ := text.Marshal(0xe65df7cace0dd1c2, s.Struct)
	return str
}

func (s HealthcheckSpec) HealthCheckID() uint64 {
	return s.Struct.Uint64(0)
}

func (s HealthcheckSpec) SetHealthCheckID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HealthcheckSpec) MetricSpec() (GaugeMetricSpec, error) {
	p, err := s.Struct.Ptr(0)
	return GaugeMetricSpec{Struct: p.Struct()}, err
}

func (s HealthcheckSpec) HasMetricSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HealthcheckSpec) SetMetricSpec(v GaugeMetricSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMetricSpec sets the metricSpec field to a newly
// allocated GaugeMetricSpec struct, preferring placement in s's segment.
func (s HealthcheckSpec) NewMetricSpec() (GaugeMetricSpec, error) {
	ss, err := NewGaugeMetricSpec(s.Struct.Segment())
	if err != nil {
		return GaugeMetricSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s HealthcheckSpec) RunTimeIntervalSeconds() uint16 {
	return s.Struct.Uint16(8)
}

func (s HealthcheckSpec) SetRunTimeIntervalSeconds(v uint16) {
	s.Struct.SetUint16(8, v)
}

// HealthcheckSpec_List is a list of HealthcheckSpec.
type HealthcheckSpec_List struct{ capnp.List }

// NewHealthcheckSpec creates a new list of HealthcheckSpec.
func NewHealthcheckSpec_List(s *capnp.Segment, sz int32) (HealthcheckSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return HealthcheckSpec_List{l}, err
}

func (s HealthcheckSpec_List) At(i int) HealthcheckSpec { return HealthcheckSpec{s.List.Struct(i)} }

func (s HealthcheckSpec_List) Set(i int, v HealthcheckSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HealthcheckSpec_List) String() string {
	str, _ := text.MarshalList(0xe65df7cace0dd1c2, s.List)
	return str
}

// HealthcheckSpec_Promise is a wrapper for a HealthcheckSpec promised by a client call.
type HealthcheckSpec_Promise struct{ *capnp.Pipeline }

func (p HealthcheckSpec_Promise) Struct() (HealthcheckSpec, error) {
	s, err := p.Pipeline.Struct()
	return HealthcheckSpec{s}, err
}

func (p HealthcheckSpec_Promise) MetricSpec() GaugeMetricSpec_Promise {
	return GaugeMetricSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_e42204a141ec4e6f = "x\xda,\xcd\xb1J\xc3P\x1c\x85\xf1s\xeeM\x0c\x05" +
	"\x85\x84trQ\xdc\\\x04qs\xa9\xd2\x0a\x06\xb4\xf4" +
	"\x92\x16\xaa\xe0\x10n\xff\x90\x926\x0di\xf4I|\x01" +
	"\x9f\xc0\xddEp\x11\x1c\x04\xf1\x15\xc4I\\\x1d\xaf\x14" +
	"\xba}\xfc\x96/\xbc?Q\x87\xfe\xab\x02\xcc\xae\xbf\xe1" +
	"^>\xb6\xde\xdf\xfen\xbeab*\xb7\xe8\xff\x9c>" +
	"x{_\xf0\x19\x00G\x09\xb7\x19_\xad2\x1e\xf1\x11" +
	"}\x97K6kr\x9bk\xb1\xc5\xf2\xc0fUY\x1d" +
	"\x9f\xafMl\x91VZ\xec\x804\x9b\xda\x03<\x02\xd1" +
	"Y\x0d\x98\x9e\xa6\x19(\x92m\xae\xec\xf2\x1a0\x17\x9a" +
	"f\xac\x18)\xafM\x05D\xa3'\xc0\x8c5\xcdDq" +
	"\xfd\xe9\xe6\xd8\x11[$=\xb6\xa0\xd8\x02\xdd\\\x9az" +
	"j\xd3\x0aZ,C\xf7\xd9\xdd\x1fv\xbc\xe7_\x80\x0c" +
	"AW\xdf\x96\xc3\xe9\\\x12\x96\x8d\xd4w\xd9,\xed\x88" +
	"]\x94\x93%\x03(\x06\xe0\x7f\x00\x00\x00\xff\xff\x81B" +
	"@9"

func init() {
	schemas.Register(schema_e42204a141ec4e6f,
		0xe65df7cace0dd1c2)
}
