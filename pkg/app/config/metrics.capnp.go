// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type MetricsServiceSpec struct{ capnp.Struct }

// MetricsServiceSpec_TypeID is the unique identifier for the type MetricsServiceSpec.
const MetricsServiceSpec_TypeID = 0xb9780f65d5146efb

func NewMetricsServiceSpec(s *capnp.Segment) (MetricsServiceSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MetricsServiceSpec{st}, err
}

func NewRootMetricsServiceSpec(s *capnp.Segment) (MetricsServiceSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MetricsServiceSpec{st}, err
}

func ReadRootMetricsServiceSpec(msg *capnp.Message) (MetricsServiceSpec, error) {
	root, err := msg.RootPtr()
	return MetricsServiceSpec{root.Struct()}, err
}

func (s MetricsServiceSpec) String() string {
	str, _ := text.Marshal(0xb9780f65d5146efb, s.Struct)
	return str
}

func (s MetricsServiceSpec) HttpPort() uint16 {
	return s.Struct.Uint16(0) ^ 4444
}

func (s MetricsServiceSpec) SetHttpPort(v uint16) {
	s.Struct.SetUint16(0, v^4444)
}

func (s MetricsServiceSpec) MetricSpecs() (MetricSpecs, error) {
	p, err := s.Struct.Ptr(0)
	return MetricSpecs{Struct: p.Struct()}, err
}

func (s MetricsServiceSpec) HasMetricSpecs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MetricsServiceSpec) SetMetricSpecs(v MetricSpecs) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMetricSpecs sets the metricSpecs field to a newly
// allocated MetricSpecs struct, preferring placement in s's segment.
func (s MetricsServiceSpec) NewMetricSpecs() (MetricSpecs, error) {
	ss, err := NewMetricSpecs(s.Struct.Segment())
	if err != nil {
		return MetricSpecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MetricsServiceSpec_List is a list of MetricsServiceSpec.
type MetricsServiceSpec_List struct{ capnp.List }

// NewMetricsServiceSpec creates a new list of MetricsServiceSpec.
func NewMetricsServiceSpec_List(s *capnp.Segment, sz int32) (MetricsServiceSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MetricsServiceSpec_List{l}, err
}

func (s MetricsServiceSpec_List) At(i int) MetricsServiceSpec {
	return MetricsServiceSpec{s.List.Struct(i)}
}

func (s MetricsServiceSpec_List) Set(i int, v MetricsServiceSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MetricsServiceSpec_List) String() string {
	str, _ := text.MarshalList(0xb9780f65d5146efb, s.List)
	return str
}

// MetricsServiceSpec_Promise is a wrapper for a MetricsServiceSpec promised by a client call.
type MetricsServiceSpec_Promise struct{ *capnp.Pipeline }

func (p MetricsServiceSpec_Promise) Struct() (MetricsServiceSpec, error) {
	s, err := p.Pipeline.Struct()
	return MetricsServiceSpec{s}, err
}

func (p MetricsServiceSpec_Promise) MetricSpecs() MetricSpecs_Promise {
	return MetricSpecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MetricSpecs struct{ capnp.Struct }

// MetricSpecs_TypeID is the unique identifier for the type MetricSpecs.
const MetricSpecs_TypeID = 0x88542dcd70c6048b

func NewMetricSpecs(s *capnp.Segment) (MetricSpecs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return MetricSpecs{st}, err
}

func NewRootMetricSpecs(s *capnp.Segment) (MetricSpecs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return MetricSpecs{st}, err
}

func ReadRootMetricSpecs(msg *capnp.Message) (MetricSpecs, error) {
	root, err := msg.RootPtr()
	return MetricSpecs{root.Struct()}, err
}

func (s MetricSpecs) String() string {
	str, _ := text.Marshal(0x88542dcd70c6048b, s.Struct)
	return str
}

func (s MetricSpecs) CounterSpecs() (CounterMetricSpec_List, error) {
	p, err := s.Struct.Ptr(0)
	return CounterMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasCounterSpecs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetCounterSpecs(v CounterMetricSpec_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCounterSpecs sets the counterSpecs field to a newly
// allocated CounterMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewCounterSpecs(n int32) (CounterMetricSpec_List, error) {
	l, err := NewCounterMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return CounterMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s MetricSpecs) CounterVectorSpecs() (CounterVectorMetricSpec_List, error) {
	p, err := s.Struct.Ptr(1)
	return CounterVectorMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasCounterVectorSpecs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetCounterVectorSpecs(v CounterVectorMetricSpec_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewCounterVectorSpecs sets the counterVectorSpecs field to a newly
// allocated CounterVectorMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewCounterVectorSpecs(n int32) (CounterVectorMetricSpec_List, error) {
	l, err := NewCounterVectorMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return CounterVectorMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s MetricSpecs) GaugeSpecs() (GaugeMetricSpec_List, error) {
	p, err := s.Struct.Ptr(2)
	return GaugeMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasGaugeSpecs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetGaugeSpecs(v GaugeMetricSpec_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewGaugeSpecs sets the gaugeSpecs field to a newly
// allocated GaugeMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewGaugeSpecs(n int32) (GaugeMetricSpec_List, error) {
	l, err := NewGaugeMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return GaugeMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s MetricSpecs) GaugeVectorSpecs() (GaugeVectorMetricSpec_List, error) {
	p, err := s.Struct.Ptr(3)
	return GaugeVectorMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasGaugeVectorSpecs() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetGaugeVectorSpecs(v GaugeVectorMetricSpec_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewGaugeVectorSpecs sets the gaugeVectorSpecs field to a newly
// allocated GaugeVectorMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewGaugeVectorSpecs(n int32) (GaugeVectorMetricSpec_List, error) {
	l, err := NewGaugeVectorMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return GaugeVectorMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s MetricSpecs) HistogramSpecs() (HistogramMetricSpec_List, error) {
	p, err := s.Struct.Ptr(4)
	return HistogramMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasHistogramSpecs() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetHistogramSpecs(v HistogramMetricSpec_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewHistogramSpecs sets the histogramSpecs field to a newly
// allocated HistogramMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewHistogramSpecs(n int32) (HistogramMetricSpec_List, error) {
	l, err := NewHistogramMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return HistogramMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s MetricSpecs) HistogramVectorSpecs() (HistogramVectorMetricSpec_List, error) {
	p, err := s.Struct.Ptr(5)
	return HistogramVectorMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasHistogramVectorSpecs() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetHistogramVectorSpecs(v HistogramVectorMetricSpec_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewHistogramVectorSpecs sets the histogramVectorSpecs field to a newly
// allocated HistogramVectorMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewHistogramVectorSpecs(n int32) (HistogramVectorMetricSpec_List, error) {
	l, err := NewHistogramVectorMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return HistogramVectorMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

// MetricSpecs_List is a list of MetricSpecs.
type MetricSpecs_List struct{ capnp.List }

// NewMetricSpecs creates a new list of MetricSpecs.
func NewMetricSpecs_List(s *capnp.Segment, sz int32) (MetricSpecs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return MetricSpecs_List{l}, err
}

func (s MetricSpecs_List) At(i int) MetricSpecs { return MetricSpecs{s.List.Struct(i)} }

func (s MetricSpecs_List) Set(i int, v MetricSpecs) error { return s.List.SetStruct(i, v.Struct) }

func (s MetricSpecs_List) String() string {
	str, _ := text.MarshalList(0x88542dcd70c6048b, s.List)
	return str
}

// MetricSpecs_Promise is a wrapper for a MetricSpecs promised by a client call.
type MetricSpecs_Promise struct{ *capnp.Pipeline }

func (p MetricSpecs_Promise) Struct() (MetricSpecs, error) {
	s, err := p.Pipeline.Struct()
	return MetricSpecs{s}, err
}

type CounterMetricSpec struct{ capnp.Struct }

// CounterMetricSpec_TypeID is the unique identifier for the type CounterMetricSpec.
const CounterMetricSpec_TypeID = 0xfe237f35c45ecc97

func NewCounterMetricSpec(s *capnp.Segment) (CounterMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CounterMetricSpec{st}, err
}

func NewRootCounterMetricSpec(s *capnp.Segment) (CounterMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CounterMetricSpec{st}, err
}

func ReadRootCounterMetricSpec(msg *capnp.Message) (CounterMetricSpec, error) {
	root, err := msg.RootPtr()
	return CounterMetricSpec{root.Struct()}, err
}

func (s CounterMetricSpec) String() string {
	str, _ := text.Marshal(0xfe237f35c45ecc97, s.Struct)
	return str
}

func (s CounterMetricSpec) ServiceId() uint64 {
	return s.Struct.Uint64(0)
}

func (s CounterMetricSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s CounterMetricSpec) MetricId() uint64 {
	return s.Struct.Uint64(8)
}

func (s CounterMetricSpec) SetMetricId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CounterMetricSpec) Help() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s CounterMetricSpec) HasHelp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CounterMetricSpec) HelpBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s CounterMetricSpec) SetHelp(v string) error {
	return s.Struct.SetText(0, v)
}

// CounterMetricSpec_List is a list of CounterMetricSpec.
type CounterMetricSpec_List struct{ capnp.List }

// NewCounterMetricSpec creates a new list of CounterMetricSpec.
func NewCounterMetricSpec_List(s *capnp.Segment, sz int32) (CounterMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return CounterMetricSpec_List{l}, err
}

func (s CounterMetricSpec_List) At(i int) CounterMetricSpec {
	return CounterMetricSpec{s.List.Struct(i)}
}

func (s CounterMetricSpec_List) Set(i int, v CounterMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CounterMetricSpec_List) String() string {
	str, _ := text.MarshalList(0xfe237f35c45ecc97, s.List)
	return str
}

// CounterMetricSpec_Promise is a wrapper for a CounterMetricSpec promised by a client call.
type CounterMetricSpec_Promise struct{ *capnp.Pipeline }

func (p CounterMetricSpec_Promise) Struct() (CounterMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return CounterMetricSpec{s}, err
}

type CounterVectorMetricSpec struct{ capnp.Struct }

// CounterVectorMetricSpec_TypeID is the unique identifier for the type CounterVectorMetricSpec.
const CounterVectorMetricSpec_TypeID = 0xdb34d9fcc1dffa24

func NewCounterVectorMetricSpec(s *capnp.Segment) (CounterVectorMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CounterVectorMetricSpec{st}, err
}

func NewRootCounterVectorMetricSpec(s *capnp.Segment) (CounterVectorMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CounterVectorMetricSpec{st}, err
}

func ReadRootCounterVectorMetricSpec(msg *capnp.Message) (CounterVectorMetricSpec, error) {
	root, err := msg.RootPtr()
	return CounterVectorMetricSpec{root.Struct()}, err
}

func (s CounterVectorMetricSpec) String() string {
	str, _ := text.Marshal(0xdb34d9fcc1dffa24, s.Struct)
	return str
}

func (s CounterVectorMetricSpec) MetricSpec() (CounterMetricSpec, error) {
	p, err := s.Struct.Ptr(0)
	return CounterMetricSpec{Struct: p.Struct()}, err
}

func (s CounterVectorMetricSpec) HasMetricSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CounterVectorMetricSpec) SetMetricSpec(v CounterMetricSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMetricSpec sets the metricSpec field to a newly
// allocated CounterMetricSpec struct, preferring placement in s's segment.
func (s CounterVectorMetricSpec) NewMetricSpec() (CounterMetricSpec, error) {
	ss, err := NewCounterMetricSpec(s.Struct.Segment())
	if err != nil {
		return CounterMetricSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CounterVectorMetricSpec) LabelNames() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s CounterVectorMetricSpec) HasLabelNames() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CounterVectorMetricSpec) SetLabelNames(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewLabelNames sets the labelNames field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CounterVectorMetricSpec) NewLabelNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// CounterVectorMetricSpec_List is a list of CounterVectorMetricSpec.
type CounterVectorMetricSpec_List struct{ capnp.List }

// NewCounterVectorMetricSpec creates a new list of CounterVectorMetricSpec.
func NewCounterVectorMetricSpec_List(s *capnp.Segment, sz int32) (CounterVectorMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return CounterVectorMetricSpec_List{l}, err
}

func (s CounterVectorMetricSpec_List) At(i int) CounterVectorMetricSpec {
	return CounterVectorMetricSpec{s.List.Struct(i)}
}

func (s CounterVectorMetricSpec_List) Set(i int, v CounterVectorMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CounterVectorMetricSpec_List) String() string {
	str, _ := text.MarshalList(0xdb34d9fcc1dffa24, s.List)
	return str
}

// CounterVectorMetricSpec_Promise is a wrapper for a CounterVectorMetricSpec promised by a client call.
type CounterVectorMetricSpec_Promise struct{ *capnp.Pipeline }

func (p CounterVectorMetricSpec_Promise) Struct() (CounterVectorMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return CounterVectorMetricSpec{s}, err
}

func (p CounterVectorMetricSpec_Promise) MetricSpec() CounterMetricSpec_Promise {
	return CounterMetricSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type GaugeMetricSpec struct{ capnp.Struct }

// GaugeMetricSpec_TypeID is the unique identifier for the type GaugeMetricSpec.
const GaugeMetricSpec_TypeID = 0xeebf043f542943d3

func NewGaugeMetricSpec(s *capnp.Segment) (GaugeMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GaugeMetricSpec{st}, err
}

func NewRootGaugeMetricSpec(s *capnp.Segment) (GaugeMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GaugeMetricSpec{st}, err
}

func ReadRootGaugeMetricSpec(msg *capnp.Message) (GaugeMetricSpec, error) {
	root, err := msg.RootPtr()
	return GaugeMetricSpec{root.Struct()}, err
}

func (s GaugeMetricSpec) String() string {
	str, _ := text.Marshal(0xeebf043f542943d3, s.Struct)
	return str
}

func (s GaugeMetricSpec) ServiceId() uint64 {
	return s.Struct.Uint64(0)
}

func (s GaugeMetricSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s GaugeMetricSpec) MetricId() uint64 {
	return s.Struct.Uint64(8)
}

func (s GaugeMetricSpec) SetMetricId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s GaugeMetricSpec) Help() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GaugeMetricSpec) HasHelp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GaugeMetricSpec) HelpBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GaugeMetricSpec) SetHelp(v string) error {
	return s.Struct.SetText(0, v)
}

// GaugeMetricSpec_List is a list of GaugeMetricSpec.
type GaugeMetricSpec_List struct{ capnp.List }

// NewGaugeMetricSpec creates a new list of GaugeMetricSpec.
func NewGaugeMetricSpec_List(s *capnp.Segment, sz int32) (GaugeMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return GaugeMetricSpec_List{l}, err
}

func (s GaugeMetricSpec_List) At(i int) GaugeMetricSpec { return GaugeMetricSpec{s.List.Struct(i)} }

func (s GaugeMetricSpec_List) Set(i int, v GaugeMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GaugeMetricSpec_List) String() string {
	str, _ := text.MarshalList(0xeebf043f542943d3, s.List)
	return str
}

// GaugeMetricSpec_Promise is a wrapper for a GaugeMetricSpec promised by a client call.
type GaugeMetricSpec_Promise struct{ *capnp.Pipeline }

func (p GaugeMetricSpec_Promise) Struct() (GaugeMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return GaugeMetricSpec{s}, err
}

type GaugeVectorMetricSpec struct{ capnp.Struct }

// GaugeVectorMetricSpec_TypeID is the unique identifier for the type GaugeVectorMetricSpec.
const GaugeVectorMetricSpec_TypeID = 0xa2274ad761e6a999

func NewGaugeVectorMetricSpec(s *capnp.Segment) (GaugeVectorMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GaugeVectorMetricSpec{st}, err
}

func NewRootGaugeVectorMetricSpec(s *capnp.Segment) (GaugeVectorMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GaugeVectorMetricSpec{st}, err
}

func ReadRootGaugeVectorMetricSpec(msg *capnp.Message) (GaugeVectorMetricSpec, error) {
	root, err := msg.RootPtr()
	return GaugeVectorMetricSpec{root.Struct()}, err
}

func (s GaugeVectorMetricSpec) String() string {
	str, _ := text.Marshal(0xa2274ad761e6a999, s.Struct)
	return str
}

func (s GaugeVectorMetricSpec) MetricSpec() (GaugeMetricSpec, error) {
	p, err := s.Struct.Ptr(0)
	return GaugeMetricSpec{Struct: p.Struct()}, err
}

func (s GaugeVectorMetricSpec) HasMetricSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GaugeVectorMetricSpec) SetMetricSpec(v GaugeMetricSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMetricSpec sets the metricSpec field to a newly
// allocated GaugeMetricSpec struct, preferring placement in s's segment.
func (s GaugeVectorMetricSpec) NewMetricSpec() (GaugeMetricSpec, error) {
	ss, err := NewGaugeMetricSpec(s.Struct.Segment())
	if err != nil {
		return GaugeMetricSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s GaugeVectorMetricSpec) LabelNames() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s GaugeVectorMetricSpec) HasLabelNames() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GaugeVectorMetricSpec) SetLabelNames(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewLabelNames sets the labelNames field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s GaugeVectorMetricSpec) NewLabelNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// GaugeVectorMetricSpec_List is a list of GaugeVectorMetricSpec.
type GaugeVectorMetricSpec_List struct{ capnp.List }

// NewGaugeVectorMetricSpec creates a new list of GaugeVectorMetricSpec.
func NewGaugeVectorMetricSpec_List(s *capnp.Segment, sz int32) (GaugeVectorMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return GaugeVectorMetricSpec_List{l}, err
}

func (s GaugeVectorMetricSpec_List) At(i int) GaugeVectorMetricSpec {
	return GaugeVectorMetricSpec{s.List.Struct(i)}
}

func (s GaugeVectorMetricSpec_List) Set(i int, v GaugeVectorMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GaugeVectorMetricSpec_List) String() string {
	str, _ := text.MarshalList(0xa2274ad761e6a999, s.List)
	return str
}

// GaugeVectorMetricSpec_Promise is a wrapper for a GaugeVectorMetricSpec promised by a client call.
type GaugeVectorMetricSpec_Promise struct{ *capnp.Pipeline }

func (p GaugeVectorMetricSpec_Promise) Struct() (GaugeVectorMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return GaugeVectorMetricSpec{s}, err
}

func (p GaugeVectorMetricSpec_Promise) MetricSpec() GaugeMetricSpec_Promise {
	return GaugeMetricSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type HistogramMetricSpec struct{ capnp.Struct }

// HistogramMetricSpec_TypeID is the unique identifier for the type HistogramMetricSpec.
const HistogramMetricSpec_TypeID = 0x8e79552fdf96a8a7

func NewHistogramMetricSpec(s *capnp.Segment) (HistogramMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return HistogramMetricSpec{st}, err
}

func NewRootHistogramMetricSpec(s *capnp.Segment) (HistogramMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return HistogramMetricSpec{st}, err
}

func ReadRootHistogramMetricSpec(msg *capnp.Message) (HistogramMetricSpec, error) {
	root, err := msg.RootPtr()
	return HistogramMetricSpec{root.Struct()}, err
}

func (s HistogramMetricSpec) String() string {
	str, _ := text.Marshal(0x8e79552fdf96a8a7, s.Struct)
	return str
}

func (s HistogramMetricSpec) ServiceId() uint64 {
	return s.Struct.Uint64(0)
}

func (s HistogramMetricSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HistogramMetricSpec) MetricId() uint64 {
	return s.Struct.Uint64(8)
}

func (s HistogramMetricSpec) SetMetricId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s HistogramMetricSpec) Help() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HistogramMetricSpec) HasHelp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HistogramMetricSpec) HelpBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HistogramMetricSpec) SetHelp(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HistogramMetricSpec) Buckets() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s HistogramMetricSpec) HasBuckets() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HistogramMetricSpec) SetBuckets(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBuckets sets the buckets field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s HistogramMetricSpec) NewBuckets(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// HistogramMetricSpec_List is a list of HistogramMetricSpec.
type HistogramMetricSpec_List struct{ capnp.List }

// NewHistogramMetricSpec creates a new list of HistogramMetricSpec.
func NewHistogramMetricSpec_List(s *capnp.Segment, sz int32) (HistogramMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return HistogramMetricSpec_List{l}, err
}

func (s HistogramMetricSpec_List) At(i int) HistogramMetricSpec {
	return HistogramMetricSpec{s.List.Struct(i)}
}

func (s HistogramMetricSpec_List) Set(i int, v HistogramMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HistogramMetricSpec_List) String() string {
	str, _ := text.MarshalList(0x8e79552fdf96a8a7, s.List)
	return str
}

// HistogramMetricSpec_Promise is a wrapper for a HistogramMetricSpec promised by a client call.
type HistogramMetricSpec_Promise struct{ *capnp.Pipeline }

func (p HistogramMetricSpec_Promise) Struct() (HistogramMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return HistogramMetricSpec{s}, err
}

type HistogramVectorMetricSpec struct{ capnp.Struct }

// HistogramVectorMetricSpec_TypeID is the unique identifier for the type HistogramVectorMetricSpec.
const HistogramVectorMetricSpec_TypeID = 0x8527f1eb82ceeb98

func NewHistogramVectorMetricSpec(s *capnp.Segment) (HistogramVectorMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return HistogramVectorMetricSpec{st}, err
}

func NewRootHistogramVectorMetricSpec(s *capnp.Segment) (HistogramVectorMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return HistogramVectorMetricSpec{st}, err
}

func ReadRootHistogramVectorMetricSpec(msg *capnp.Message) (HistogramVectorMetricSpec, error) {
	root, err := msg.RootPtr()
	return HistogramVectorMetricSpec{root.Struct()}, err
}

func (s HistogramVectorMetricSpec) String() string {
	str, _ := text.Marshal(0x8527f1eb82ceeb98, s.Struct)
	return str
}

func (s HistogramVectorMetricSpec) MetricSpec() (HistogramMetricSpec, error) {
	p, err := s.Struct.Ptr(0)
	return HistogramMetricSpec{Struct: p.Struct()}, err
}

func (s HistogramVectorMetricSpec) HasMetricSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HistogramVectorMetricSpec) SetMetricSpec(v HistogramMetricSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMetricSpec sets the metricSpec field to a newly
// allocated HistogramMetricSpec struct, preferring placement in s's segment.
func (s HistogramVectorMetricSpec) NewMetricSpec() (HistogramMetricSpec, error) {
	ss, err := NewHistogramMetricSpec(s.Struct.Segment())
	if err != nil {
		return HistogramMetricSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s HistogramVectorMetricSpec) LabelNames() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s HistogramVectorMetricSpec) HasLabelNames() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HistogramVectorMetricSpec) SetLabelNames(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewLabelNames sets the labelNames field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s HistogramVectorMetricSpec) NewLabelNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// HistogramVectorMetricSpec_List is a list of HistogramVectorMetricSpec.
type HistogramVectorMetricSpec_List struct{ capnp.List }

// NewHistogramVectorMetricSpec creates a new list of HistogramVectorMetricSpec.
func NewHistogramVectorMetricSpec_List(s *capnp.Segment, sz int32) (HistogramVectorMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return HistogramVectorMetricSpec_List{l}, err
}

func (s HistogramVectorMetricSpec_List) At(i int) HistogramVectorMetricSpec {
	return HistogramVectorMetricSpec{s.List.Struct(i)}
}

func (s HistogramVectorMetricSpec_List) Set(i int, v HistogramVectorMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HistogramVectorMetricSpec_List) String() string {
	str, _ := text.MarshalList(0x8527f1eb82ceeb98, s.List)
	return str
}

// HistogramVectorMetricSpec_Promise is a wrapper for a HistogramVectorMetricSpec promised by a client call.
type HistogramVectorMetricSpec_Promise struct{ *capnp.Pipeline }

func (p HistogramVectorMetricSpec_Promise) Struct() (HistogramVectorMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return HistogramVectorMetricSpec{s}, err
}

func (p HistogramVectorMetricSpec_Promise) MetricSpec() HistogramMetricSpec_Promise {
	return HistogramMetricSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_db8274f9144abc7e = "x\xda\xdc\x94_\x88\xdcT\x14\xc6\xcfwo2\xb3\xd5" +
	"\xed\xee\xc4\xcc\x83Ba\xa7\xfe\xa1\xddBk\xc7n\xa1" +
	"\x88R\xdb*\xb6KW\xf66\xddUD\x8a\xd9\xecu" +
	"':3I\x93L\xb5\x82.\x14\x04\xad\x7f^\x04\xdd" +
	"\x8a \x0ab\x15K\x19\xe8\x8b`\x91\x8a\x8a\x0f\xad\x88" +
	"\xa2\"}\xe8\x93Z(\x08\xfa\xe6\x1f\x8c\xdcL\x9a\xa4" +
	"a\x05e_\xa4o\x973_\xce\xfc\xee\xf9\xbes7" +
	"\xbf\xce\xeebM}Q#\x12\x13z%^\xba\xf4\xc5" +
	"\x91K\xbf\xac{\x86\x8c\x11\xc4O\x7f8Y\xff-:" +
	"r\x9etV%\xdar\x0b\xdb\x09s\xab:\x9aM\xf6" +
	"8!~^\xfb\xcc?\xb7q\xff\xb3%qE)\xde" +
	"f_\x99\xfd\xe4\xb3\x13\xec~\x10\xe2w\x8e\xbfr\xe1" +
	"\xd6\x99\xc3/\x91\x18\x01+\xb7~J\xbb\x0e\xe6\x8b\x9a" +
	"\xfa\xf09\xed'B|\xec\xdd\x1f\xed\xef&\xd7\xbd\xb5" +
	"\x1cG_\xbf\x11\xe6\x19]\x89O\xeb\x8a\xe3\x8fn\xfd" +
	"\x1b9\xfa\xc4\x07\xaauQ\x0d\xa5nV\xae\x81\xb9#" +
	"a\xba\xb3\xa2\xd47\xff~\xe1\xcc\x9f\xdfO\x9c_\xae" +
	"\xf5\x9b\x95\xdb`\xf6\x13\xf1\x89D\xfc\xf5\xae\xf1\xfd\xdb" +
	"\xb5\x8f~.S\xab\xd6\xe6\xda\xea\xaf\xe6\xc6\xaa:\x8d" +
	"WO\x12\xe2W\xcf\x1e\xf8d\xeb\xe2M\x7f-'\xde" +
	"\xa2\x0f1\x98\xc6\x90R\xaf\x1e:I\xdb\xe2\x8e\x8c\x02" +
	"\xd7\x097i\x8e\xedw\xfd\xdbw\xbba\xe4-\x04v" +
	"gV:\x91\x17L%\xbfZ\xbeth\x1a\x10C\\" +
	"#\xd2@d\x8c?H$\xd6s\x88\x09\x06\x03\xa8C" +
	"\x15\x9b\xaa\xb8\x99C\xeceH\x1b[>q\xe9\xa0\x96" +
	"\x0f\x9e\x80\x1a!n\xdbs\xb2}\x9f\xdd!.C\x8c" +
	"\x10\xa690LL\x1d3&6`\xca!\x10*\x8a" +
	"\xeb3\x8ac\x8f\x12\x89%\x0eq\xaa@\xd1\x7f\x8dH" +
	"\x9c\xe2\x10_2\x18\x8c\xd5\xc1\x88\x8cs\x0a\xed,\x87" +
	"\xb8\xc8`p^\x07'2~8J$.rX\x1a" +
	"\x18\x0cM\xabC#2\x81'\x89\xf6\x81\xc3Z\xa3\xca" +
	"\xba^\x87Nd\xde\x80\xf7\x88\xac5\xaa\xbe\x0d\x0c\xb1" +
	"\xe3\xf5\xba\x91\x0c,\x1a\xf5\xa5\x93]\xa1\x96\x8f\x9f\x90" +
	"\\&\xd5\xcd\"\x19\xa8\xe5K^Tg1H\xd5\x0b" +
	"voAZ\xbe\xa4+T\x99\xffE\xd5\xact0\xe8" +
	"\xe8\x84D\xb98\x0bm*n\xa5\x96\xd2\xf6\x8eu%" +
	"j\xd1\x93\xa2\x12\xa9\xfbV\xe9j\xd9Z\xa6\xfa\xcb>" +
	"\xf1Rv2\xc3\xe0(\xbfj\x99_\xf6>\"\xf10" +
	"\x87h\x17\xfcr'\x89D\x8bCD\x0cH\xed:\xb8" +
	"\xc188&\x8e\xa7\xcer\x0c\xfc\xea\xef$\x12\xefs" +
	"\x88\xcf\x19\xe2P\x06\x87\\G\xee!\xccc\x151\xac" +
	"\xca\x80\xf6\xcc\x13\xd1\xe5\xdahK\xb6}\xa1\x81\xc5\x07" +
	"^~C\x9c\xfe\xf6\xe8\xa7$4\x86\x1d\xebU\xdc\xa8" +
	"\x89\x8f\x11\xef\x96m\xbf\xe1\x07^\xe5\x90;/\xc3\x86" +
	"\xdb}\xc4\x0b:v\xe4z\xdd\x86=\xe7\xf5\xa2F\xd4" +
	"r\xc3\xc6\xa0\xf7\xa6\xc6\x94\xdd\x9d\xb7#/8\xbcV" +
	"\xfd\x8b\x8a\xec0aq\xae\xe7<&\xa3lV\xd7\x96" +
	"\x92\x9cN\xe8\xde\xd4\xb7|\xb3\xaa\xbetV\xb8Y\xc5" +
	"p\xfc\xdb\xcd\xe2\xc5\xcd\x0a\xad\xc1(\x935/\xee9" +
	"`\x8cO\xe64\x19\xcc\\\x0as\x07C\xdc\x8a\"\x7f" +
	"\xda\x0b\"5\x8c*\xb1\xd5\xd5\x87\x0c* VU\x80" +
	"j\xf9\x1b\x9d2\x968v\xa5;\x92Of,\xd9\xf7" +
	"\x15N\xa6\xb8\x8a\xff\xf1\xcdI\x9c*\x91\x0cg$\xf7" +
	"\xa8\x1c\xdf\xcd!\xa6\x0b$SjT{9\xc4\x03y" +
	"\x8eg6\x183c\xe2\x05\x0e\xb1\xf4\x7f\x8b\xec?x" +
	"Pz\xf1\xaf\xae;\xff\x1d\x00\x00\xff\xff\x0cs(\xb1"

func init() {
	schemas.Register(schema_db8274f9144abc7e,
		0x8527f1eb82ceeb98,
		0x88542dcd70c6048b,
		0x8e79552fdf96a8a7,
		0xa2274ad761e6a999,
		0xb9780f65d5146efb,
		0xdb34d9fcc1dffa24,
		0xeebf043f542943d3,
		0xfe237f35c45ecc97)
}
