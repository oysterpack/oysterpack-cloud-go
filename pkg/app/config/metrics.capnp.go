// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type MetricsServiceSpec struct{ capnp.Struct }

// MetricsServiceSpec_TypeID is the unique identifier for the type MetricsServiceSpec.
const MetricsServiceSpec_TypeID = 0xb9780f65d5146efb

func NewMetricsServiceSpec(s *capnp.Segment) (MetricsServiceSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MetricsServiceSpec{st}, err
}

func NewRootMetricsServiceSpec(s *capnp.Segment) (MetricsServiceSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MetricsServiceSpec{st}, err
}

func ReadRootMetricsServiceSpec(msg *capnp.Message) (MetricsServiceSpec, error) {
	root, err := msg.RootPtr()
	return MetricsServiceSpec{root.Struct()}, err
}

func (s MetricsServiceSpec) String() string {
	str, _ := text.Marshal(0xb9780f65d5146efb, s.Struct)
	return str
}

func (s MetricsServiceSpec) HttpPort() uint16 {
	return s.Struct.Uint16(0)
}

func (s MetricsServiceSpec) SetHttpPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s MetricsServiceSpec) MetricSpecs() (MetricSpecs, error) {
	p, err := s.Struct.Ptr(0)
	return MetricSpecs{Struct: p.Struct()}, err
}

func (s MetricsServiceSpec) HasMetricSpecs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MetricsServiceSpec) SetMetricSpecs(v MetricSpecs) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMetricSpecs sets the metricSpecs field to a newly
// allocated MetricSpecs struct, preferring placement in s's segment.
func (s MetricsServiceSpec) NewMetricSpecs() (MetricSpecs, error) {
	ss, err := NewMetricSpecs(s.Struct.Segment())
	if err != nil {
		return MetricSpecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MetricsServiceSpec_List is a list of MetricsServiceSpec.
type MetricsServiceSpec_List struct{ capnp.List }

// NewMetricsServiceSpec creates a new list of MetricsServiceSpec.
func NewMetricsServiceSpec_List(s *capnp.Segment, sz int32) (MetricsServiceSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MetricsServiceSpec_List{l}, err
}

func (s MetricsServiceSpec_List) At(i int) MetricsServiceSpec {
	return MetricsServiceSpec{s.List.Struct(i)}
}

func (s MetricsServiceSpec_List) Set(i int, v MetricsServiceSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MetricsServiceSpec_List) String() string {
	str, _ := text.MarshalList(0xb9780f65d5146efb, s.List)
	return str
}

// MetricsServiceSpec_Promise is a wrapper for a MetricsServiceSpec promised by a client call.
type MetricsServiceSpec_Promise struct{ *capnp.Pipeline }

func (p MetricsServiceSpec_Promise) Struct() (MetricsServiceSpec, error) {
	s, err := p.Pipeline.Struct()
	return MetricsServiceSpec{s}, err
}

func (p MetricsServiceSpec_Promise) MetricSpecs() MetricSpecs_Promise {
	return MetricSpecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MetricSpecs struct{ capnp.Struct }

// MetricSpecs_TypeID is the unique identifier for the type MetricSpecs.
const MetricSpecs_TypeID = 0x88542dcd70c6048b

func NewMetricSpecs(s *capnp.Segment) (MetricSpecs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return MetricSpecs{st}, err
}

func NewRootMetricSpecs(s *capnp.Segment) (MetricSpecs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return MetricSpecs{st}, err
}

func ReadRootMetricSpecs(msg *capnp.Message) (MetricSpecs, error) {
	root, err := msg.RootPtr()
	return MetricSpecs{root.Struct()}, err
}

func (s MetricSpecs) String() string {
	str, _ := text.Marshal(0x88542dcd70c6048b, s.Struct)
	return str
}

func (s MetricSpecs) CounterSpecs() (CounterMetricSpec_List, error) {
	p, err := s.Struct.Ptr(0)
	return CounterMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasCounterSpecs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetCounterSpecs(v CounterMetricSpec_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCounterSpecs sets the counterSpecs field to a newly
// allocated CounterMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewCounterSpecs(n int32) (CounterMetricSpec_List, error) {
	l, err := NewCounterMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return CounterMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s MetricSpecs) CounterVectorSpecs() (CounterVectorMetricSpec_List, error) {
	p, err := s.Struct.Ptr(1)
	return CounterVectorMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasCounterVectorSpecs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetCounterVectorSpecs(v CounterVectorMetricSpec_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewCounterVectorSpecs sets the counterVectorSpecs field to a newly
// allocated CounterVectorMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewCounterVectorSpecs(n int32) (CounterVectorMetricSpec_List, error) {
	l, err := NewCounterVectorMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return CounterVectorMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s MetricSpecs) GaugeSpecs() (GaugeMetricSpec_List, error) {
	p, err := s.Struct.Ptr(2)
	return GaugeMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasGaugeSpecs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetGaugeSpecs(v GaugeMetricSpec_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewGaugeSpecs sets the gaugeSpecs field to a newly
// allocated GaugeMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewGaugeSpecs(n int32) (GaugeMetricSpec_List, error) {
	l, err := NewGaugeMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return GaugeMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s MetricSpecs) GaugeVectorSpecs() (GaugeVectorMetricSpec_List, error) {
	p, err := s.Struct.Ptr(3)
	return GaugeVectorMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasGaugeVectorSpecs() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetGaugeVectorSpecs(v GaugeVectorMetricSpec_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewGaugeVectorSpecs sets the gaugeVectorSpecs field to a newly
// allocated GaugeVectorMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewGaugeVectorSpecs(n int32) (GaugeVectorMetricSpec_List, error) {
	l, err := NewGaugeVectorMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return GaugeVectorMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s MetricSpecs) HistogramSpecs() (HistogramMetricSpec_List, error) {
	p, err := s.Struct.Ptr(4)
	return HistogramMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasHistogramSpecs() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetHistogramSpecs(v HistogramMetricSpec_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewHistogramSpecs sets the histogramSpecs field to a newly
// allocated HistogramMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewHistogramSpecs(n int32) (HistogramMetricSpec_List, error) {
	l, err := NewHistogramMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return HistogramMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s MetricSpecs) HistogramVectorSpecs() (HistogramVectorMetricSpec_List, error) {
	p, err := s.Struct.Ptr(5)
	return HistogramVectorMetricSpec_List{List: p.List()}, err
}

func (s MetricSpecs) HasHistogramVectorSpecs() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s MetricSpecs) SetHistogramVectorSpecs(v HistogramVectorMetricSpec_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewHistogramVectorSpecs sets the histogramVectorSpecs field to a newly
// allocated HistogramVectorMetricSpec_List, preferring placement in s's segment.
func (s MetricSpecs) NewHistogramVectorSpecs(n int32) (HistogramVectorMetricSpec_List, error) {
	l, err := NewHistogramVectorMetricSpec_List(s.Struct.Segment(), n)
	if err != nil {
		return HistogramVectorMetricSpec_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

// MetricSpecs_List is a list of MetricSpecs.
type MetricSpecs_List struct{ capnp.List }

// NewMetricSpecs creates a new list of MetricSpecs.
func NewMetricSpecs_List(s *capnp.Segment, sz int32) (MetricSpecs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return MetricSpecs_List{l}, err
}

func (s MetricSpecs_List) At(i int) MetricSpecs { return MetricSpecs{s.List.Struct(i)} }

func (s MetricSpecs_List) Set(i int, v MetricSpecs) error { return s.List.SetStruct(i, v.Struct) }

func (s MetricSpecs_List) String() string {
	str, _ := text.MarshalList(0x88542dcd70c6048b, s.List)
	return str
}

// MetricSpecs_Promise is a wrapper for a MetricSpecs promised by a client call.
type MetricSpecs_Promise struct{ *capnp.Pipeline }

func (p MetricSpecs_Promise) Struct() (MetricSpecs, error) {
	s, err := p.Pipeline.Struct()
	return MetricSpecs{s}, err
}

type CounterMetricSpec struct{ capnp.Struct }

// CounterMetricSpec_TypeID is the unique identifier for the type CounterMetricSpec.
const CounterMetricSpec_TypeID = 0xfe237f35c45ecc97

func NewCounterMetricSpec(s *capnp.Segment) (CounterMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CounterMetricSpec{st}, err
}

func NewRootCounterMetricSpec(s *capnp.Segment) (CounterMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CounterMetricSpec{st}, err
}

func ReadRootCounterMetricSpec(msg *capnp.Message) (CounterMetricSpec, error) {
	root, err := msg.RootPtr()
	return CounterMetricSpec{root.Struct()}, err
}

func (s CounterMetricSpec) String() string {
	str, _ := text.Marshal(0xfe237f35c45ecc97, s.Struct)
	return str
}

func (s CounterMetricSpec) ServiceId() uint64 {
	return s.Struct.Uint64(0)
}

func (s CounterMetricSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s CounterMetricSpec) MetricId() uint64 {
	return s.Struct.Uint64(8)
}

func (s CounterMetricSpec) SetMetricId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CounterMetricSpec) Help() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s CounterMetricSpec) HasHelp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CounterMetricSpec) HelpBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s CounterMetricSpec) SetHelp(v string) error {
	return s.Struct.SetText(0, v)
}

// CounterMetricSpec_List is a list of CounterMetricSpec.
type CounterMetricSpec_List struct{ capnp.List }

// NewCounterMetricSpec creates a new list of CounterMetricSpec.
func NewCounterMetricSpec_List(s *capnp.Segment, sz int32) (CounterMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return CounterMetricSpec_List{l}, err
}

func (s CounterMetricSpec_List) At(i int) CounterMetricSpec {
	return CounterMetricSpec{s.List.Struct(i)}
}

func (s CounterMetricSpec_List) Set(i int, v CounterMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CounterMetricSpec_List) String() string {
	str, _ := text.MarshalList(0xfe237f35c45ecc97, s.List)
	return str
}

// CounterMetricSpec_Promise is a wrapper for a CounterMetricSpec promised by a client call.
type CounterMetricSpec_Promise struct{ *capnp.Pipeline }

func (p CounterMetricSpec_Promise) Struct() (CounterMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return CounterMetricSpec{s}, err
}

type CounterVectorMetricSpec struct{ capnp.Struct }

// CounterVectorMetricSpec_TypeID is the unique identifier for the type CounterVectorMetricSpec.
const CounterVectorMetricSpec_TypeID = 0xdb34d9fcc1dffa24

func NewCounterVectorMetricSpec(s *capnp.Segment) (CounterVectorMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CounterVectorMetricSpec{st}, err
}

func NewRootCounterVectorMetricSpec(s *capnp.Segment) (CounterVectorMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CounterVectorMetricSpec{st}, err
}

func ReadRootCounterVectorMetricSpec(msg *capnp.Message) (CounterVectorMetricSpec, error) {
	root, err := msg.RootPtr()
	return CounterVectorMetricSpec{root.Struct()}, err
}

func (s CounterVectorMetricSpec) String() string {
	str, _ := text.Marshal(0xdb34d9fcc1dffa24, s.Struct)
	return str
}

func (s CounterVectorMetricSpec) MetricSpec() (CounterMetricSpec, error) {
	p, err := s.Struct.Ptr(0)
	return CounterMetricSpec{Struct: p.Struct()}, err
}

func (s CounterVectorMetricSpec) HasMetricSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CounterVectorMetricSpec) SetMetricSpec(v CounterMetricSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMetricSpec sets the metricSpec field to a newly
// allocated CounterMetricSpec struct, preferring placement in s's segment.
func (s CounterVectorMetricSpec) NewMetricSpec() (CounterMetricSpec, error) {
	ss, err := NewCounterMetricSpec(s.Struct.Segment())
	if err != nil {
		return CounterMetricSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CounterVectorMetricSpec) LabelNames() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s CounterVectorMetricSpec) HasLabelNames() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CounterVectorMetricSpec) SetLabelNames(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewLabelNames sets the labelNames field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CounterVectorMetricSpec) NewLabelNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// CounterVectorMetricSpec_List is a list of CounterVectorMetricSpec.
type CounterVectorMetricSpec_List struct{ capnp.List }

// NewCounterVectorMetricSpec creates a new list of CounterVectorMetricSpec.
func NewCounterVectorMetricSpec_List(s *capnp.Segment, sz int32) (CounterVectorMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return CounterVectorMetricSpec_List{l}, err
}

func (s CounterVectorMetricSpec_List) At(i int) CounterVectorMetricSpec {
	return CounterVectorMetricSpec{s.List.Struct(i)}
}

func (s CounterVectorMetricSpec_List) Set(i int, v CounterVectorMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CounterVectorMetricSpec_List) String() string {
	str, _ := text.MarshalList(0xdb34d9fcc1dffa24, s.List)
	return str
}

// CounterVectorMetricSpec_Promise is a wrapper for a CounterVectorMetricSpec promised by a client call.
type CounterVectorMetricSpec_Promise struct{ *capnp.Pipeline }

func (p CounterVectorMetricSpec_Promise) Struct() (CounterVectorMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return CounterVectorMetricSpec{s}, err
}

func (p CounterVectorMetricSpec_Promise) MetricSpec() CounterMetricSpec_Promise {
	return CounterMetricSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type GaugeMetricSpec struct{ capnp.Struct }

// GaugeMetricSpec_TypeID is the unique identifier for the type GaugeMetricSpec.
const GaugeMetricSpec_TypeID = 0xeebf043f542943d3

func NewGaugeMetricSpec(s *capnp.Segment) (GaugeMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GaugeMetricSpec{st}, err
}

func NewRootGaugeMetricSpec(s *capnp.Segment) (GaugeMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GaugeMetricSpec{st}, err
}

func ReadRootGaugeMetricSpec(msg *capnp.Message) (GaugeMetricSpec, error) {
	root, err := msg.RootPtr()
	return GaugeMetricSpec{root.Struct()}, err
}

func (s GaugeMetricSpec) String() string {
	str, _ := text.Marshal(0xeebf043f542943d3, s.Struct)
	return str
}

func (s GaugeMetricSpec) ServiceId() uint64 {
	return s.Struct.Uint64(0)
}

func (s GaugeMetricSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s GaugeMetricSpec) MetricId() uint64 {
	return s.Struct.Uint64(8)
}

func (s GaugeMetricSpec) SetMetricId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s GaugeMetricSpec) Help() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GaugeMetricSpec) HasHelp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GaugeMetricSpec) HelpBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GaugeMetricSpec) SetHelp(v string) error {
	return s.Struct.SetText(0, v)
}

// GaugeMetricSpec_List is a list of GaugeMetricSpec.
type GaugeMetricSpec_List struct{ capnp.List }

// NewGaugeMetricSpec creates a new list of GaugeMetricSpec.
func NewGaugeMetricSpec_List(s *capnp.Segment, sz int32) (GaugeMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return GaugeMetricSpec_List{l}, err
}

func (s GaugeMetricSpec_List) At(i int) GaugeMetricSpec { return GaugeMetricSpec{s.List.Struct(i)} }

func (s GaugeMetricSpec_List) Set(i int, v GaugeMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GaugeMetricSpec_List) String() string {
	str, _ := text.MarshalList(0xeebf043f542943d3, s.List)
	return str
}

// GaugeMetricSpec_Promise is a wrapper for a GaugeMetricSpec promised by a client call.
type GaugeMetricSpec_Promise struct{ *capnp.Pipeline }

func (p GaugeMetricSpec_Promise) Struct() (GaugeMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return GaugeMetricSpec{s}, err
}

type GaugeVectorMetricSpec struct{ capnp.Struct }

// GaugeVectorMetricSpec_TypeID is the unique identifier for the type GaugeVectorMetricSpec.
const GaugeVectorMetricSpec_TypeID = 0xa2274ad761e6a999

func NewGaugeVectorMetricSpec(s *capnp.Segment) (GaugeVectorMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GaugeVectorMetricSpec{st}, err
}

func NewRootGaugeVectorMetricSpec(s *capnp.Segment) (GaugeVectorMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GaugeVectorMetricSpec{st}, err
}

func ReadRootGaugeVectorMetricSpec(msg *capnp.Message) (GaugeVectorMetricSpec, error) {
	root, err := msg.RootPtr()
	return GaugeVectorMetricSpec{root.Struct()}, err
}

func (s GaugeVectorMetricSpec) String() string {
	str, _ := text.Marshal(0xa2274ad761e6a999, s.Struct)
	return str
}

func (s GaugeVectorMetricSpec) MetricSpec() (GaugeMetricSpec, error) {
	p, err := s.Struct.Ptr(0)
	return GaugeMetricSpec{Struct: p.Struct()}, err
}

func (s GaugeVectorMetricSpec) HasMetricSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GaugeVectorMetricSpec) SetMetricSpec(v GaugeMetricSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMetricSpec sets the metricSpec field to a newly
// allocated GaugeMetricSpec struct, preferring placement in s's segment.
func (s GaugeVectorMetricSpec) NewMetricSpec() (GaugeMetricSpec, error) {
	ss, err := NewGaugeMetricSpec(s.Struct.Segment())
	if err != nil {
		return GaugeMetricSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s GaugeVectorMetricSpec) LabelNames() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s GaugeVectorMetricSpec) HasLabelNames() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GaugeVectorMetricSpec) SetLabelNames(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewLabelNames sets the labelNames field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s GaugeVectorMetricSpec) NewLabelNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// GaugeVectorMetricSpec_List is a list of GaugeVectorMetricSpec.
type GaugeVectorMetricSpec_List struct{ capnp.List }

// NewGaugeVectorMetricSpec creates a new list of GaugeVectorMetricSpec.
func NewGaugeVectorMetricSpec_List(s *capnp.Segment, sz int32) (GaugeVectorMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return GaugeVectorMetricSpec_List{l}, err
}

func (s GaugeVectorMetricSpec_List) At(i int) GaugeVectorMetricSpec {
	return GaugeVectorMetricSpec{s.List.Struct(i)}
}

func (s GaugeVectorMetricSpec_List) Set(i int, v GaugeVectorMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GaugeVectorMetricSpec_List) String() string {
	str, _ := text.MarshalList(0xa2274ad761e6a999, s.List)
	return str
}

// GaugeVectorMetricSpec_Promise is a wrapper for a GaugeVectorMetricSpec promised by a client call.
type GaugeVectorMetricSpec_Promise struct{ *capnp.Pipeline }

func (p GaugeVectorMetricSpec_Promise) Struct() (GaugeVectorMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return GaugeVectorMetricSpec{s}, err
}

func (p GaugeVectorMetricSpec_Promise) MetricSpec() GaugeMetricSpec_Promise {
	return GaugeMetricSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type HistogramMetricSpec struct{ capnp.Struct }

// HistogramMetricSpec_TypeID is the unique identifier for the type HistogramMetricSpec.
const HistogramMetricSpec_TypeID = 0x8e79552fdf96a8a7

func NewHistogramMetricSpec(s *capnp.Segment) (HistogramMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return HistogramMetricSpec{st}, err
}

func NewRootHistogramMetricSpec(s *capnp.Segment) (HistogramMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return HistogramMetricSpec{st}, err
}

func ReadRootHistogramMetricSpec(msg *capnp.Message) (HistogramMetricSpec, error) {
	root, err := msg.RootPtr()
	return HistogramMetricSpec{root.Struct()}, err
}

func (s HistogramMetricSpec) String() string {
	str, _ := text.Marshal(0x8e79552fdf96a8a7, s.Struct)
	return str
}

func (s HistogramMetricSpec) ServiceId() uint64 {
	return s.Struct.Uint64(0)
}

func (s HistogramMetricSpec) SetServiceId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HistogramMetricSpec) MetricId() uint64 {
	return s.Struct.Uint64(8)
}

func (s HistogramMetricSpec) SetMetricId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s HistogramMetricSpec) Help() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HistogramMetricSpec) HasHelp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HistogramMetricSpec) HelpBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HistogramMetricSpec) SetHelp(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HistogramMetricSpec) Buckets() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s HistogramMetricSpec) HasBuckets() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HistogramMetricSpec) SetBuckets(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBuckets sets the buckets field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s HistogramMetricSpec) NewBuckets(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// HistogramMetricSpec_List is a list of HistogramMetricSpec.
type HistogramMetricSpec_List struct{ capnp.List }

// NewHistogramMetricSpec creates a new list of HistogramMetricSpec.
func NewHistogramMetricSpec_List(s *capnp.Segment, sz int32) (HistogramMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return HistogramMetricSpec_List{l}, err
}

func (s HistogramMetricSpec_List) At(i int) HistogramMetricSpec {
	return HistogramMetricSpec{s.List.Struct(i)}
}

func (s HistogramMetricSpec_List) Set(i int, v HistogramMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HistogramMetricSpec_List) String() string {
	str, _ := text.MarshalList(0x8e79552fdf96a8a7, s.List)
	return str
}

// HistogramMetricSpec_Promise is a wrapper for a HistogramMetricSpec promised by a client call.
type HistogramMetricSpec_Promise struct{ *capnp.Pipeline }

func (p HistogramMetricSpec_Promise) Struct() (HistogramMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return HistogramMetricSpec{s}, err
}

type HistogramVectorMetricSpec struct{ capnp.Struct }

// HistogramVectorMetricSpec_TypeID is the unique identifier for the type HistogramVectorMetricSpec.
const HistogramVectorMetricSpec_TypeID = 0x8527f1eb82ceeb98

func NewHistogramVectorMetricSpec(s *capnp.Segment) (HistogramVectorMetricSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return HistogramVectorMetricSpec{st}, err
}

func NewRootHistogramVectorMetricSpec(s *capnp.Segment) (HistogramVectorMetricSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return HistogramVectorMetricSpec{st}, err
}

func ReadRootHistogramVectorMetricSpec(msg *capnp.Message) (HistogramVectorMetricSpec, error) {
	root, err := msg.RootPtr()
	return HistogramVectorMetricSpec{root.Struct()}, err
}

func (s HistogramVectorMetricSpec) String() string {
	str, _ := text.Marshal(0x8527f1eb82ceeb98, s.Struct)
	return str
}

func (s HistogramVectorMetricSpec) MetricSpec() (HistogramMetricSpec, error) {
	p, err := s.Struct.Ptr(0)
	return HistogramMetricSpec{Struct: p.Struct()}, err
}

func (s HistogramVectorMetricSpec) HasMetricSpec() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HistogramVectorMetricSpec) SetMetricSpec(v HistogramMetricSpec) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMetricSpec sets the metricSpec field to a newly
// allocated HistogramMetricSpec struct, preferring placement in s's segment.
func (s HistogramVectorMetricSpec) NewMetricSpec() (HistogramMetricSpec, error) {
	ss, err := NewHistogramMetricSpec(s.Struct.Segment())
	if err != nil {
		return HistogramMetricSpec{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s HistogramVectorMetricSpec) LabelNames() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s HistogramVectorMetricSpec) HasLabelNames() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HistogramVectorMetricSpec) SetLabelNames(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewLabelNames sets the labelNames field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s HistogramVectorMetricSpec) NewLabelNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// HistogramVectorMetricSpec_List is a list of HistogramVectorMetricSpec.
type HistogramVectorMetricSpec_List struct{ capnp.List }

// NewHistogramVectorMetricSpec creates a new list of HistogramVectorMetricSpec.
func NewHistogramVectorMetricSpec_List(s *capnp.Segment, sz int32) (HistogramVectorMetricSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return HistogramVectorMetricSpec_List{l}, err
}

func (s HistogramVectorMetricSpec_List) At(i int) HistogramVectorMetricSpec {
	return HistogramVectorMetricSpec{s.List.Struct(i)}
}

func (s HistogramVectorMetricSpec_List) Set(i int, v HistogramVectorMetricSpec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HistogramVectorMetricSpec_List) String() string {
	str, _ := text.MarshalList(0x8527f1eb82ceeb98, s.List)
	return str
}

// HistogramVectorMetricSpec_Promise is a wrapper for a HistogramVectorMetricSpec promised by a client call.
type HistogramVectorMetricSpec_Promise struct{ *capnp.Pipeline }

func (p HistogramVectorMetricSpec_Promise) Struct() (HistogramVectorMetricSpec, error) {
	s, err := p.Pipeline.Struct()
	return HistogramVectorMetricSpec{s}, err
}

func (p HistogramVectorMetricSpec_Promise) MetricSpec() HistogramMetricSpec_Promise {
	return HistogramMetricSpec_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_db8274f9144abc7e = "x\xda\xdc\x94_\x88\xdcT\x14\xc6\xcfwo2\xd9\xea" +
	"\xba;1\xf3\xa0P\xd8\xa9\x7fh\xb7\xd0\xda\xb1[(" +
	"\xa2\xd4\xb6\x8a\xed\xd2\x95\xbdMw\x15\x1f\x8a\xd9\xecu" +
	"':3I\x93l\xb5\x82.\x14\x04\xad\x7f^\x04\xdd" +
	"\x8a \x0ab\x15K\x19\xe8\x8b`\x91\x8a\x8a\x0f\xad\x88" +
	"\xa2\"}\xe8\x93Z(\x08\xfa\xe6\x1f\x8c\xdcL\x9a\xa4" +
	"a\x05\xa5/\xd2\xb7\xcb\x99/g~\xf7|\xdf\xb9\x9b" +
	"^gw\xb3\x96\xbe\xa4\x11\x89\x09\xbd\x96,_\xfc\xe2" +
	"\xf0\xc5_\xd6>C\xe6\x08\x92\xa7?\x9cl\xfc\x16\x1f" +
	">G:3\x886\xdf\xcav\xc0\xda\xa2\x8eV\x8b=" +
	"NH\x9e\xd7>\x0b\xcen\xd8\xf7lE\\S\x8a\xb7" +
	"\xd9WV?\xfd\xec8{\x00\x84\xe4\x9dc\xaf\x9c\xbf" +
	"m\xe6\xd0K$F\xc0\xaa\xad\x9f\xd2\xae\x87\xf5\xa2\xa6" +
	">|N\xfb\x89\x90\x1c}\xf7G\xe7\xbb\xc9\xb5o\xad" +
	"\xc4\xd1\xd7o\x82uZW\xe2S\xba\xe2\xf8\xa3\xd7\xf8" +
	"F\x8e>\xf1\x81j]VC\xa9[\xb5k`mO" +
	"\x99\xee\xaa)\xf5-\xbf\x9f?\xfd\xe7\xf7\x13\xe7Vj" +
	"\xfdf\xedvX\xfdT|<\x15\x7f\xbds|\xdf6" +
	"\xed\xa3\x9f\xab\xd4\xaa\xb5\xb5\xc6\xf8\xd5\xda`\xa8\xd3\xb8" +
	"q\x82\x90\xbczf\xff'[\x96n\xfek%\xf1f" +
	"}\x88\xc12\x87\x94\xfa\xba\xa1\x13\xb45\xe9\xca8\xf4" +
	"\xdch\xa3\xe6:A/\xb8c\x97\x17\xc5\xfeB\xe8t" +
	"g\xa5\x1b\xfb\xe1T\xfa\xab\x1dH\x97\xa6\x011\xc45" +
	"\"\x0dD\xe6\xf8CDb\x1d\x87\x98`0\x81\x06T" +
	"\xb1\xa5\x8a\x9b8\xc4\x1e\x86\xac\xb1\x1d\x10\x97.\xea\xc5" +
	"\xe0\x09\xa8\x13\x92\x8e3';\xf7;]\xe22\xc2\x08" +
	"a\x9a\x03\xc3\xc4\xd41gb\x03\xa6\x02\x02\x91\xa2\xb8" +
	"!\xa78\xfa(\x91X\xe6\x10'K\x14\xfd\xd7\x88\xc4" +
	"I\x0e\xf1%\x83\xc9X\x03\x8c\xc8<\xab\xd0\xcep\x88" +
	"\x0b\x0c&\xe7\x0dp\"\xf3\x87#D\xe2\x02\x87\xad\x81" +
	"\xc1\xd4\xb4\x064\"\x0bx\x92h/8\xec\xd5\xaa\xac" +
	"\xeb\x0d\xe8D\xd6\x8dx\x8f\xc8^\xad\xea[\xc1\x90\xb8" +
	"\xfeb/\x96\xa1M\xa3\x81t\xf3+\xd4\x8b\xf1\x13\xd2" +
	"\xcbd\xbaY\xa4\x03\xb5\x03\xc9\xcb\xea<\x06\x99z\xc1" +
	"Y\\\x90v \xe92U\xee\x7fY5+]\x0c:" +
	"\xba\x11Q!\xceC\x9b\x89\xdb\x99\xa5\xb4\xadk_\x8e" +
	"Z\xf6\xa4\xacD\xe6\xbe]\xb9Z\xbe\x96\x99\xfe\x92O" +
	"\xbc\x92\x9d\xdc0\xb8\xca\xafz\xee\x97\xb3\x97H<\xcc" +
	"!:%\xbf\xbcI\"\xd1\xe6\x101\x032\xbb\x0e\xac" +
	"7\x0f\x8c\x89c\x99\xb3\x1c\x03\xbf\xfa;\x88\xc4\xfb\x1c" +
	"\xe2s\x86$\x92\xe1A\xcf\x95\xbb\x09\xf3XE\x0c\xab" +
	"r\xa0\xdd\xf3Dt\xa96\xda\x96\x9d@h`\xc9\xfe" +
	"\x97\xdf\x10\xa7\xbe=\xf2)\x09\x8da\xfb:\x157j" +
	"\xe1c$\xbbd'h\x06\xa1_;\xe8\xcd\xcb\xa8\xe9" +
	"\xf5\x1e\xf1\xc3\xae\x13{~\xaf\xe9\xcc\xf9\x8bq3n" +
	"{Qs\xd0{cs\xca\xe9\xcd;\xb1\x1f\x1eZ\xa3" +
	"\xfeEEv\x98\xb04\xb7\xe8>&\xe3|V\xd7V" +
	"\x92\x9cM\xe8\xbe\xcc\xb7b\xb3\x8c@\xbaW\xb8Y\xe5" +
	"p\xfc\xdb\xcd\xe2\xe5\xcd\x8a\xec\xc1(\xd35\xaf\xee\xf9" +
	"dA\x93\xc3\xcce0w2$\xed8\x0e\xa6\xfd0" +
	"V\xc30\x88\xc1\xa0\x12\xa0\xa1\xe2S/^\xe8\x8c\xb0" +
	"B\xb13\xdb\x90b.c\xe9\xb6_\xe1\\\xca\x8b\xf8" +
	"\x1f_\x9c\xd4\xa7\x0a\xc9pNr\xafJ\xf1=\x1cb" +
	"\xbaD2\xa5\x06\xb5\x87C<X\xa4xf\xbd93" +
	"&^\xe0\x10\xcb\xff\xb7\xc0\xfe\x83\x07\x95\xf7\xfe\xea\xba" +
	"\xf3\xdf\x01\x00\x00\xff\xff\xcb\x1a(6"

func init() {
	schemas.Register(schema_db8274f9144abc7e,
		0x8527f1eb82ceeb98,
		0x88542dcd70c6048b,
		0x8e79552fdf96a8a7,
		0xa2274ad761e6a999,
		0xb9780f65d5146efb,
		0xdb34d9fcc1dffa24,
		0xeebf043f542943d3,
		0xfe237f35c45ecc97)
}
