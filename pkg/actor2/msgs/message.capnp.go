// Code generated by capnpc-go. DO NOT EDIT.

package msgs

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Envelope struct{ capnp.Struct }

// Envelope_TypeID is the unique identifier for the type Envelope.
const Envelope_TypeID = 0xf38cccd618967ecd

func NewEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Envelope{st}, err
}

func NewRootEnvelope(s *capnp.Segment) (Envelope, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Envelope{st}, err
}

func ReadRootEnvelope(msg *capnp.Message) (Envelope, error) {
	root, err := msg.RootPtr()
	return Envelope{root.Struct()}, err
}

func (s Envelope) String() string {
	str, _ := text.Marshal(0xf38cccd618967ecd, s.Struct)
	return str
}

func (s Envelope) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Envelope) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Envelope) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Envelope) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Envelope) Created() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Envelope) SetCreated(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Envelope) ReplyTo() (ChannelAddress, error) {
	p, err := s.Struct.Ptr(1)
	return ChannelAddress{Struct: p.Struct()}, err
}

func (s Envelope) HasReplyTo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Envelope) SetReplyTo(v ChannelAddress) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewReplyTo sets the replyTo field to a newly
// allocated ChannelAddress struct, preferring placement in s's segment.
func (s Envelope) NewReplyTo() (ChannelAddress, error) {
	ss, err := NewChannelAddress(s.Struct.Segment())
	if err != nil {
		return ChannelAddress{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Envelope) Channel() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Envelope) HasChannel() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Envelope) ChannelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Envelope) SetChannel(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Envelope) MessageType() uint8 {
	return s.Struct.Uint8(8)
}

func (s Envelope) SetMessageType(v uint8) {
	s.Struct.SetUint8(8, v)
}

func (s Envelope) Message() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Envelope) HasMessage() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Envelope) SetMessage(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Envelope) CorrelationId() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Envelope) HasCorrelationId() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Envelope) CorrelationIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Envelope) SetCorrelationId(v string) error {
	return s.Struct.SetText(4, v)
}

// Envelope_List is a list of Envelope.
type Envelope_List struct{ capnp.List }

// NewEnvelope creates a new list of Envelope.
func NewEnvelope_List(s *capnp.Segment, sz int32) (Envelope_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return Envelope_List{l}, err
}

func (s Envelope_List) At(i int) Envelope { return Envelope{s.List.Struct(i)} }

func (s Envelope_List) Set(i int, v Envelope) error { return s.List.SetStruct(i, v.Struct) }

func (s Envelope_List) String() string {
	str, _ := text.MarshalList(0xf38cccd618967ecd, s.List)
	return str
}

// Envelope_Promise is a wrapper for a Envelope promised by a client call.
type Envelope_Promise struct{ *capnp.Pipeline }

func (p Envelope_Promise) Struct() (Envelope, error) {
	s, err := p.Pipeline.Struct()
	return Envelope{s}, err
}

func (p Envelope_Promise) ReplyTo() ChannelAddress_Promise {
	return ChannelAddress_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Address struct{ capnp.Struct }

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0x9fd358f04cb684bd

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.RootPtr()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0x9fd358f04cb684bd, s.Struct)
	return str
}

func (s Address) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Address) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Address) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Address) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Address) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Address) HasId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Address) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Address) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0x9fd358f04cb684bd, s.List)
	return str
}

// Address_Promise is a wrapper for a Address promised by a client call.
type Address_Promise struct{ *capnp.Pipeline }

func (p Address_Promise) Struct() (Address, error) {
	s, err := p.Pipeline.Struct()
	return Address{s}, err
}

type ChannelAddress struct{ capnp.Struct }

// ChannelAddress_TypeID is the unique identifier for the type ChannelAddress.
const ChannelAddress_TypeID = 0xd801266d9df371b7

func NewChannelAddress(s *capnp.Segment) (ChannelAddress, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChannelAddress{st}, err
}

func NewRootChannelAddress(s *capnp.Segment) (ChannelAddress, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChannelAddress{st}, err
}

func ReadRootChannelAddress(msg *capnp.Message) (ChannelAddress, error) {
	root, err := msg.RootPtr()
	return ChannelAddress{root.Struct()}, err
}

func (s ChannelAddress) String() string {
	str, _ := text.Marshal(0xd801266d9df371b7, s.Struct)
	return str
}

func (s ChannelAddress) Channel() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ChannelAddress) HasChannel() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ChannelAddress) ChannelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ChannelAddress) SetChannel(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ChannelAddress) Address() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s ChannelAddress) HasAddress() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ChannelAddress) SetAddress(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s ChannelAddress) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// ChannelAddress_List is a list of ChannelAddress.
type ChannelAddress_List struct{ capnp.List }

// NewChannelAddress creates a new list of ChannelAddress.
func NewChannelAddress_List(s *capnp.Segment, sz int32) (ChannelAddress_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ChannelAddress_List{l}, err
}

func (s ChannelAddress_List) At(i int) ChannelAddress { return ChannelAddress{s.List.Struct(i)} }

func (s ChannelAddress_List) Set(i int, v ChannelAddress) error { return s.List.SetStruct(i, v.Struct) }

func (s ChannelAddress_List) String() string {
	str, _ := text.MarshalList(0xd801266d9df371b7, s.List)
	return str
}

// ChannelAddress_Promise is a wrapper for a ChannelAddress promised by a client call.
type ChannelAddress_Promise struct{ *capnp.Pipeline }

func (p ChannelAddress_Promise) Struct() (ChannelAddress, error) {
	s, err := p.Pipeline.Struct()
	return ChannelAddress{s}, err
}

func (p ChannelAddress_Promise) Address() Address_Promise {
	return Address_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type MessageProcessingError struct{ capnp.Struct }

// MessageProcessingError_TypeID is the unique identifier for the type MessageProcessingError.
const MessageProcessingError_TypeID = 0xa70dd5f5d238faaa

func NewMessageProcessingError(s *capnp.Segment) (MessageProcessingError, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MessageProcessingError{st}, err
}

func NewRootMessageProcessingError(s *capnp.Segment) (MessageProcessingError, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MessageProcessingError{st}, err
}

func ReadRootMessageProcessingError(msg *capnp.Message) (MessageProcessingError, error) {
	root, err := msg.RootPtr()
	return MessageProcessingError{root.Struct()}, err
}

func (s MessageProcessingError) String() string {
	str, _ := text.Marshal(0xa70dd5f5d238faaa, s.Struct)
	return str
}

func (s MessageProcessingError) Path() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s MessageProcessingError) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) SetPath(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MessageProcessingError) NewPath(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s MessageProcessingError) Message() (MessageProcessingError_Message, error) {
	p, err := s.Struct.Ptr(1)
	return MessageProcessingError_Message{Struct: p.Struct()}, err
}

func (s MessageProcessingError) HasMessage() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) SetMessage(v MessageProcessingError_Message) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewMessage sets the message field to a newly
// allocated MessageProcessingError_Message struct, preferring placement in s's segment.
func (s MessageProcessingError) NewMessage() (MessageProcessingError_Message, error) {
	ss, err := NewMessageProcessingError_Message(s.Struct.Segment())
	if err != nil {
		return MessageProcessingError_Message{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageProcessingError) Err() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s MessageProcessingError) HasErr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError) ErrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s MessageProcessingError) SetErr(v string) error {
	return s.Struct.SetText(2, v)
}

// MessageProcessingError_List is a list of MessageProcessingError.
type MessageProcessingError_List struct{ capnp.List }

// NewMessageProcessingError creates a new list of MessageProcessingError.
func NewMessageProcessingError_List(s *capnp.Segment, sz int32) (MessageProcessingError_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return MessageProcessingError_List{l}, err
}

func (s MessageProcessingError_List) At(i int) MessageProcessingError {
	return MessageProcessingError{s.List.Struct(i)}
}

func (s MessageProcessingError_List) Set(i int, v MessageProcessingError) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MessageProcessingError_List) String() string {
	str, _ := text.MarshalList(0xa70dd5f5d238faaa, s.List)
	return str
}

// MessageProcessingError_Promise is a wrapper for a MessageProcessingError promised by a client call.
type MessageProcessingError_Promise struct{ *capnp.Pipeline }

func (p MessageProcessingError_Promise) Struct() (MessageProcessingError, error) {
	s, err := p.Pipeline.Struct()
	return MessageProcessingError{s}, err
}

func (p MessageProcessingError_Promise) Message() MessageProcessingError_Message_Promise {
	return MessageProcessingError_Message_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type MessageProcessingError_Message struct{ capnp.Struct }

// MessageProcessingError_Message_TypeID is the unique identifier for the type MessageProcessingError_Message.
const MessageProcessingError_Message_TypeID = 0xd187ae75f5896d22

func NewMessageProcessingError_Message(s *capnp.Segment) (MessageProcessingError_Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return MessageProcessingError_Message{st}, err
}

func NewRootMessageProcessingError_Message(s *capnp.Segment) (MessageProcessingError_Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return MessageProcessingError_Message{st}, err
}

func ReadRootMessageProcessingError_Message(msg *capnp.Message) (MessageProcessingError_Message, error) {
	root, err := msg.RootPtr()
	return MessageProcessingError_Message{root.Struct()}, err
}

func (s MessageProcessingError_Message) String() string {
	str, _ := text.Marshal(0xd187ae75f5896d22, s.Struct)
	return str
}

func (s MessageProcessingError_Message) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MessageProcessingError_Message) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError_Message) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MessageProcessingError_Message) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s MessageProcessingError_Message) Created() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s MessageProcessingError_Message) SetCreated(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s MessageProcessingError_Message) ReplyTo() (ChannelAddress, error) {
	p, err := s.Struct.Ptr(1)
	return ChannelAddress{Struct: p.Struct()}, err
}

func (s MessageProcessingError_Message) HasReplyTo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError_Message) SetReplyTo(v ChannelAddress) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewReplyTo sets the replyTo field to a newly
// allocated ChannelAddress struct, preferring placement in s's segment.
func (s MessageProcessingError_Message) NewReplyTo() (ChannelAddress, error) {
	ss, err := NewChannelAddress(s.Struct.Segment())
	if err != nil {
		return ChannelAddress{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageProcessingError_Message) Channel() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s MessageProcessingError_Message) HasChannel() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError_Message) ChannelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s MessageProcessingError_Message) SetChannel(v string) error {
	return s.Struct.SetText(2, v)
}

func (s MessageProcessingError_Message) MessageType() uint8 {
	return s.Struct.Uint8(8)
}

func (s MessageProcessingError_Message) SetMessageType(v uint8) {
	s.Struct.SetUint8(8, v)
}

func (s MessageProcessingError_Message) CorrelationId() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s MessageProcessingError_Message) HasCorrelationId() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s MessageProcessingError_Message) CorrelationIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s MessageProcessingError_Message) SetCorrelationId(v string) error {
	return s.Struct.SetText(3, v)
}

// MessageProcessingError_Message_List is a list of MessageProcessingError_Message.
type MessageProcessingError_Message_List struct{ capnp.List }

// NewMessageProcessingError_Message creates a new list of MessageProcessingError_Message.
func NewMessageProcessingError_Message_List(s *capnp.Segment, sz int32) (MessageProcessingError_Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return MessageProcessingError_Message_List{l}, err
}

func (s MessageProcessingError_Message_List) At(i int) MessageProcessingError_Message {
	return MessageProcessingError_Message{s.List.Struct(i)}
}

func (s MessageProcessingError_Message_List) Set(i int, v MessageProcessingError_Message) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MessageProcessingError_Message_List) String() string {
	str, _ := text.MarshalList(0xd187ae75f5896d22, s.List)
	return str
}

// MessageProcessingError_Message_Promise is a wrapper for a MessageProcessingError_Message promised by a client call.
type MessageProcessingError_Message_Promise struct{ *capnp.Pipeline }

func (p MessageProcessingError_Message_Promise) Struct() (MessageProcessingError_Message, error) {
	s, err := p.Pipeline.Struct()
	return MessageProcessingError_Message{s}, err
}

func (p MessageProcessingError_Message_Promise) ReplyTo() ChannelAddress_Promise {
	return ChannelAddress_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

const schema_87fc44aa3255d2ae = "x\xda\xecU[\x88\x1cE\x17>\xa7j.\x81\x7f\x93" +
	"M\xd3\x03\xff\x12\x84\xaa\x84(&d\xc3n\x14\x8c\"" +
	"$;\xc9\x82\x86\x04\xb6\xec]4A\x84\xda\xee2\xd3" +
	"2\xd3\xdd[\xd5\xe3\xba\"\xae\x0f\x81DI0^\x10" +
	"\"H\x10\x0cb\xc0x\x81(\x04\x03\xbe,\x18\x88\x0f" +
	"F\x0d>(\xe8CD\xc4\x07!\x06D\x0c-\xd53" +
	"\xd3;$\x93\xf5U\xc4\xb7\x99:\x97\xfe\xceW\xdf\xf9" +
	"j\xecG\xb2\x93\x8c\x97\xe7)\x80\xb8\xb3\\\xc9\xce\x1f" +
	"\xfah\xef\xaf\x8f|y\x12\x9c5\x98\x9d\xb94\xb3\xed" +
	"\xf4\xee?\x0fC\x99T\x01\xdc7\xf1C\xf7\x1d\xb4\xbf" +
	"N\xe1<`v\xfa\x8f\xed\x97\xae}\xbd\xfa\xed\x1br" +
	"i\x15\xe0.I6\xa3;G\xfe\x0f\xe0.\x90\xf7\x00" +
	"\xb3\x0d\xad\xe7\xaf\xb5\xcf\x1c\xfe\x02\xc4\xedH\x96K\xcb" +
	"%\x9b}\x96>\x81\xee\x85\xbcp\x89>\x8c\x80\xd9\xc7" +
	"sW\xdfh\xdd\x81\xdf\x0c\xc2q\xa2\xf2\xb3{\xaa\x92" +
	"#\xaaX\x1c\x9f?\xfb\xda\xc8\xe5\x8bG\xaf\x82X\x83" +
	"\xa4/\xb9lSD\xf5\x9c\xbb\xbfj;\xcfT_D" +
	"\xd8\x9e\xb5\x941\xf2\xa0\xda\x8a\xbeL\xa2\xe4\xbe\x89\x80" +
	"\x05Z\x193\x85(V\xd1\x12@\x09\x01\x9cM\x9b\x9d" +
	"ML\xec\xa5(\x1a\x04\x1d\xc4\x1a\xdaS\xb5\xceQL" +
	"\x1c\xa1(^%8\x9c\xc8\xb4!JH\xb2\xc7^9" +
	")\xce_~a\x09D\x89\xe0D\x0dq\x08\xc0\xc1\x03" +
	"\x99\xf4\xd3X\xf3D\x02M\x1b\x00\xb8\x06p\x8a\xda " +
	"\xb1?i\x18\xacP\xbc\xa7[\x1c\x06\x00\x9d\x92!\xc0" +
	"\x02:\xed@\xdf\xd7\xf9;\xa5c_\x19\x13F\x07'" +
	"\x87\xb5\x8e\xb5(a\x1f\xdd\x0e\xd6\x17\xbb\x89b\xa8\x98" +
	"or\xb33\xc9DJQ\x1c\xef\x9b\xefX\xdd9\xc6" +
	"\xc4\xa7\x14\xc5E\x82\x0e!5$\x00\xce\x85\x0d\xce\x05" +
	"&~\xa1(~\xbf\xf5\xd4<\x07>\x8e\xdb\xb0\x18\x9b" +
	"\xa6\x0d>\xca\xe7\x1bJ+\x9e6\x14W\x16\x1c\x8f}" +
	"\x9f\xb5\xb5V\xc1M\x8c,v\xc7\x1b\xd0}c\xb7\xbb" +
	"\xc6l\xb2\xdb\xa5\xe4\xe7]\xf8|#l*\x9e\x14\x1c" +
	"\xf0\xb4\x11\x1a\xdeR\x86\xe5T\x01\xe0\xdae2\x00q" +
	"-`Ui\xbd\x02\xf7\xba\xfb\x8d\x96\x02\x96\x03\x02\xb8" +
	"\xe9\x06J\xb7\xba\x01[\xb9u\x9f2\xc3\xf99\xa2\x18" +
	")8?\xb1\xce9\xc1\xc4'\x14\xc5g\x04{\x94/" +
	"\xd5\x9d%\xe6\x8d Eo#Z\xd21'\xdd]\x8f" +
	"uw=2\xef\x01\x1b\x99\xb6\x11JjH\xad\xa0\xb1" +
	"\xee\x0ad\xde!\x1b9n#\xa5U5,!\xba\xc7" +
	"p\xd6}\x09\x99\xf7\x95\x8d|o#eZ\xc32\x80" +
	"\xfb\x1dj\xf7\x07d\xde\x18\xa1\xe8\xddO\xc8\xdf\xa8\xef" +
	"@oN\x0e4W`w\xfcE_+\x99\xaaA\xa5" +
	"\xbb{7D\x8b\xda!\x15=\xa9\x9aq\xa2x^\x16" +
	"\xc6\x11O\xc3\x962\xa9l%|\x94K\xc3%\x9f\x89" +
	"\xc2\xa7\xf2\xd3-\xb9D\xa2vkVi\x1e?\xce\x8d" +
	"\xf2\xe3(0\\5ebT\xc0M\x18\xf9\x8a\xef\x91" +
	"Q[\xea\x05>\xbe\x85\x8f\xdf{\x0f\x1b\xe33\xd3\xbb" +
	"\x00\xb0\x0c\x04\xcb\x80\x8bZ%\xcd\x85\xe9x\x00\xbc\x91" +
	"\xeed\xe7\xb28\xb1Hd\x13y\x9e\xcd\xe5\x8e \xdf" +
	"\xff\\(\x85\xebt\x84\xb2\xe87d\x14\xa9\xe6\x0a\x8a" +
	"<\x80\x99\x05n\x13K\x91j\xe6S\xf4\x08\x08\x0d\x97" +
	"\xc6\xc4~h9\xe3\xf3a\xc7\x06n\x90\xd24T\x17" +
	"\x92A\x9a\xbf\xbb\xc7()\x18]\x95.$y\xdb\xb6" +
	"\xc9\x95\xaf\"\xdej7\xd30i*nC\xc62\xd7" +
	"M6\xdc\x97\x11\x9fU\xdc\xa8(\xe5q\xc4%\xf7\x1b" +
	",\x1f\x07\x00+@\xb0\x02\x98\xf9\xb1\xd6\xaa)S`" +
	"a\x1c=8\xe8bw\xf6\x16\x9bf\xf9W\xd3\x98\xff" +
	"\xafW\xa5\x8ae\xcb\xe1\xa51\x97Q\x9c6\x94.\x8e" +
	"F-T\xeeK\x93\xc3Nd\xa8\xed\x8aj5\xd7V" +
	"&\xe52\x0a\xb8V&\x89#\xa3\x8a\x955\x03\xd6\x8d" +
	"t\xd6mW\xe7:&\x82`x\x80e\xd7\xadeO" +
	"Q\x14\x8f\xf6Y\xda\xfe\xba\xb3\x9f\x89g(\x8a#d" +
	"\xa5\xfb\xec\x09\xe4tA6v\x93\xf9p$[}\x1e" +
	"\xb0(;\x82Y\xd1A:\x1e(\x03`\xcb\xe2*\x9e" +
	"\xd6\x8e\xb8n|\x88&\xa3\x1d\x9du\xb1c\xddV\x8c" +
	"uv\x9ds\x96\x89o)\x8a\x9f\x96]\xe3J\xdd\xb9" +
	"\xc2\xbc\xedv\xcfw\xf7\xbb\xc6\x04\xd6\xdd\x09d^\xc3" +
	"F\xd2~\xd7\x98\xc3\xba;\x87\xcc{\xcbF\xde\xefw" +
	"\x8dwq\xd6\xfd\x00\x99\xf7\x1bR|\x88\xf4\x99\xc6u" +
	"\xac\xbb\xd7\x91y\x1b\xadi\x8c\xd9H\xa5T\xc3\x0a\x80" +
	";J\xb4;N\x98\xf7\x9c\x8d\x1c\xbd\xa5\x9d\xf48}" +
	"9kG\xe1\\[\xf1\x16\xf66\x03\xffs\x95\x7f\xaf" +
	"\xab\xac\xf0\x90\xf7\x18{=3J\x87\xb2\x19>\x8d*" +
	"\xe84\xa7\xf9C\xbb\x1a\x08\xae\xfe\xc7\x1b\xd3_\x01\x00" +
	"\x00\xff\xff\xd0\x8a, "

func init() {
	schemas.Register(schema_87fc44aa3255d2ae,
		0x9fd358f04cb684bd,
		0xa70dd5f5d238faaa,
		0xd187ae75f5896d22,
		0xd801266d9df371b7,
		0xf38cccd618967ecd)
}
